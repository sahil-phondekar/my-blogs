<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Sahil Phondekar Blog</title>
        <link>https://sahil-phondekar.github.io/my-blogs/blog</link>
        <description>Sahil Phondekar Blog</description>
        <lastBuildDate>Sun, 13 Apr 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Creating a Customizable React Component Library with Vite and Pure CSS]]></title>
            <link>https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite</link>
            <guid>https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite</guid>
            <pubDate>Sun, 13 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Building a reusable React component library can streamline UI development across multiple projects. In this blog, we'll create a customizable React component library using:]]></description>
            <content:encoded><![CDATA[<p>Building a reusable React component library can streamline UI development across multiple projects. In this blog, we'll create a <strong>customizable React component library</strong> using:</p>
<ul>
<li><strong>Vite</strong> (for fast builds)</li>
<li><strong>Pure CSS</strong> (for styling)</li>
<li><strong>CSS Modules</strong> (for scoped styles)</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-1-project-setup">Step 1: Project Setup<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#step-1-project-setup" class="hash-link" aria-label="Direct link to Step 1: Project Setup" title="Direct link to Step 1: Project Setup">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-initialize-the-project">1. Initialize the Project<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#1-initialize-the-project" class="hash-link" aria-label="Direct link to 1. Initialize the Project" title="Direct link to 1. Initialize the Project">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">mkdir react-component-library  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cd react-component-library  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm init -y  </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-install-dependencies">2. Install Dependencies<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#2-install-dependencies" class="hash-link" aria-label="Direct link to 2. Install Dependencies" title="Direct link to 2. Install Dependencies">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm install react react-dom  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm install vite @vitejs/plugin-react --save-dev  </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-configure-vite-viteconfigjs">3. Configure Vite (<code>vite.config.js</code>)<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#3-configure-vite-viteconfigjs" class="hash-link" aria-label="Direct link to 3-configure-vite-viteconfigjs" title="Direct link to 3-configure-vite-viteconfigjs">​</a></h3>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> defineConfig </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'vite'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports">react</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'@vitejs/plugin-react'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">defineConfig</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token function" style="color:rgb(80, 250, 123)">react</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">include</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'**/*.{jsx,tsx}'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">build</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">lib</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'src/index.js'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'ReactComponentLibrary'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">fileName</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">format</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">react-component-library.</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">format</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string string" style="color:rgb(255, 121, 198)">.js</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token literal-property property">formats</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">'es'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">rollupOptions</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token literal-property property">external</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">'react'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'react-dom'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token literal-property property">output</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token literal-property property">globals</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token literal-property property">react</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'React'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token string-property property">'react-dom'</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'ReactDOM'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">cssCodeSplit</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-2-create-a-reusable-button-component">Step 2: Create a Reusable Button Component<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#step-2-create-a-reusable-button-component" class="hash-link" aria-label="Direct link to Step 2: Create a Reusable Button Component" title="Direct link to Step 2: Create a Reusable Button Component">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-folder-structure">1. Folder Structure<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#1-folder-structure" class="hash-link" aria-label="Direct link to 1. Folder Structure" title="Direct link to 1. Folder Structure">​</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">src/</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">├── components/</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">│   ├── Button/</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">│   │   ├── Button.jsx</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">│   │   ├── Button.module.css</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">│   │   └── index.js</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">│   └── index.js</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">└── index.js</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-button-component-buttonjsx">2. Button Component (<code>Button.jsx</code>)<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#2-button-component-buttonjsx" class="hash-link" aria-label="Direct link to 2-button-component-buttonjsx" title="Direct link to 2-button-component-buttonjsx">​</a></h3>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">React</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"react"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports">styles</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"./Button.module.css"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token maybe-class-name">Button</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    children</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    variant </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"primary"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    size </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"medium"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    onClick</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    className </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">""</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    disabled </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">false</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> buttonClasses </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        styles</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">btn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        styles</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">variant</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        styles</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        disabled </span><span class="token operator">?</span><span class="token plain"> styles</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">disabled</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">""</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        className</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">filter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token known-class-name class-name">Boolean</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">join</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">" "</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">button</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">className</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">buttonClasses</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">onClick</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">onClick</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">disabled</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">disabled</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">children</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">button</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token plain"> </span><span class="token maybe-class-name">Button</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-css-module-buttonmodulecss">3. CSS Module (<code>Button.module.css</code>)<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#3-css-module-buttonmodulecss" class="hash-link" aria-label="Direct link to 3-css-module-buttonmodulecss" title="Direct link to 3-css-module-buttonmodulecss">​</a></h3>
<div class="language-css codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-css codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token selector class" style="color:rgb(255, 121, 198)">.btn</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">border</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> none</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">border-radius</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">4</span><span class="token unit">px</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">cursor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> pointer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">font-family</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> inherit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">font-weight</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">500</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">transition</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> all </span><span class="token number">0.2</span><span class="token unit">s</span><span class="token plain"> ease</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">display</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> inline-flex</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">align-items</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> center</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">justify-content</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> center</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/* Variants */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token selector class" style="color:rgb(255, 121, 198)">.primary</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">background-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--primary-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token hexcode color">#4a6bff</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token color">white</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token selector class" style="color:rgb(255, 121, 198)">.primary</span><span class="token selector pseudo-class" style="color:rgb(255, 121, 198)">:hover</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">background-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--primary-hover</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token hexcode color">#3a5bef</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token selector class" style="color:rgb(255, 121, 198)">.secondary</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">background-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--secondary-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token hexcode color">#f0f2f5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--text-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token hexcode color">#333</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token selector class" style="color:rgb(255, 121, 198)">.secondary</span><span class="token selector pseudo-class" style="color:rgb(255, 121, 198)">:hover</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">background-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--secondary-hover</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token hexcode color">#e0e2e5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/* Sizes */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token selector class" style="color:rgb(255, 121, 198)">.small</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">padding</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">6</span><span class="token unit">px</span><span class="token plain"> </span><span class="token number">12</span><span class="token unit">px</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">font-size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">12</span><span class="token unit">px</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token selector class" style="color:rgb(255, 121, 198)">.medium</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">padding</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">8</span><span class="token unit">px</span><span class="token plain"> </span><span class="token number">16</span><span class="token unit">px</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">font-size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">14</span><span class="token unit">px</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token selector class" style="color:rgb(255, 121, 198)">.large</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">padding</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">12</span><span class="token unit">px</span><span class="token plain"> </span><span class="token number">24</span><span class="token unit">px</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">font-size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">16</span><span class="token unit">px</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/* Disabled state */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token selector class" style="color:rgb(255, 121, 198)">.disabled</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">opacity</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">0.6</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">cursor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> not-allowed</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-3-bundle--publish-to-npm">Step 3: Bundle &amp; Publish to npm<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#step-3-bundle--publish-to-npm" class="hash-link" aria-label="Direct link to Step 3: Bundle &amp; Publish to npm" title="Direct link to Step 3: Bundle &amp; Publish to npm">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-export-components-srcindexjs">1. Export Components (<code>src/index.js</code>)<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#1-export-components-srcindexjs" class="hash-link" aria-label="Direct link to 1-export-components-srcindexjs" title="Direct link to 1-export-components-srcindexjs">​</a></h3>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token exports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token exports"> </span><span class="token exports keyword module" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token exports"> </span><span class="token exports keyword module" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token exports"> </span><span class="token exports maybe-class-name">Button</span><span class="token exports"> </span><span class="token exports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'./components/Button'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-build-the-library">2. Build the Library<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#2-build-the-library" class="hash-link" aria-label="Direct link to 2. Build the Library" title="Direct link to 2. Build the Library">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm run build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-publish-to-npm">3. Publish to npm<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#3-publish-to-npm" class="hash-link" aria-label="Direct link to 3. Publish to npm" title="Direct link to 3. Publish to npm">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm login</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm publish --access public</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-4-using-the-library-in-a-react-app">Step 4: Using the Library in a React App**<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#step-4-using-the-library-in-a-react-app" class="hash-link" aria-label="Direct link to Step 4: Using the Library in a React App**" title="Direct link to Step 4: Using the Library in a React App**">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-install-the-library">1. Install the Library**<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#1-install-the-library" class="hash-link" aria-label="Direct link to 1. Install the Library**" title="Direct link to 1. Install the Library**">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm install @sahilphondekar/react-component-library</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-import-css-in-your-root-component">2. Import CSS in Your Root Component<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#2-import-css-in-your-root-component" class="hash-link" aria-label="Direct link to 2. Import CSS in Your Root Component" title="Direct link to 2. Import CSS in Your Root Component">​</a></h3>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"@sahilphondekar/react-component-library/dist/style.css"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-use-the-button-component">3. Use the Button Component<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#3-use-the-button-component" class="hash-link" aria-label="Direct link to 3. Use the Button Component" title="Direct link to 3. Use the Button Component">​</a></h3>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">Button</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'@sahilphondekar/react-component-library'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">App</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 121, 198)">Button</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">variant</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">primary</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">size</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">large</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">onClick</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript arrow operator" style="color:rgb(255, 121, 198)">=&gt;</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript function" style="color:rgb(80, 250, 123)">alert</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript string" style="color:rgb(255, 121, 198)">'Clicked!'</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      Click Me</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag class-name" style="color:rgb(255, 121, 198)">Button</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="customization-with-css-variables">Customization with CSS Variables<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#customization-with-css-variables" class="hash-link" aria-label="Direct link to Customization with CSS Variables" title="Direct link to Customization with CSS Variables">​</a></h2>
<p>Override default styles in your app's CSS:</p>
<div class="language-css codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-css codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token selector pseudo-class" style="color:rgb(255, 121, 198)">:root</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--primary-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token hexcode color">#ff6b6b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--primary-hover</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token hexcode color">#ff5252</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--secondary-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token hexcode color">#f8f9fa</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="github--npm-links">GitHub &amp; npm Links<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#github--npm-links" class="hash-link" aria-label="Direct link to GitHub &amp; npm Links" title="Direct link to GitHub &amp; npm Links">​</a></h2>
<ul>
<li><strong>GitHub:</strong> <a href="https://github.com/sahil-phondekar/react-component-library" target="_blank" rel="noopener noreferrer">github.com/sahil-phondekar/react-component-library</a></li>
<li><strong>npm:</strong> <a href="https://www.npmjs.com/package/@sahilphondekar/react-component-library" target="_blank" rel="noopener noreferrer">npmjs.com/package/@sahilphondekar/react-component-library</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package-vite#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>You’ve now built a <strong>customizable React component library</strong> with:<br>
<!-- -->✔ <strong>Vite</strong> for fast builds<br>
<!-- -->✔ <strong>CSS Modules</strong> for scoped styling<br>
<!-- -->✔ <strong>npm publish</strong> for reusability</p>
<p>Extend it by adding more components (Card, Input, Modal) and themes! 🚀</p>
<p><strong>Happy coding!</strong> 🎉</p>]]></content:encoded>
            <category>NPM</category>
            <category>React</category>
            <category>JavaScript</category>
            <category>Vite</category>
        </item>
        <item>
            <title><![CDATA[How to Use `npm link` to Test NPM Packages Locally Before Publishing]]></title>
            <link>https://sahil-phondekar.github.io/my-blogs/blog/testing-npm-package</link>
            <guid>https://sahil-phondekar.github.io/my-blogs/blog/testing-npm-package</guid>
            <pubDate>Sun, 13 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[When building your own NPM package (like a React component library), it's essential to test it in a real project before publishing to the registry. This is where npm link comes in handy.]]></description>
            <content:encoded><![CDATA[<p>When building your own NPM package (like a React component library), it's essential to test it <em>in a real project</em> before publishing to the registry. This is where <code>npm link</code> comes in handy.</p>
<p>In this post, we’ll walk through how to use <code>npm link</code> to test your local package in another project.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-npm-link">What is <code>npm link</code>?<a href="https://sahil-phondekar.github.io/my-blogs/blog/testing-npm-package#what-is-npm-link" class="hash-link" aria-label="Direct link to what-is-npm-link" title="Direct link to what-is-npm-link">​</a></h2>
<p><code>npm link</code> creates a <strong>symbolic link</strong> between your local NPM package and another project. It allows your test app to use your local package as if it were installed from the registry.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-by-step-guide">Step-by-Step Guide<a href="https://sahil-phondekar.github.io/my-blogs/blog/testing-npm-package#step-by-step-guide" class="hash-link" aria-label="Direct link to Step-by-Step Guide" title="Direct link to Step-by-Step Guide">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-go-to-your-package-directory">1. Go to Your Package Directory<a href="https://sahil-phondekar.github.io/my-blogs/blog/testing-npm-package#1-go-to-your-package-directory" class="hash-link" aria-label="Direct link to 1. Go to Your Package Directory" title="Direct link to 1. Go to Your Package Directory">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">cd ~/Projects/my-component-library</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Run the following to make it globally available:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm link</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p>This registers your package globally on your machine.</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-go-to-your-test-project">2. Go to Your Test Project<a href="https://sahil-phondekar.github.io/my-blogs/blog/testing-npm-package#2-go-to-your-test-project" class="hash-link" aria-label="Direct link to 2. Go to Your Test Project" title="Direct link to 2. Go to Your Test Project">​</a></h3>
<p>Now, open your test project (where you want to use your library):</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">cd ~/Projects/my-app</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Link the package:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm link my-component-library</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This creates a symbolic link from <code>node_modules/my-component-library</code> to your local package source folder.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-use-the-package-in-your-app">3. Use the Package in Your App<a href="https://sahil-phondekar.github.io/my-blogs/blog/testing-npm-package#3-use-the-package-in-your-app" class="hash-link" aria-label="Direct link to 3. Use the Package in Your App" title="Direct link to 3. Use the Package in Your App">​</a></h3>
<p>Now you can use your package in the test app just like any other dependency:</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">Button</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"my-component-library"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">App</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token operator">&lt;</span><span class="token maybe-class-name">Button</span><span class="token operator">&gt;</span><span class="token maybe-class-name">Test</span><span class="token plain"> </span><span class="token maybe-class-name">Button</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">Button</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="unlinking-later">Unlinking Later<a href="https://sahil-phondekar.github.io/my-blogs/blog/testing-npm-package#unlinking-later" class="hash-link" aria-label="Direct link to Unlinking Later" title="Direct link to Unlinking Later">​</a></h2>
<p>When you're done testing, clean up the link:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">cd ~/Projects/my-app</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm unlink my-component-library</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Then globally remove the link:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">cd ~/Projects/my-component-library</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm unlink</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://sahil-phondekar.github.io/my-blogs/blog/testing-npm-package#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>Using <code>npm link</code> is an efficient way to test your NPM packages locally. It mimics the install process while allowing rapid development and testing without publishing to the registry.</p>]]></content:encoded>
            <category>NPM</category>
            <category>React</category>
            <category>JavaScript</category>
            <category>Vite</category>
        </item>
        <item>
            <title><![CDATA[Build and Publish a Custom React + Tailwind CSS Component Library (with Webpack & Babel)]]></title>
            <link>https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package</link>
            <guid>https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package</guid>
            <pubDate>Sat, 12 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[If you’ve ever wanted to build your own reusable React component library with Tailwind CSS, but didn’t want the overhead of TypeScript or complex setups—this post is for you!]]></description>
            <content:encoded><![CDATA[<p>If you’ve ever wanted to build your <strong>own reusable React component library</strong> with <strong>Tailwind CSS</strong>, but didn’t want the overhead of TypeScript or complex setups—this post is for you!</p>
<p>In this guide, we’ll build a <strong>simple, fully customizable component library</strong> using:</p>
<ul>
<li><strong>JavaScript</strong></li>
<li><strong>Tailwind CSS 3</strong></li>
<li><strong>Webpack + Babel</strong></li>
<li><strong>Ready to publish to npm</strong></li>
</ul>
<p>We'll even create a sample <code>Typography</code> component to get started.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="goal">Goal<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#goal" class="hash-link" aria-label="Direct link to Goal" title="Direct link to Goal">​</a></h2>
<p>We’re going to build a package like:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">@sahilphondekar/react-tailwind-library</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Ready to use in any React app with:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm install @sahilphondekar/react-tailwind-library</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="final-folder-structure">Final Folder Structure<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#final-folder-structure" class="hash-link" aria-label="Direct link to Final Folder Structure" title="Direct link to Final Folder Structure">​</a></h2>
<p>Here’s a sneak peek of what we’ll end up with:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">react-tailwind-library/</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">├── dist/</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">├── src/</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">│   ├── components/</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">│   │   └── Typography/</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">│   │       ├── Typography.jsx</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">│   │       └── index.js</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">│   ├── index.js</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">│   └── styles/</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">│       └── tailwind.css</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">├── .babelrc</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">├── .gitignore</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">├── package.json</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">├── postcss.config.js</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">├── tailwind.config.js</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">├── webpack.config.js</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">└── README.md</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-step-1-initialize-the-project">🔧 Step 1: Initialize the Project<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#-step-1-initialize-the-project" class="hash-link" aria-label="Direct link to 🔧 Step 1: Initialize the Project" title="Direct link to 🔧 Step 1: Initialize the Project">​</a></h2>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">mkdir react-tailwind-library</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cd react-tailwind-library</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm init -y</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Edit your <code>package.json</code>:</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"name"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"@sahilphondekar/react-tailwind-library"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"main"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"dist/index.js"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"peerDependencies"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">"react"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"&gt;=16.8.0"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">"react-dom"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"&gt;=16.8.0"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"scripts"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">"build"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"webpack"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-2-install-dependencies">Step 2: Install Dependencies<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#step-2-install-dependencies" class="hash-link" aria-label="Direct link to Step 2: Install Dependencies" title="Direct link to Step 2: Install Dependencies">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="runtime-dependencies">Runtime Dependencies<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#runtime-dependencies" class="hash-link" aria-label="Direct link to Runtime Dependencies" title="Direct link to Runtime Dependencies">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm install react react-dom</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dev--build-tools">Dev + Build Tools<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#dev--build-tools" class="hash-link" aria-label="Direct link to Dev + Build Tools" title="Direct link to Dev + Build Tools">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm install -D webpack webpack-cli babel-loader \</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">@babel/core @babel/preset-env @babel/preset-react \</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">tailwindcss@3 postcss postcss-loader autoprefixer \</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">css-loader style-loader</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-3-babel-setup">Step 3: Babel Setup<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#step-3-babel-setup" class="hash-link" aria-label="Direct link to Step 3: Babel Setup" title="Direct link to Step 3: Babel Setup">​</a></h2>
<p>Create a <code>.babelrc</code> file:</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"presets"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">"@babel/preset-env"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"@babel/preset-react"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-4-webpack-config">Step 4: Webpack Config<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#step-4-webpack-config" class="hash-link" aria-label="Direct link to Step 4: Webpack Config" title="Direct link to Step 4: Webpack Config">​</a></h2>
<p>Create a <code>webpack.config.js</code>:</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> path </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">require</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"path"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">module</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">mode</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"production"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"./src/index.js"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">output</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token plain"> path</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">resolve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">__dirname</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"dist"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"index.js"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">library</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"@sahilphondekar/react-tailwind-library"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">libraryTarget</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"umd"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">clean</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">externals</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">react</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"react"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string-property property">"react-dom"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"react-dom"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">module</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">test</span><span class="token operator">:</span><span class="token plain"> </span><span class="token regex regex-delimiter">/</span><span class="token regex regex-source language-regex special-escape escape">\.</span><span class="token regex regex-source language-regex">jsx</span><span class="token regex regex-source language-regex quantifier number">?</span><span class="token regex regex-source language-regex anchor function" style="color:rgb(80, 250, 123)">$</span><span class="token regex regex-delimiter">/</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">exclude</span><span class="token operator">:</span><span class="token plain"> </span><span class="token regex regex-delimiter">/</span><span class="token regex regex-source language-regex">node_modules</span><span class="token regex regex-delimiter">/</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">use</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"babel-loader"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">test</span><span class="token operator">:</span><span class="token plain"> </span><span class="token regex regex-delimiter">/</span><span class="token regex regex-source language-regex special-escape escape">\.</span><span class="token regex regex-source language-regex">css</span><span class="token regex regex-source language-regex anchor function" style="color:rgb(80, 250, 123)">$</span><span class="token regex regex-delimiter">/</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">use</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">"style-loader"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"css-loader"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"postcss-loader"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">resolve</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">extensions</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">".js"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">".jsx"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-5-tailwind-css-setup">Step 5: Tailwind CSS Setup<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#step-5-tailwind-css-setup" class="hash-link" aria-label="Direct link to Step 5: Tailwind CSS Setup" title="Direct link to Step 5: Tailwind CSS Setup">​</a></h2>
<p>Initialize Tailwind:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npx tailwindcss init</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="tailwindconfigjs"><code>tailwind.config.js</code><a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#tailwindconfigjs" class="hash-link" aria-label="Direct link to tailwindconfigjs" title="Direct link to tailwindconfigjs">​</a></h3>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">module</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">content</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">"./src/**/*.{js,jsx}"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">theme</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">extend</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="postcssconfigjs"><code>postcss.config.js</code><a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#postcssconfigjs" class="hash-link" aria-label="Direct link to postcssconfigjs" title="Direct link to postcssconfigjs">​</a></h3>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">module</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">tailwindcss</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">autoprefixer</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="srcstylestailwindcss"><code>src/styles/tailwind.css</code><a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#srcstylestailwindcss" class="hash-link" aria-label="Direct link to srcstylestailwindcss" title="Direct link to srcstylestailwindcss">​</a></h3>
<div class="language-css codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-css codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token atrule rule">@tailwind</span><span class="token atrule"> base</span><span class="token atrule punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token atrule rule">@tailwind</span><span class="token atrule"> components</span><span class="token atrule punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token atrule rule">@tailwind</span><span class="token atrule"> utilities</span><span class="token atrule punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-6-create-the-typography-component">Step 6: Create the Typography Component<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#step-6-create-the-typography-component" class="hash-link" aria-label="Direct link to Step 6: Create the Typography Component" title="Direct link to Step 6: Create the Typography Component">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="srccomponentstypographytypographyjsx"><code>src/components/Typography/Typography.jsx</code><a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#srccomponentstypographytypographyjsx" class="hash-link" aria-label="Direct link to srccomponentstypographytypographyjsx" title="Direct link to srccomponentstypographytypographyjsx">​</a></h3>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">React</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"react"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"../../styles/tailwind.css"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token maybe-class-name">Typography</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> variant </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"body"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> children</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> className </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">""</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> styles </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">h1</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"text-4xl font-bold"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">h2</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"text-3xl font-semibold"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">h3</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"text-2xl font-semibold"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">h4</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"text-xl font-medium"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">h5</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"text-lg font-medium"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">h6</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"text-base font-medium"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">body</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"text-base"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">caption</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"text-sm text-gray-500"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token maybe-class-name">Tag</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">"h1"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"h2"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"h3"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"h4"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"h5"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"h6"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">includes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">variant</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">?</span><span class="token plain"> variant</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"p"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 121, 198)">Tag</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">className</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">styles</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">variant</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">className</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">children</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag class-name" style="color:rgb(255, 121, 198)">Tag</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token plain"> </span><span class="token maybe-class-name">Typography</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="srccomponentstypographyindexjs"><code>src/components/Typography/index.js</code><a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#srccomponentstypographyindexjs" class="hash-link" aria-label="Direct link to srccomponentstypographyindexjs" title="Direct link to srccomponentstypographyindexjs">​</a></h3>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token exports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token exports"> </span><span class="token exports keyword module" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token exports"> </span><span class="token exports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"./Typography"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-7-entry-point">Step 7: Entry Point<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#step-7-entry-point" class="hash-link" aria-label="Direct link to Step 7: Entry Point" title="Direct link to Step 7: Entry Point">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="srcindexjs"><code>src/index.js</code><a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#srcindexjs" class="hash-link" aria-label="Direct link to srcindexjs" title="Direct link to srcindexjs">​</a></h3>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">Typography</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"./components/Typography"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token exports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token exports"> </span><span class="token exports maybe-class-name">Typography</span><span class="token exports"> </span><span class="token exports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-8-build--publish">Step 8: Build &amp; Publish<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#step-8-build--publish" class="hash-link" aria-label="Direct link to Step 8: Build &amp; Publish" title="Direct link to Step 8: Build &amp; Publish">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="build-the-package">Build the package<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#build-the-package" class="hash-link" aria-label="Direct link to Build the package" title="Direct link to Build the package">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm run build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="publish-to-npm">Publish to npm<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#publish-to-npm" class="hash-link" aria-label="Direct link to Publish to npm" title="Direct link to Publish to npm">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm publish --access public</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p>Make sure you’re logged into npm with <code>npm login</code> and have a unique package name.</p>
</blockquote>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-9-test-it-in-a-react-app">Step 9: Test it in a React App<a href="https://sahil-phondekar.github.io/my-blogs/blog/publishing-npm-package#step-9-test-it-in-a-react-app" class="hash-link" aria-label="Direct link to Step 9: Test it in a React App" title="Direct link to Step 9: Test it in a React App">​</a></h2>
<p>Install the package:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm install @sahilphondekar/react-tailwind-library</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Use it:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">Typography</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"@sahilphondekar/react-tailwind-library"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">App</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">div</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 121, 198)">Typography</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">variant</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">h1</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text">Hello UI Kit!</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag class-name" style="color:rgb(255, 121, 198)">Typography</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">div</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>NPM</category>
            <category>React</category>
            <category>JavaScript</category>
            <category>Babel</category>
            <category>Webpack</category>
        </item>
        <item>
            <title><![CDATA[Configuring JWT Authorization in Swagger UI with Spring Boot]]></title>
            <link>https://sahil-phondekar.github.io/my-blogs/blog/configuring-jwt-authorization-swagger-ui</link>
            <guid>https://sahil-phondekar.github.io/my-blogs/blog/configuring-jwt-authorization-swagger-ui</guid>
            <pubDate>Fri, 04 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[In a secure REST API, it's important to authenticate requests — especially when using JWT tokens. When integrating Swagger UI using springdoc-openapi, we can also configure it to include a JWT Authorization header so developers can test secured endpoints easily.]]></description>
            <content:encoded><![CDATA[<p>In a secure REST API, it's important to authenticate requests — especially when using <strong>JWT tokens</strong>. When integrating Swagger UI using <code>springdoc-openapi</code>, we can also configure it to include a <strong>JWT Authorization header</strong> so developers can test secured endpoints easily.</p>
<p>In this tutorial, we’ll walk through how to configure <strong>JWT Bearer Authorization in Swagger UI</strong> step by step.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="prerequisites">Prerequisites<a href="https://sahil-phondekar.github.io/my-blogs/blog/configuring-jwt-authorization-swagger-ui#prerequisites" class="hash-link" aria-label="Direct link to Prerequisites" title="Direct link to Prerequisites">​</a></h2>
<p>You should have a working Spring Boot application secured with <strong>Spring Security</strong> and <strong>JWT authentication</strong> already implemented.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-1-add-swaggeropenapi-dependency">Step 1: Add Swagger/OpenAPI Dependency<a href="https://sahil-phondekar.github.io/my-blogs/blog/configuring-jwt-authorization-swagger-ui#step-1-add-swaggeropenapi-dependency" class="hash-link" aria-label="Direct link to Step 1: Add Swagger/OpenAPI Dependency" title="Direct link to Step 1: Add Swagger/OpenAPI Dependency">​</a></h2>
<p>Add the <code>springdoc-openapi</code> dependency to your <code>pom.xml</code>:</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">dependency</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">groupId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">org.springdoc</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">groupId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">artifactId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">springdoc-openapi-starter-webmvc-ui</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">artifactId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">version</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">2.8.6</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">version</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">dependency</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This enables auto-generation of OpenAPI docs and the Swagger UI at <code>/swagger-ui.html</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-2-create-swagger-configuration-class">Step 2: Create Swagger Configuration Class<a href="https://sahil-phondekar.github.io/my-blogs/blog/configuring-jwt-authorization-swagger-ui#step-2-create-swagger-configuration-class" class="hash-link" aria-label="Direct link to Step 2: Create Swagger Configuration Class" title="Direct link to Step 2: Create Swagger Configuration Class">​</a></h2>
<p>The configuration file tells Swagger to use the <strong>JWT Bearer</strong> scheme for authorization.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="swaggerconfigjava"><code>SwaggerConfig.java</code><a href="https://sahil-phondekar.github.io/my-blogs/blog/configuring-jwt-authorization-swagger-ui#swaggerconfigjava" class="hash-link" aria-label="Direct link to swaggerconfigjava" title="Direct link to swaggerconfigjava">​</a></h3>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">package com.example.pharmacy_management_server.config;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">import io.swagger.v3.oas.annotations.security.SecurityScheme;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">import org.springdoc.core.models.GroupedOpenApi;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">import org.springframework.context.annotation.Bean;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">import org.springframework.context.annotation.Configuration;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">// Define a security scheme for JWT Authorization in Swagger</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">@SecurityScheme(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    name = "Authorization",                // Name used in @SecurityRequirement</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    type = SecuritySchemeType.HTTP,       // HTTP auth type</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    bearerFormat = "JWT",                 // Indicate it's a JWT token</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    scheme = "bearer"                     // Use the bearer authentication scheme</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">@Configuration</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">public class SwaggerConfig {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    // Group all APIs under "public" and expose all routes</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    @Bean</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public GroupedOpenApi publicApi() {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return GroupedOpenApi.builder()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .group("public")</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .pathsToMatch("/**")</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .build();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-3-secure-specific-endpoints">Step 3: Secure Specific Endpoints<a href="https://sahil-phondekar.github.io/my-blogs/blog/configuring-jwt-authorization-swagger-ui#step-3-secure-specific-endpoints" class="hash-link" aria-label="Direct link to Step 3: Secure Specific Endpoints" title="Direct link to Step 3: Secure Specific Endpoints">​</a></h2>
<p>Now, for any endpoint you want to protect with JWT and require users to authorize via Swagger UI, annotate the controller method or class with <code>@SecurityRequirement</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example-usercontroller">Example: UserController<a href="https://sahil-phondekar.github.io/my-blogs/blog/configuring-jwt-authorization-swagger-ui#example-usercontroller" class="hash-link" aria-label="Direct link to Example: UserController" title="Direct link to Example: UserController">​</a></h3>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">package com.example.pharmacy_management_server.controller;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">import com.example.pharmacy_management_server.model.User;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">import com.example.pharmacy_management_server.service.UserService;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">import io.swagger.v3.oas.annotations.security.SecurityRequirement;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">import org.springframework.http.ResponseEntity;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">import org.springframework.security.core.annotation.AuthenticationPrincipal;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">import org.springframework.security.core.userdetails.UserDetails;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">import org.springframework.web.bind.annotation.*;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">import java.util.UUID;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">@RestController</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">@RequestMapping("/api/users")</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">public class UserController {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private final UserService userService;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public UserController(UserService userService) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        this.userService = userService;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    // Secure this endpoint with JWT token in Swagger UI</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    @SecurityRequirement(name = "Authorization")</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    @GetMapping("/{userId}")</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public ResponseEntity&lt;User&gt; getUserById(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            @PathVariable UUID userId,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            @AuthenticationPrincipal UserDetails userDetails</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        if (userDetails == null) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            return ResponseEntity.status(403).build();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        User user = userService.getUserById(userId);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return ResponseEntity.ok(user);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Explanation:</strong></p>
<ul>
<li>
<p><code>@SecurityRequirement(name = "Authorization")</code>:<br>
<!-- -->This tells Swagger that this endpoint requires a JWT token using the <code>"Authorization"</code> scheme defined earlier.</p>
</li>
<li>
<p>When users try this endpoint from Swagger UI, they will see an <strong>Authorize</strong> button. Once they enter their token (e.g., <code>Bearer eyJhbGciOi...</code>), Swagger will include it in the <code>Authorization</code> header for all secured endpoints.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-4-testing-in-swagger-ui">Step 4: Testing in Swagger UI<a href="https://sahil-phondekar.github.io/my-blogs/blog/configuring-jwt-authorization-swagger-ui#step-4-testing-in-swagger-ui" class="hash-link" aria-label="Direct link to Step 4: Testing in Swagger UI" title="Direct link to Step 4: Testing in Swagger UI">​</a></h2>
<p>Once everything is set up:</p>
<ol>
<li>Go to: <code>http://localhost:8080/swagger-ui.html</code></li>
<li>Click the <strong>Authorize</strong> button at the top-right<br>
<img decoding="async" loading="lazy" alt="Swagger" src="https://sahil-phondekar.github.io/my-blogs/assets/images/swagger-93a10f74265b5f81e0961fa831776806.png" width="1353" height="611" class="img_ev3q"></li>
<li>Enter your JWT token:<!-- -->
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>Try calling secured endpoints — the <code>Authorization</code> header will now be automatically included.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://sahil-phondekar.github.io/my-blogs/blog/configuring-jwt-authorization-swagger-ui#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>Adding JWT authorization to Swagger UI helps you test your secure endpoints without using external tools like Postman. By defining the security scheme and annotating secured endpoints properly, you can integrate token-based authentication smoothly into the developer experience.</p>]]></content:encoded>
            <category>Spring Boot</category>
            <category>Swagger</category>
            <category>JWT Authentication</category>
            <category>Spring Security</category>
        </item>
        <item>
            <title><![CDATA[Spring Boot JWT Authentication with Spring Security — Complete Step-by-Step Guide]]></title>
            <link>https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration</link>
            <guid>https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration</guid>
            <pubDate>Thu, 03 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[In this tutorial, we'll walk through how to build a secure JWT authentication system using Spring Boot, Spring Security, and the jjwt library. We'll cover everything from login to securing routes using JWTs — all with full code examples and explanations.]]></description>
            <content:encoded><![CDATA[<p>In this tutorial, we'll walk through how to build a <strong>secure JWT authentication system</strong> using <strong>Spring Boot</strong>, <strong>Spring Security</strong>, and the <strong><code>jjwt</code></strong> library. We'll cover everything from login to securing routes using JWTs — all with full code examples and explanations.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tech-stack">Tech Stack<a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#tech-stack" class="hash-link" aria-label="Direct link to Tech Stack" title="Direct link to Tech Stack">​</a></h2>
<ul>
<li>Spring Boot <code>3.4.4</code></li>
<li>Spring Security</li>
<li>jjwt (<code>0.12.6</code>)</li>
<li>Maven</li>
<li>Java 17+</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-add-maven-dependencies">1. Add Maven Dependencies<a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#1-add-maven-dependencies" class="hash-link" aria-label="Direct link to 1. Add Maven Dependencies" title="Direct link to 1. Add Maven Dependencies">​</a></h2>
<p>Add the following dependencies to your <code>pom.xml</code>:</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">&lt;!-- JWT dependencies --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">dependency</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">groupId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">io.jsonwebtoken</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">groupId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">artifactId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">jjwt-api</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">artifactId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">version</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">0.12.6</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">version</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">dependency</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">dependency</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">groupId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">io.jsonwebtoken</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">groupId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">artifactId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">jjwt-impl</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">artifactId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">version</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">0.12.6</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">version</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">scope</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">runtime</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">scope</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">dependency</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">dependency</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">groupId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">io.jsonwebtoken</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">groupId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">artifactId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">jjwt-jackson</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">artifactId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">version</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">0.12.6</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">version</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">scope</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">runtime</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">scope</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">dependency</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">&lt;!-- Spring Security --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">dependency</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">groupId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">org.springframework.boot</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">groupId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">artifactId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">spring-boot-starter-security</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">artifactId</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">version</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">3.4.4</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">version</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">dependency</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Explanation</strong>: These dependencies bring in support for Spring Security and the <code>jjwt</code> (Java JWT) library to help us create and validate tokens.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-jwt-utility-class">2. JWT Utility Class<a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#2-jwt-utility-class" class="hash-link" aria-label="Direct link to 2. JWT Utility Class" title="Direct link to 2. JWT Utility Class">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="jwtutiljava"><code>JwtUtil.java</code><a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#jwtutiljava" class="hash-link" aria-label="Direct link to jwtutiljava" title="Direct link to jwtutiljava">​</a></h3>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">@Component</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">public class JwtUtil {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    @Value("${jwt.secret}")</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private String secretKey;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    @Value("${jwt.expiration}")</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private long jwtExpirationMs;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public String generateToken(String email) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return Jwts.builder()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .subject(email)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .issuedAt(new Date())</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .expiration(new Date(System.currentTimeMillis() + jwtExpirationMs))</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .signWith(getSigningKey())</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .compact();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public String extractEmail(String token) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return Jwts.parser()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .verifyWith(getSigningKey())</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .build()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .parseSignedClaims(token)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .getPayload()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .getSubject();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public boolean validateToken(String token) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        try {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Jwts.parser()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .verifyWith(getSigningKey())</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .build()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .parseSignedClaims(token);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            return true;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        } catch (Exception e) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            return false;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private SecretKey getSigningKey() {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return Keys.hmacShaKeyFor(secretKey.getBytes());</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public String extractToken(HttpServletRequest request) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        String bearer = request.getHeader("Authorization");</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return (bearer != null &amp;&amp; bearer.startsWith("Bearer ")) ? bearer.substring(7) : null;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Explanation</strong>:</p>
<ul>
<li><code>generateToken()</code>: creates a JWT using the user's email.</li>
<li><code>extractEmail()</code>: reads the email back from a token.</li>
<li><code>validateToken()</code>: verifies the token’s integrity.</li>
<li><code>getSigningKey()</code>: uses your configured secret to create a secure signing key.</li>
</ul>
<p>🛠️ Add to <code>application.properties</code>:</p>
<div class="language-properties codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-properties codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">jwt.secret=your-256-bit-secret-value-here</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">jwt.expiration=3600000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-jwt-filter">3. JWT Filter<a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#3-jwt-filter" class="hash-link" aria-label="Direct link to 3. JWT Filter" title="Direct link to 3. JWT Filter">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="jwtauthenticationfilterjava"><code>JwtAuthenticationFilter.java</code><a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#jwtauthenticationfilterjava" class="hash-link" aria-label="Direct link to jwtauthenticationfilterjava" title="Direct link to jwtauthenticationfilterjava">​</a></h3>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">@Component</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">public class JwtAuthenticationFilter extends OncePerRequestFilter {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private final JwtUtil jwtUtil;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private final UserDetailsService userDetailsService;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public JwtAuthenticationFilter(JwtUtil jwtUtil, UserDetailsService userDetailsService) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        this.jwtUtil = jwtUtil;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        this.userDetailsService = userDetailsService;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    protected void doFilterInternal(HttpServletRequest request,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                                    HttpServletResponse response,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                                    FilterChain filterChain) throws ServletException, IOException {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        String token = jwtUtil.extractToken(request);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        if (token != null &amp;&amp; jwtUtil.validateToken(token)) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            String email = jwtUtil.extractEmail(token);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            UserDetails userDetails = userDetailsService.loadUserByUsername(email);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            UsernamePasswordAuthenticationToken authToken =</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            SecurityContextHolder.getContext().setAuthentication(authToken);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        filterChain.doFilter(request, response);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Explanation</strong>:</p>
<ul>
<li>This filter intercepts every request.</li>
<li>It checks for a JWT in the <code>Authorization</code> header.</li>
<li>If valid, it loads the user and sets the authentication in Spring Security's context.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-custom-userdetailsservice">4. Custom UserDetailsService<a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#4-custom-userdetailsservice" class="hash-link" aria-label="Direct link to 4. Custom UserDetailsService" title="Direct link to 4. Custom UserDetailsService">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="userdetailsserviceimpljava"><code>UserDetailsServiceImpl.java</code><a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#userdetailsserviceimpljava" class="hash-link" aria-label="Direct link to userdetailsserviceimpljava" title="Direct link to userdetailsserviceimpljava">​</a></h3>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">@Service</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">public class UserDetailsServiceImpl implements UserDetailsService {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private final UserRepository userRepository;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public UserDetailsServiceImpl(UserRepository userRepository) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        this.userRepository = userRepository;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        User user = userRepository.findByEmail(email)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            .orElseThrow(() -&gt; new UsernameNotFoundException("User not found with email: " + email));</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return org.springframework.security.core.userdetails.User.builder()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .username(user.getEmail())</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .password(user.getPasswordHash())</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .roles(user.getRole().name())</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .build();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Explanation</strong>:</p>
<ul>
<li>Loads the user from the database using the email address.</li>
<li>Converts your custom <code>User</code> entity to Spring Security’s <code>UserDetails</code>.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-spring-security-configuration">5. Spring Security Configuration<a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#5-spring-security-configuration" class="hash-link" aria-label="Direct link to 5. Spring Security Configuration" title="Direct link to 5. Spring Security Configuration">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="securityconfigjava"><code>SecurityConfig.java</code><a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#securityconfigjava" class="hash-link" aria-label="Direct link to securityconfigjava" title="Direct link to securityconfigjava">​</a></h3>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">@Configuration</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">public class SecurityConfig {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private final JwtAuthenticationFilter jwtAuthenticationFilter;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public SecurityConfig(JwtAuthenticationFilter jwtAuthenticationFilter) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        this.jwtAuthenticationFilter = jwtAuthenticationFilter;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    @Bean</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        http.csrf(csrf -&gt; csrf.disable())</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            .sessionManagement(session -&gt; session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            .authorizeHttpRequests(auth -&gt; auth</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .requestMatchers("/api/auth/login", "/swagger-ui/**", "/v3/api-docs/**").permitAll()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .anyRequest().authenticated())</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return http.build();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    @Bean</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public AuthenticationManager authenticationManager(UserDetailsServiceImpl userDetailsService) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        authProvider.setUserDetailsService(userDetailsService);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        authProvider.setPasswordEncoder(passwordEncoder());</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return new ProviderManager(List.of(authProvider));</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    @Bean</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public PasswordEncoder passwordEncoder() {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return new BCryptPasswordEncoder();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Explanation</strong>:</p>
<ul>
<li>Disables CSRF (since we use tokens).</li>
<li>Stateless session (no server-side session tracking).</li>
<li>Allows unauthenticated access only to <code>/api/auth/login</code>.</li>
<li>Adds our custom <code>JwtAuthenticationFilter</code>.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-login-endpoint">6. Login Endpoint<a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#6-login-endpoint" class="hash-link" aria-label="Direct link to 6. Login Endpoint" title="Direct link to 6. Login Endpoint">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="authcontrollerjava"><code>AuthController.java</code><a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#authcontrollerjava" class="hash-link" aria-label="Direct link to authcontrollerjava" title="Direct link to authcontrollerjava">​</a></h3>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">@RestController</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">@RequestMapping("/api/auth")</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">public class AuthController {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private final AuthenticationManager authenticationManager;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private final JwtUtil jwtUtil;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public AuthController(AuthenticationManager authenticationManager, JwtUtil jwtUtil) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        this.authenticationManager = authenticationManager;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        this.jwtUtil = jwtUtil;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    @PostMapping("/login")</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public ResponseEntity&lt;JwtResponse&gt; login(@RequestBody LoginRequest request) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Authentication authentication = authenticationManager.authenticate(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword()));</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        String token = jwtUtil.generateToken(request.getEmail());</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return ResponseEntity.ok(new JwtResponse(token));</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dtos">DTOs<a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#dtos" class="hash-link" aria-label="Direct link to DTOs" title="Direct link to DTOs">​</a></h3>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">public class LoginRequest {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private String email;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private String password;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    // getters and setters</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">public class JwtResponse {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private String token;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public JwtResponse(String token) { this.token = token; }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    // getter</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Explanation</strong>:</p>
<ul>
<li>Authenticates user using Spring Security.</li>
<li>Generates a JWT token on success.</li>
<li>Sends the token in the response.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-secure-api-example">7. Secure API Example<a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#7-secure-api-example" class="hash-link" aria-label="Direct link to 7. Secure API Example" title="Direct link to 7. Secure API Example">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="usercontrollerjava"><code>UserController.java</code><a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#usercontrollerjava" class="hash-link" aria-label="Direct link to usercontrollerjava" title="Direct link to usercontrollerjava">​</a></h3>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">@RestController</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">@RequestMapping("/api/users")</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">public class UserController {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private final UserService userService;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public UserController(UserService userService) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        this.userService = userService;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    @GetMapping("/{userId}")</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public ResponseEntity&lt;User&gt; getUser(@PathVariable UUID userId,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                                        @AuthenticationPrincipal UserDetails userDetails) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        if (userDetails == null) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            return ResponseEntity.status(403).build();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return ResponseEntity.ok(userService.getUserById(userId));</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Explanation</strong>:</p>
<ul>
<li>Uses <code>@AuthenticationPrincipal</code> to access the current authenticated user.</li>
<li>Only allows access if a valid JWT is provided.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="test-your-api">Test Your API<a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#test-your-api" class="hash-link" aria-label="Direct link to Test Your API" title="Direct link to Test Your API">​</a></h2>
<ol>
<li>Send <code>POST /api/auth/login</code> with valid credentials:</li>
</ol>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"email"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"user@example.com"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"password"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"secret123"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="2">
<li>Copy the returned token and include it as:</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Authorization: Bearer &lt;token&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="3">
<li>Call secured endpoints like <code>GET /api/users/{id}</code> with the token in headers.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://sahil-phondekar.github.io/my-blogs/blog/spring-security-intergration#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>With these steps, you've built a fully functional JWT authentication system in Spring Boot with:</p>
<ul>
<li>Secure login</li>
<li>Stateless API</li>
<li>Token-based authorization</li>
</ul>]]></content:encoded>
            <category>Spring Boot</category>
            <category>JWT Authentication</category>
            <category>Spring Security</category>
            <category>REST API Security</category>
        </item>
        <item>
            <title><![CDATA[Step-by-Step Guide to Implementing IdP-Initiated SSO SAML Integration]]></title>
            <link>https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos</link>
            <guid>https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos</guid>
            <pubDate>Mon, 01 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Single Sign-On (SSO) is a powerful authentication method that enables users to log in once and gain access to multiple applications without needing to re-enter credentials. SAML (Security Assertion Markup Language) is one of the most widely used protocols for implementing SSO.]]></description>
            <content:encoded><![CDATA[<p>Single Sign-On (SSO) is a powerful authentication method that enables users to log in once and gain access to multiple applications without needing to re-enter credentials. <strong>SAML (Security Assertion Markup Language)</strong> is one of the most widely used protocols for implementing SSO.</p>
<p>In this blog, we will walk through the detailed steps to implement <strong>IdP-initiated SSO SAML integration</strong>. This type of SSO flow is initiated by the Identity Provider (IdP) and does not require an initial authentication request from the Service Provider (SP). Instead, the IdP generates a <strong>SAML Response</strong> and directly redirects the user to the SP.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-1-create-a-private-and-public-rsa-key">Step 1: Create a Private and Public RSA Key<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos#step-1-create-a-private-and-public-rsa-key" class="hash-link" aria-label="Direct link to Step 1: Create a Private and Public RSA Key" title="Direct link to Step 1: Create a Private and Public RSA Key">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-do-you-need-rsa-keys">Why Do You Need RSA Keys?<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos#why-do-you-need-rsa-keys" class="hash-link" aria-label="Direct link to Why Do You Need RSA Keys?" title="Direct link to Why Do You Need RSA Keys?">​</a></h3>
<p>SAML responses must be <strong>digitally signed</strong> to ensure their authenticity and integrity. To do this, you need a <strong>private key</strong> for signing the SAML assertion and a <strong>public key</strong> for verification by the Service Provider.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-generate-rsa-keys-using-openssl">How to Generate RSA Keys Using OpenSSL<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos#how-to-generate-rsa-keys-using-openssl" class="hash-link" aria-label="Direct link to How to Generate RSA Keys Using OpenSSL" title="Direct link to How to Generate RSA Keys Using OpenSSL">​</a></h3>
<ol>
<li><strong>Generate a Private Key:</strong>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">openssl genrsa -out private-key.pem 3072</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li><strong>Generate the Corresponding Public Key:</strong>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">openssl rsa -in private-key.pem -pubout -out public-key.pem</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li><strong>Generate an X.509 Certificate (Optional, but recommended):</strong>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">openssl req -new -x509 -key private_key.pem -out certificate.pem -days 365</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->This certificate is used to verify the signature of the SAML response.</li>
</ol>
<p>Now you have:</p>
<ul>
<li><strong>Private Key (private_key.pem)</strong> – Used to sign the SAML response.</li>
<li><strong>Public Key (public_key.pem)</strong> – Shared with the SP for verification.</li>
<li><strong>Certificate (certificate.pem)</strong> – Used by the SP to validate signatures.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-2-get-the-required-saml-metadata">Step 2: Get the Required SAML Metadata<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos#step-2-get-the-required-saml-metadata" class="hash-link" aria-label="Direct link to Step 2: Get the Required SAML Metadata" title="Direct link to Step 2: Get the Required SAML Metadata">​</a></h2>
<p>Before generating the SAML response, you need the necessary metadata from both the IdP and SP. The key details include:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="identity-provider-idp-information">Identity Provider (IdP) Information<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos#identity-provider-idp-information" class="hash-link" aria-label="Direct link to Identity Provider (IdP) Information" title="Direct link to Identity Provider (IdP) Information">​</a></h3>
<ul>
<li><strong>IdP Entity ID</strong>: The unique identifier for the IdP.</li>
<li><strong>Single Sign-On (SSO) URL</strong>: The URL where the IdP sends the SAML response.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="service-provider-sp-information">Service Provider (SP) Information<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos#service-provider-sp-information" class="hash-link" aria-label="Direct link to Service Provider (SP) Information" title="Direct link to Service Provider (SP) Information">​</a></h3>
<ul>
<li><strong>SP Entity ID</strong>: The unique identifier for the SP.</li>
<li><strong>SP Assertion Consumer Service (ACS) URL</strong>: The URL where the SAML response should be sent.</li>
<li><strong>Target URL</strong>: The URL where users will be redirected after authentication.</li>
<li><strong>Destination of the Response</strong>: The expected destination in the SAML response.</li>
</ul>
<p>Example of metadata retrieval:</p>
<ul>
<li>If using <strong>MockSAML</strong>, the SP metadata can be found at:<br>
<a href="https://mocksaml.com/api/saml/metadata" target="_blank" rel="noopener noreferrer">https://mocksaml.com/api/saml/metadata</a></li>
</ul>
<p>This metadata provides the necessary details to construct the SAML response.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-3-share-the-public-key-with-the-sp">Step 3: Share the Public Key with the SP<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos#step-3-share-the-public-key-with-the-sp" class="hash-link" aria-label="Direct link to Step 3: Share the Public Key with the SP" title="Direct link to Step 3: Share the Public Key with the SP">​</a></h2>
<p>Before the SP can validate SAML responses from the IdP, it needs access to the <strong>public key or certificate</strong> that was used to sign the responses.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-share-the-public-key">How to Share the Public Key<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos#how-to-share-the-public-key" class="hash-link" aria-label="Direct link to How to Share the Public Key" title="Direct link to How to Share the Public Key">​</a></h3>
<ol>
<li>
<p><strong>Provide the public key (public_key.pem) to the SP</strong> manually or through a metadata file.</p>
</li>
<li>
<p><strong>Use an X.509 certificate (certificate.pem)</strong> to make validation easier.</p>
</li>
<li>
<p><strong>If the SP supports metadata exchange</strong>, provide an XML metadata file that includes the public key:</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">md:</span><span class="token tag" style="color:rgb(255, 121, 198)">EntityDescriptor</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name namespace" style="color:rgb(241, 250, 140)">xmlns:</span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">md</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">urn:oasis:names:tc:SAML:2.0:metadata</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">entityID</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">https://idp.example.com</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">md:</span><span class="token tag" style="color:rgb(255, 121, 198)">IDPSSODescriptor</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">protocolSupportEnumeration</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">urn:oasis:names:tc:SAML:2.0:protocol</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">md:</span><span class="token tag" style="color:rgb(255, 121, 198)">KeyDescriptor</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">use</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">signing</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">ds:</span><span class="token tag" style="color:rgb(255, 121, 198)">KeyInfo</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name namespace" style="color:rgb(241, 250, 140)">xmlns:</span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">ds</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">http://www.w3.org/2000/09/xmldsig#</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">ds:</span><span class="token tag" style="color:rgb(255, 121, 198)">X509Data</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">ds:</span><span class="token tag" style="color:rgb(255, 121, 198)">X509Certificate</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">MIIC4jCCAc...</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">ds:</span><span class="token tag" style="color:rgb(255, 121, 198)">X509Certificate</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">ds:</span><span class="token tag" style="color:rgb(255, 121, 198)">X509Data</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">ds:</span><span class="token tag" style="color:rgb(255, 121, 198)">KeyInfo</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">md:</span><span class="token tag" style="color:rgb(255, 121, 198)">KeyDescriptor</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">md:</span><span class="token tag" style="color:rgb(255, 121, 198)">IDPSSODescriptor</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">md:</span><span class="token tag" style="color:rgb(255, 121, 198)">EntityDescriptor</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ol>
<p>The SP will use this key to validate signatures on the SAML responses.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-4-generate-the-saml-response">Step 4: Generate the SAML Response<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos#step-4-generate-the-saml-response" class="hash-link" aria-label="Direct link to Step 4: Generate the SAML Response" title="Direct link to Step 4: Generate the SAML Response">​</a></h2>
<p>Once you have the metadata, it's time to generate the <strong>SAML Response</strong>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="structure-of-a-saml-response">Structure of a SAML Response<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos#structure-of-a-saml-response" class="hash-link" aria-label="Direct link to Structure of a SAML Response" title="Direct link to Structure of a SAML Response">​</a></h3>
<p>A valid <strong>SAML Response</strong> consists of:</p>
<ol>
<li><strong>Issuer</strong> – The IdP Entity ID.</li>
<li><strong>Assertion</strong> – Contains authentication details, subject information, and attributes.</li>
<li><strong>Signature</strong> – Ensures the response integrity.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example-saml-response-before-signing"><strong>Example SAML Response (Before Signing)</strong><a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos#example-saml-response-before-signing" class="hash-link" aria-label="Direct link to example-saml-response-before-signing" title="Direct link to example-saml-response-before-signing">​</a></h3>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">samlp:</span><span class="token tag" style="color:rgb(255, 121, 198)">Response</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name namespace" style="color:rgb(241, 250, 140)">xmlns:</span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">samlp</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">urn:oasis:names:tc:SAML:2.0:protocol</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">    </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">Destination</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">https://sp.example.com/sso</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">    </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">ID</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">_12345</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">    </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">InResponseTo</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">    </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">IssueInstant</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">2025-04-01T12:34:56Z</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">    </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">Version</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">2.0</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">saml:</span><span class="token tag" style="color:rgb(255, 121, 198)">Issuer</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name namespace" style="color:rgb(241, 250, 140)">xmlns:</span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">saml</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">urn:oasis:names:tc:SAML:2.0:assertion</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        https://idp.example.com</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">saml:</span><span class="token tag" style="color:rgb(255, 121, 198)">Issuer</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">saml:</span><span class="token tag" style="color:rgb(255, 121, 198)">Assertion</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name namespace" style="color:rgb(241, 250, 140)">xmlns:</span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">saml</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">urn:oasis:names:tc:SAML:2.0:assertion</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">ID</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">_67890</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">saml:</span><span class="token tag" style="color:rgb(255, 121, 198)">Subject</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">saml:</span><span class="token tag" style="color:rgb(255, 121, 198)">NameID</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">Format</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                user@example.com</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">saml:</span><span class="token tag" style="color:rgb(255, 121, 198)">NameID</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">saml:</span><span class="token tag" style="color:rgb(255, 121, 198)">Subject</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">saml:</span><span class="token tag" style="color:rgb(255, 121, 198)">Assertion</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">samlp:</span><span class="token tag" style="color:rgb(255, 121, 198)">Response</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-5-sign-the-saml-response">Step 5: Sign the SAML Response<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos#step-5-sign-the-saml-response" class="hash-link" aria-label="Direct link to Step 5: Sign the SAML Response" title="Direct link to Step 5: Sign the SAML Response">​</a></h2>
<p>To ensure the SAML response is trusted, it must be signed using the <strong>private key</strong>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="signing-the-response-in-nodejs">Signing the Response in Node.js<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos#signing-the-response-in-nodejs" class="hash-link" aria-label="Direct link to Signing the Response in Node.js" title="Direct link to Signing the Response in Node.js">​</a></h3>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">SignedXml</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"xml-crypto"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> sig </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">SignedXml</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sig</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">signingKey</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> privateKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sig</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addReference</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"//*[local-name(.)='Assertion']"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sig</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">computeSignature</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">samlResponse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> signedSAML </span><span class="token operator">=</span><span class="token plain"> sig</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">getSignedXml</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now your <strong>SAML Response is signed</strong> and ready to be sent.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-6-send-saml-response-using-http-post-binding">Step 6: Send SAML Response Using HTTP POST Binding<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos#step-6-send-saml-response-using-http-post-binding" class="hash-link" aria-label="Direct link to Step 6: Send SAML Response Using HTTP POST Binding" title="Direct link to Step 6: Send SAML Response Using HTTP POST Binding">​</a></h2>
<p>Once the SAML response is generated and signed, it needs to be sent to the <strong>SP Assertion Consumer Service (ACS) URL</strong> via an <strong>HTTP POST request</strong>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example-html-form-for-posting-saml-response">Example HTML Form for Posting SAML Response<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos#example-html-form-for-posting-saml-response" class="hash-link" aria-label="Direct link to Example HTML Form for Posting SAML Response" title="Direct link to Example HTML Form for Posting SAML Response">​</a></h3>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">form</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">method</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">POST</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">action</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">https://sp.example.com/sso</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">input</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">hidden</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">name</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">SAMLResponse</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">value</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">BASE64_ENCODED_SAML</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">input</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">submit</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">value</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">Login</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">form</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">script</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token script language-javascript">    </span><span class="token script language-javascript dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token script language-javascript property-access">forms</span><span class="token script language-javascript punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token script language-javascript number">0</span><span class="token script language-javascript punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token script language-javascript method function property-access" style="color:rgb(80, 250, 123)">submit</span><span class="token script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token script language-javascript punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token script language-javascript"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">script</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This form automatically <strong>redirects the user</strong> to the SP with the SAML response.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-intergration-steos#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>By following these steps, you can successfully implement <strong>IdP-initiated SSO using SAML</strong>. Here’s a recap:</p>
<ol>
<li><strong>Generate RSA Keys</strong> – Create private and public keys for signing SAML responses.</li>
<li><strong>Retrieve Metadata</strong> – Get Entity IDs, ACS URL, and other details from IdP and SP.</li>
<li><strong>Share the Public Key with the SP</strong> – Ensure the SP can verify your signed SAML responses.</li>
<li><strong>Generate SAML Response</strong> – Construct the XML structure with authentication details.</li>
<li><strong>Sign the Response</strong> – Use OpenSSL or xml-crypto to sign the response.</li>
<li><strong>Send via HTTP POST</strong> – Encode and transmit the response to the SP ACS URL.</li>
</ol>
<p>By using tools like <strong>OpenSSL, SAML Tracer, and SAMLTool.com</strong>, you can debug and validate your SAML integration efficiently.</p>]]></content:encoded>
            <category>SSO</category>
            <category>SAML</category>
        </item>
        <item>
            <title><![CDATA[Tools I Use for Generating & Testing Valid SAML Responses]]></title>
            <link>https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools</link>
            <guid>https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools</guid>
            <pubDate>Sun, 30 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[In today's world of web applications, security and seamless user authentication are paramount. Single Sign-On (SSO) solutions are becoming the standard method for managing user access to multiple applications. One of the most widely adopted protocols for SSO is SAML (Security Assertion Markup Language). SAML allows for the secure exchange of authentication and authorization data between Identity Providers (IdPs) and Service Providers (SPs).]]></description>
            <content:encoded><![CDATA[<p>In today's world of web applications, security and seamless user authentication are paramount. Single Sign-On (SSO) solutions are becoming the standard method for managing user access to multiple applications. One of the most widely adopted protocols for SSO is <strong>SAML</strong> (Security Assertion Markup Language). SAML allows for the secure exchange of authentication and authorization data between Identity Providers (IdPs) and Service Providers (SPs).</p>
<p>Developing SSO applications and working with SAML responses requires specific tools to ensure that all aspects, from key generation to testing valid responses, are correctly implemented. In this post, I will share the essential tools I use to develop, generate, and test valid SAML responses, as well as improve the overall development process.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-openssl-for-windows">1. OpenSSL for Windows<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools#1-openssl-for-windows" class="hash-link" aria-label="Direct link to 1. OpenSSL for Windows" title="Direct link to 1. OpenSSL for Windows">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-openssl">What is OpenSSL?<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools#what-is-openssl" class="hash-link" aria-label="Direct link to What is OpenSSL?" title="Direct link to What is OpenSSL?">​</a></h3>
<p><strong>OpenSSL</strong> is a comprehensive toolkit that implements SSL and TLS protocols. It also provides a robust suite of cryptographic functions, including the ability to generate public and private keys for encryption and digital signing. These keys are crucial for the signing and verification of SAML assertions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-do-i-use-openssl">Why Do I Use OpenSSL?<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools#why-do-i-use-openssl" class="hash-link" aria-label="Direct link to Why Do I Use OpenSSL?" title="Direct link to Why Do I Use OpenSSL?">​</a></h3>
<p>For developing SSO applications, you need to generate keys (private and public) to sign and verify SAML assertions. OpenSSL allows you to generate these keys securely and manage their lifecycle.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-openssl-helps">How OpenSSL Helps:<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools#how-openssl-helps" class="hash-link" aria-label="Direct link to How OpenSSL Helps:" title="Direct link to How OpenSSL Helps:">​</a></h3>
<ul>
<li><strong>Private key generation</strong>: You can use OpenSSL to generate a private key that will sign your SAML assertions.</li>
<li><strong>Public key generation</strong>: From the private key, you can derive the corresponding public key, which will be shared with your Service Provider (SP) for verification purposes.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-get-it">How to Get It:<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools#how-to-get-it" class="hash-link" aria-label="Direct link to How to Get It:" title="Direct link to How to Get It:">​</a></h3>
<p>To install OpenSSL on Windows, you can use the Win32/Win64 OpenSSL Installer from the official website. This installer comes with precompiled binaries, making it easy to get up and running without worrying about manual compilation.</p>
<p>You can download it from here: <a href="https://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noopener noreferrer">Win32 OpenSSL</a></p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-generating-rsa-keys-with-openssl">2. Generating RSA Keys with OpenSSL<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools#2-generating-rsa-keys-with-openssl" class="hash-link" aria-label="Direct link to 2. Generating RSA Keys with OpenSSL" title="Direct link to 2. Generating RSA Keys with OpenSSL">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-are-rsa-keys">What are RSA Keys?<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools#what-are-rsa-keys" class="hash-link" aria-label="Direct link to What are RSA Keys?" title="Direct link to What are RSA Keys?">​</a></h3>
<p><strong>RSA</strong> (Rivest-Shamir-Adleman) is an asymmetric encryption algorithm widely used for securing sensitive data, particularly in digital signatures. In the context of SSO, RSA keys are used to sign and verify SAML assertions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-use-rsa-keys-for-sso">Why Use RSA Keys for SSO?<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools#why-use-rsa-keys-for-sso" class="hash-link" aria-label="Direct link to Why Use RSA Keys for SSO?" title="Direct link to Why Use RSA Keys for SSO?">​</a></h3>
<p>SAML relies on digital signatures to ensure the authenticity of authentication data. The <strong>private key</strong> is used to sign the SAML assertions, while the <strong>public key</strong> is used by the Service Provider to verify the authenticity of the assertions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="generating-rsa-keys">Generating RSA Keys:<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools#generating-rsa-keys" class="hash-link" aria-label="Direct link to Generating RSA Keys:" title="Direct link to Generating RSA Keys:">​</a></h3>
<p>Here is where Scott Brady's guide comes in. His blog provides an easy-to-follow guide on how to generate RSA keys using OpenSSL.</p>
<ul>
<li><strong>Step 1</strong>: Generate the RSA private key.<!-- -->
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">openssl genrsa -out private-key.pem 3072</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li><strong>Step 2</strong>: Derive the corresponding public key from the private key.<!-- -->
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">openssl rsa -in private-key.pem -pubout -out public-key.pem</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<p>Having both the public and private keys is essential for generating and verifying SAML assertions.</p>
<p>You can check out the guide here: <a href="https://www.scottbrady.io/openssl/creating-rsa-keys-using-openssl" target="_blank" rel="noopener noreferrer">Creating RSA Keys with OpenSSL</a></p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-saml-tracer-chrome-extension">3. SAML Tracer Chrome Extension<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools#3-saml-tracer-chrome-extension" class="hash-link" aria-label="Direct link to 3. SAML Tracer Chrome Extension" title="Direct link to 3. SAML Tracer Chrome Extension">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-saml-tracer">What is SAML Tracer?<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools#what-is-saml-tracer" class="hash-link" aria-label="Direct link to What is SAML Tracer?" title="Direct link to What is SAML Tracer?">​</a></h3>
<p>The <strong>SAML Tracer</strong> is a Chrome extension that allows you to intercept and view SAML messages exchanged between your browser and the identity or service provider.</p>
<p><img decoding="async" loading="lazy" alt="samltracer" src="https://sahil-phondekar.github.io/my-blogs/assets/images/saml-tracer-e90671baa3c15f07f9ea2e829719e9a7.png" width="1280" height="800" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-is-saml-tracer-useful">Why is SAML Tracer Useful?<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools#why-is-saml-tracer-useful" class="hash-link" aria-label="Direct link to Why is SAML Tracer Useful?" title="Direct link to Why is SAML Tracer Useful?">​</a></h3>
<p>SAML messages are typically passed in the background between the browser and the SSO infrastructure. As a developer, it’s important to inspect these messages to ensure that everything is functioning correctly. The SAML Tracer enables you to:</p>
<ul>
<li>Capture SAML requests and responses.</li>
<li>View the SAML assertions that are sent to and received from the IdP.</li>
<li>Debug issues with the authentication flow by inspecting the raw SAML messages.</li>
</ul>
<p>With real-time analysis, you can verify that your SSO setup is working as intended, making this tool indispensable for SAML debugging.</p>
<p>You can download it from the Chrome Web Store: <a href="https://chromewebstore.google.com/detail/mpdajninpobndbfcldcmbpnnbhibjmch?utm_source=item-share-cb" target="_blank" rel="noopener noreferrer">SAML Tracer</a></p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-samltoolcom">4. SAMLTool.com<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools#4-samltoolcom" class="hash-link" aria-label="Direct link to 4. SAMLTool.com" title="Direct link to 4. SAMLTool.com">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-samltoolcom">What is SAMLTool.com?<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools#what-is-samltoolcom" class="hash-link" aria-label="Direct link to What is SAMLTool.com?" title="Direct link to What is SAMLTool.com?">​</a></h3>
<p><a href="https://www.samltool.com/" target="_blank" rel="noopener noreferrer">SAMLTool.com</a> is an online suite of tools for working with SAML messages. It provides a variety of utilities to help developers manage, test, and troubleshoot SAML assertions and responses.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="key-features">Key Features:<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools#key-features" class="hash-link" aria-label="Direct link to Key Features:" title="Direct link to Key Features:">​</a></h3>
<ul>
<li><strong>Decode and Encode SAML</strong>: You can decode base64-encoded SAML assertions and encode them back for testing.</li>
<li><strong>Sign and Validate SAML</strong>: It provides tools to digitally sign and validate SAML assertions using your keys.</li>
<li><strong>Generate Metadata</strong>: SAMLTool can help generate and validate SAML metadata for both IdPs and SPs.</li>
<li><strong>Encryption and Decryption</strong>: It also allows for the encryption and decryption of SAML messages, ensuring that sensitive data remains secure during transit.</li>
</ul>
<p>This tool is highly useful for:</p>
<ul>
<li>Testing the structure of your SAML assertions.</li>
<li>Validating if the assertions are correctly signed and encrypted.</li>
<li>Quickly debugging issues in SSO integrations.</li>
</ul>
<p>You can visit SAMLTool here: <a href="https://www.samltool.com/" target="_blank" rel="noopener noreferrer">SAMLTool.com</a></p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-tools#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>Building secure and efficient Single Sign-On (SSO) systems using SAML requires the use of specialized tools. Whether you are generating RSA keys for signing assertions, inspecting SAML requests and responses, or validating your SAML responses, these tools will ensure that your SSO application works smoothly.</p>
<ul>
<li><strong>OpenSSL</strong> for generating and managing keys.</li>
<li><strong>Scott Brady's Guide</strong> for creating RSA keys using OpenSSL.</li>
<li><strong>SAML Tracer</strong> Chrome extension for intercepting and inspecting SAML messages.</li>
<li><strong>SAMLTool.com</strong> for testing and validating SAML responses.</li>
</ul>
<p>Incorporating these tools into your development process can significantly streamline the creation, testing, and validation of SSO applications. By ensuring the integrity and validity of your SAML responses, you can guarantee a secure and efficient user authentication experience. Happy coding!</p>]]></content:encoded>
            <category>SSO</category>
            <category>SAML</category>
        </item>
        <item>
            <title><![CDATA[Understanding SSO Techniques -  IdP-Initiated vs. SP-Initiated Login]]></title>
            <link>https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-techniques</link>
            <guid>https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-techniques</guid>
            <pubDate>Sat, 29 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Single Sign-On (SSO) is a user authentication process that allows individuals to log in once and access multiple applications without needing to re-enter credentials. SAML (Security Assertion Markup Language) is one of the most widely used protocols for implementing SSO. When deploying SSO using SAML, there are two primary methods: IdP-Initiated Login and SP-Initiated Login.]]></description>
            <content:encoded><![CDATA[<p>Single Sign-On (SSO) is a user authentication process that allows individuals to log in once and access multiple applications without needing to re-enter credentials. SAML (Security Assertion Markup Language) is one of the most widely used protocols for implementing SSO. When deploying SSO using SAML, there are two primary methods: <strong>IdP-Initiated Login</strong> and <strong>SP-Initiated Login</strong>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-idp-initiated-login">What is IdP-Initiated Login?<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-techniques#what-is-idp-initiated-login" class="hash-link" aria-label="Direct link to What is IdP-Initiated Login?" title="Direct link to What is IdP-Initiated Login?">​</a></h2>
<p>In an IdP-Initiated login flow, the authentication process begins at the <strong>Identity Provider (IdP)</strong>. The steps involved are:</p>
<ol>
<li>The user accesses the IdP’s login page and enters their credentials.</li>
<li>The IdP verifies the credentials and generates a <strong>SAML Response</strong>.</li>
<li>The IdP sends the SAML Response directly to the <strong>Service Provider (SP)</strong>.</li>
<li>The SP processes the SAML Response, validates the signature, and logs the user in.</li>
</ol>
<p><strong>Advantages of IdP-Initiated Login:</strong></p>
<ul>
<li>The user can access multiple applications from a centralized portal.</li>
<li>No need for the SP to generate an authentication request.</li>
<li>Ideal for scenarios where the IdP controls user authentication.</li>
</ul>
<p><strong>Challenges:</strong></p>
<ul>
<li>SPs must trust the SAML Response without an authentication request.</li>
<li>Security concerns if not properly implemented, as the SP does not initiate the session.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="idp" src="https://sahil-phondekar.github.io/my-blogs/assets/images/idp-initated-732ad77baf7db0b3ce3e4aa381edc28d.png" width="512" height="288" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-sp-initiated-login">What is SP-Initiated Login?<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-techniques#what-is-sp-initiated-login" class="hash-link" aria-label="Direct link to What is SP-Initiated Login?" title="Direct link to What is SP-Initiated Login?">​</a></h2>
<p>In an SP-Initiated login flow, the authentication process starts at the <strong>Service Provider (SP)</strong>. The steps involved are:</p>
<ol>
<li>The user tries to access a protected resource on the SP.</li>
<li>The SP generates a <strong>SAML Authentication Request</strong> and redirects the user to the IdP.</li>
<li>The IdP authenticates the user and generates a <strong>SAML Response</strong>.</li>
<li>The IdP redirects the user back to the SP with the SAML Response.</li>
<li>The SP validates the response and grants access.</li>
</ol>
<p><strong>Advantages of SP-Initiated Login:</strong></p>
<ul>
<li>The SP has control over when authentication should happen.</li>
<li>Helps prevent unauthorized access since authentication requests are always initiated by the SP.</li>
</ul>
<p><strong>Challenges:</strong></p>
<ul>
<li>Requires additional setup and configurations on both IdP and SP.</li>
<li>More steps compared to IdP-Initiated login, potentially causing delays.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="sp" src="https://sahil-phondekar.github.io/my-blogs/assets/images/idp-initated-732ad77baf7db0b3ce3e4aa381edc28d.png" width="512" height="288" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="which-sso-technique-should-you-choose">Which SSO Technique Should You Choose?<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-techniques#which-sso-technique-should-you-choose" class="hash-link" aria-label="Direct link to Which SSO Technique Should You Choose?" title="Direct link to Which SSO Technique Should You Choose?">​</a></h2>
<p>Choosing between IdP-Initiated and SP-Initiated login depends on your use case:</p>
<ul>
<li><strong>If you need centralized authentication and access to multiple applications from a portal, use IdP-Initiated Login.</strong></li>
<li><strong>If security and access control are crucial, and authentication should always start at the SP, use SP-Initiated Login.</strong></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="final-thoughts">Final Thoughts<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-techniques#final-thoughts" class="hash-link" aria-label="Direct link to Final Thoughts" title="Direct link to Final Thoughts">​</a></h2>
<p>Both IdP-Initiated and SP-Initiated logins have their own advantages and limitations. Organizations should evaluate their security requirements and user experience needs when deciding which approach to implement. With proper implementation, SAML SSO enhances security, reduces login fatigue, and improves user productivity.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="reference">Reference<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-techniques#reference" class="hash-link" aria-label="Direct link to Reference" title="Direct link to Reference">​</a></h2>
<p>This blog post is based on information from <a href="https://www.miniorange.com/blog/idp-initiated-sp-initiated-login/" target="_blank" rel="noopener noreferrer">miniOrange</a></p>]]></content:encoded>
            <category>SSO</category>
            <category>SAML</category>
        </item>
        <item>
            <title><![CDATA[Understanding SSO and SAML - A Beginner's Guide]]></title>
            <link>https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-basics</link>
            <guid>https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-basics</guid>
            <pubDate>Fri, 28 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[In today’s digital world, managing multiple usernames and passwords for different applications can be frustrating. That’s where Single Sign-On (SSO) and Security Assertion Markup Language (SAML) come in. These technologies streamline authentication, making it easier and more secure for users to access various applications with a single login.]]></description>
            <content:encoded><![CDATA[<p>In today’s digital world, managing multiple usernames and passwords for different applications can be frustrating. That’s where Single Sign-On (SSO) and Security Assertion Markup Language (SAML) come in. These technologies streamline authentication, making it easier and more secure for users to access various applications with a single login.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-sso">What is SSO?<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-basics#what-is-sso" class="hash-link" aria-label="Direct link to What is SSO?" title="Direct link to What is SSO?">​</a></h2>
<p>Single Sign-On (SSO) is an authentication method that allows users to log in once and gain access to multiple applications without needing to re-enter their credentials. This improves user experience and enhances security by reducing password fatigue and minimizing the risk of weak passwords.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-saml">What is SAML?<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-basics#what-is-saml" class="hash-link" aria-label="Direct link to What is SAML?" title="Direct link to What is SAML?">​</a></h2>
<p>SAML (Security Assertion Markup Language) is an open standard that enables SSO by facilitating secure communication between an Identity Provider (IdP) and a Service Provider (SP). It allows the IdP to authenticate users and pass their credentials securely to the SP without requiring the user to log in again.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-saml-sso-works">How SAML SSO Works<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-basics#how-saml-sso-works" class="hash-link" aria-label="Direct link to How SAML SSO Works" title="Direct link to How SAML SSO Works">​</a></h2>
<ol>
<li><strong>User Accesses Application:</strong> The user tries to access a service (SP) without logging in.</li>
<li><strong>Redirect to IdP:</strong> The SP redirects the user to the Identity Provider (IdP) for authentication.</li>
<li><strong>User Authentication:</strong> The IdP verifies the user’s identity (via username/password, MFA, etc.).</li>
<li><strong>SAML Response:</strong> Upon successful authentication, the IdP generates a SAML assertion (XML-based security token) and sends it back to the SP.</li>
<li><strong>SP Grants Access:</strong> The SP verifies the SAML response and logs the user in automatically.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="benefits-of-saml-sso">Benefits of SAML SSO<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-basics#benefits-of-saml-sso" class="hash-link" aria-label="Direct link to Benefits of SAML SSO" title="Direct link to Benefits of SAML SSO">​</a></h3>
<ul>
<li><strong>Improved Security:</strong> Eliminates the need for multiple passwords, reducing phishing risks.</li>
<li><strong>Better User Experience:</strong> Users log in once and access multiple applications seamlessly.</li>
<li><strong>Centralized Authentication:</strong> Organizations can manage access from a single authentication system.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://sahil-phondekar.github.io/my-blogs/blog/sso-saml-basics#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h3>
<p>SAML-based SSO simplifies authentication and enhances security by allowing users to access multiple services with a single login. Whether for enterprises or individual applications, implementing SAML SSO improves both user convenience and IT efficiency.</p>]]></content:encoded>
            <category>SSO</category>
            <category>SAML</category>
        </item>
        <item>
            <title><![CDATA[Stripe Payment Element in React & Spring Boot]]></title>
            <link>https://sahil-phondekar.github.io/my-blogs/blog/stripe-react</link>
            <guid>https://sahil-phondekar.github.io/my-blogs/blog/stripe-react</guid>
            <pubDate>Fri, 04 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Accepting online payments efficiently is essential for any modern business. Stripe offers a Payment Element, a prebuilt UI component that simplifies checkout by supporting multiple payment methods in a single integration. In this blog, we’ll walk through integrating Stripe’s Payment Element with a React frontend and a Spring Boot backend, ensuring a smooth and secure payment experience.]]></description>
            <content:encoded><![CDATA[<p>Accepting online payments efficiently is essential for any modern business. Stripe offers a <strong>Payment Element</strong>, a prebuilt UI component that simplifies checkout by supporting multiple payment methods in a single integration. In this blog, we’ll walk through integrating Stripe’s Payment Element with a <strong>React frontend</strong> and a <strong>Spring Boot backend</strong>, ensuring a smooth and secure payment experience.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-use-stripes-payment-element">Why Use Stripe's Payment Element?<a href="https://sahil-phondekar.github.io/my-blogs/blog/stripe-react#why-use-stripes-payment-element" class="hash-link" aria-label="Direct link to Why Use Stripe's Payment Element?" title="Direct link to Why Use Stripe's Payment Element?">​</a></h2>
<p>The <strong>Payment Element</strong> is a powerful tool that provides:</p>
<p><strong>Multiple payment method support</strong> – Accepts credit cards, Apple Pay, Google Pay, and local payment methods.<br>
<strong>Prebuilt UI</strong> – Designed to be user-friendly and easy to integrate.<br>
<strong>Automatic updates</strong> – Ensures compliance with the latest security and payment regulations.<br>
<strong>Dynamic behavior</strong> – Adjusts based on the user's location and preferred payment options.</p>
<p>Whether you are building an <strong>e-commerce store, subscription service, or digital marketplace</strong>, Stripe’s Payment Element simplifies the entire payment process.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="prerequisites-for-integration">Prerequisites for Integration<a href="https://sahil-phondekar.github.io/my-blogs/blog/stripe-react#prerequisites-for-integration" class="hash-link" aria-label="Direct link to Prerequisites for Integration" title="Direct link to Prerequisites for Integration">​</a></h2>
<p>Before integrating Stripe, ensure you have:</p>
<ul>
<li>A <strong>Stripe account</strong> – You can sign up at <a href="https://stripe.com/" target="_blank" rel="noopener noreferrer">Stripe</a>.</li>
<li>A <strong>React frontend</strong> – To display the payment form and handle user interactions.</li>
<li>A <strong>Spring Boot backend</strong> – To communicate securely with Stripe’s API.</li>
<li>A <strong>Stripe API key</strong> – Found in your Stripe dashboard, which enables backend communication with Stripe.</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-1-setting-up-stripe-in-your-react-application">Step 1: Setting Up Stripe in Your React Application<a href="https://sahil-phondekar.github.io/my-blogs/blog/stripe-react#step-1-setting-up-stripe-in-your-react-application" class="hash-link" aria-label="Direct link to Step 1: Setting Up Stripe in Your React Application" title="Direct link to Step 1: Setting Up Stripe in Your React Application">​</a></h2>
<p>To begin, install the required Stripe packages in your React app. The frontend will use Stripe’s <strong>Elements provider</strong>, which wraps your checkout form and provides the necessary Stripe context.</p>
<p>The <strong>Payment Element</strong> dynamically loads different payment methods based on the user’s location and previously used payment options, making the checkout experience seamless.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-2-setting-up-the-backend-with-spring-boot">Step 2: Setting Up the Backend with Spring Boot<a href="https://sahil-phondekar.github.io/my-blogs/blog/stripe-react#step-2-setting-up-the-backend-with-spring-boot" class="hash-link" aria-label="Direct link to Step 2: Setting Up the Backend with Spring Boot" title="Direct link to Step 2: Setting Up the Backend with Spring Boot">​</a></h2>
<p>Your <strong>Spring Boot backend</strong> is responsible for securely handling payment requests. It will:</p>
<ol>
<li><strong>Generate a PaymentIntent</strong> – This step involves communicating with Stripe’s API to create a payment session. The backend will return a <code>clientSecret</code>, which the frontend will use to initialize the Payment Element.</li>
<li><strong>Store transaction details</strong> – Keeping a record of payments ensures that you can track transactions, issue refunds, and manage disputes.</li>
<li><strong>Handle webhooks (optional but recommended)</strong> – Webhooks allow your application to listen for events such as <strong>successful payments, failed transactions, or refunds</strong>. This improves reliability by ensuring that payments are processed correctly even if the user closes their browser before seeing the confirmation page.</li>
</ol>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-3-integrating-the-payment-element-in-react">Step 3: Integrating the Payment Element in React<a href="https://sahil-phondekar.github.io/my-blogs/blog/stripe-react#step-3-integrating-the-payment-element-in-react" class="hash-link" aria-label="Direct link to Step 3: Integrating the Payment Element in React" title="Direct link to Step 3: Integrating the Payment Element in React">​</a></h2>
<p>Once the backend is ready, the frontend will:</p>
<ol>
<li><strong>Request a client secret</strong> from the backend when a user initiates a payment.</li>
<li><strong>Display the Payment Element</strong> in a secure, responsive payment form.</li>
<li><strong>Handle form submission and confirmation</strong> – Once the user submits their payment, Stripe processes the transaction and redirects them to a success or failure page.</li>
</ol>
<p>Stripe handles most of the heavy lifting, including validating payment details, processing the transaction, and securely handling sensitive data.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-4-confirming-the-payment">Step 4: Confirming the Payment<a href="https://sahil-phondekar.github.io/my-blogs/blog/stripe-react#step-4-confirming-the-payment" class="hash-link" aria-label="Direct link to Step 4: Confirming the Payment" title="Direct link to Step 4: Confirming the Payment">​</a></h2>
<p>Once a payment is submitted, Stripe takes over. Depending on the payment method, the user may need to complete additional authentication steps, such as <strong>3D Secure</strong> for card payments.</p>
<p>After the payment is processed, Stripe will:</p>
<p><strong>Redirect the user</strong> to a success page if the payment is completed.<br>
<strong>Display an error message</strong> if there are issues with the payment (e.g., insufficient funds, incorrect card details).<br>
<strong>Trigger a webhook event</strong> (if enabled) to notify your backend about the payment status.</p>
<p>Webhooks are essential for ensuring that even if a user closes their browser or loses internet connection, your application can still confirm whether the payment was successful.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-5-testing-with-stripes-test-mode">Step 5: Testing with Stripe’s Test Mode<a href="https://sahil-phondekar.github.io/my-blogs/blog/stripe-react#step-5-testing-with-stripes-test-mode" class="hash-link" aria-label="Direct link to Step 5: Testing with Stripe’s Test Mode" title="Direct link to Step 5: Testing with Stripe’s Test Mode">​</a></h2>
<p>Before going live, use <strong>Stripe’s test mode</strong> to simulate transactions. Stripe provides test card numbers that allow you to check different payment scenarios, such as successful payments, declined transactions, and authentication challenges.</p>
<p>This ensures that your integration is working correctly before you process real payments.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="final-thoughts">Final Thoughts<a href="https://sahil-phondekar.github.io/my-blogs/blog/stripe-react#final-thoughts" class="hash-link" aria-label="Direct link to Final Thoughts" title="Direct link to Final Thoughts">​</a></h2>
<p>Integrating <strong>Stripe’s Payment Element</strong> with a <strong>React frontend</strong> and <strong>Spring Boot backend</strong> simplifies the entire payment process, making it <strong>secure, reliable, and user-friendly</strong>. Whether you’re building a one-time payment system or handling recurring subscriptions, Stripe provides a <strong>scalable</strong> and <strong>efficient</strong> solution.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What’s Next?<a href="https://sahil-phondekar.github.io/my-blogs/blog/stripe-react#whats-next" class="hash-link" aria-label="Direct link to What’s Next?" title="Direct link to What’s Next?">​</a></h3>
<p><strong>Customization</strong> – Modify the Payment Element UI to match your brand.<br>
<strong>Additional Payment Methods</strong> – Enable support for <strong>Apple Pay, Google Pay, and local payment options</strong>.<br>
<strong>Recurring Payments &amp; Subscriptions</strong> – Implement Stripe Billing for automatic renewals.<br>
<strong>Webhooks &amp; Notifications</strong> – Set up webhooks to track payment statuses and automate order processing.</p>
<p>To learn more, check out <strong><a href="https://stripe.com/docs/payments/payment-element" target="_blank" rel="noopener noreferrer">Stripe’s official documentation</a></strong> and start building a seamless checkout experience today!</p>]]></content:encoded>
            <category>Stripe</category>
            <category>React</category>
            <category>Java</category>
            <category>Spring Boot</category>
        </item>
        <item>
            <title><![CDATA[Dual Boot Ubuntu Alongside Windows 10 - Part 2]]></title>
            <link>https://sahil-phondekar.github.io/my-blogs/blog/dual-boot-ubuntu-p2</link>
            <guid>https://sahil-phondekar.github.io/my-blogs/blog/dual-boot-ubuntu-p2</guid>
            <pubDate>Sun, 09 Aug 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[We have completed the following steps in the previous blog Dual Boot Ubuntu Alongside Windows 10 - Part 1]]></description>
            <content:encoded><![CDATA[<p>We have completed the following steps in the previous blog <a href="https://sahil-phondekar.github.io/my-blogs/blog/dual-boot-ubuntu-p1">Dual Boot Ubuntu Alongside Windows 10 - Part 1</a></p>
<p><em><strong>Step 1 : Create a partition for Ubuntu OS</strong></em><br>
<em><strong>Step 2 : Creating an Installer Media</strong></em></p>
<p>Now we will proceed with the installation of Ubuntu in the next step...</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="step-3--installing-ubuntu-with-dual-boot-on-windows-10">Step 3 : Installing Ubuntu with Dual boot on Windows 10<a href="https://sahil-phondekar.github.io/my-blogs/blog/dual-boot-ubuntu-p2#step-3--installing-ubuntu-with-dual-boot-on-windows-10" class="hash-link" aria-label="Direct link to Step 3 : Installing Ubuntu with Dual boot on Windows 10" title="Direct link to Step 3 : Installing Ubuntu with Dual boot on Windows 10">​</a></h4>
<p>In the last steps we have created an installer media using the USB drive. We will use the installer media now to install Ubuntu.</p>
<p>Connect the USB drive / pen-drive to the PC and power ON the PC (Note: If you are already logged in to Windows simply connect the pen-drive to PC and restart your PC)</p>
<p>While the PC is starting press F12 continuously to open the boot menu (The keys to access boot menu varies according to brand, F12 is boot menu key for Dell and Lenovo, F10 for HP)</p>
<p><img decoding="async" loading="lazy" alt="Boot Menu" src="https://sahil-phondekar.github.io/my-blogs/assets/images/boot-menu-028973ff705b169a26efd100b32b87e3.png" width="399" height="194" class="img_ev3q"></p>
<p>Once on the boot menu screen you can select your USB device from the list of available boot devices.</p>
<p>After selecting your USB device press Enter to boot into Ubuntu. If a grub screen as shown in following figure appears select Try Ubuntu without installing</p>
<p><img decoding="async" loading="lazy" alt="Try Ubuntu" src="https://sahil-phondekar.github.io/my-blogs/assets/images/try-ubuntu-a04d2972610bb8e89a9bc69dd9721162.png" width="640" height="480" class="img_ev3q"></p>
<p>It will take some time to boot into the OS after which the following screen will appear. You can click on Try Ubuntu to get the feel of the OS before actually installing it or you can directly proceed to install the OS by clicking Install Ubuntu.</p>
<p><img decoding="async" loading="lazy" alt="Install Ubuntu" src="https://sahil-phondekar.github.io/my-blogs/assets/images/install-ubuntu-14e02a7dd5ef815c360e6765339ff774.png" width="640" height="360" class="img_ev3q"></p>
<p>After clicking on Install Ubuntu the following screen will open. Select your keyboard layout and click on Continue.</p>
<p><img decoding="async" loading="lazy" alt="Keyboard Layout" src="https://sahil-phondekar.github.io/my-blogs/assets/images/keyboard-layout-043d0edd7273f2b68ac61a4d68cc5c02.png" width="640" height="360" class="img_ev3q"></p>
<p>In the next screen you will need to select the apps to install while installing Ubuntu.</p>
<p>For Normal Installation it will install all softwares for web browsers, utilities, office softwares, games and media players.</p>
<p>Select Minimal Installation if you do not need more software or are short in space. ( Note: You can install these softwares later if  required )</p>
<p>Here we will proceed with Normal Installation</p>
<p>Un-check Other Options i.e Download updates while installing Ubuntu and Install third-party software and click on Continue</p>
<p><img decoding="async" loading="lazy" alt="Install" src="https://sahil-phondekar.github.io/my-blogs/assets/images/install-2eaa0a5d4953141a717c324274ee5ffc.png" width="640" height="360" class="img_ev3q"></p>
<p>Next you need to select the Installation type</p>
<p>Select Something else from the available options and click Continue. This gives us the freedom to make our own partitions and allocate space as per our needs.</p>
<p><img decoding="async" loading="lazy" alt="Installation Type" src="https://sahil-phondekar.github.io/my-blogs/assets/images/installation-type-744e9a02d941e9d54a21ff76513dccfb.png" width="640" height="360" class="img_ev3q"></p>
<p>The next window we need to create partitions for our installation.</p>
<p>From the available partitions select the free space partition. Its nearly 50 GB of free space.</p>
<p>We will be creating two partitions from the available 50 GB space:</p>
<ul>
<li>The root (/) partition (same as C: Drive in windows)</li>
<li>The swap partition (Its like an extra RAM, its a partition that works as a RAM when the original RAM memory is fully utilised. The recommended swap memory size ~ 2 * RAM size)</li>
</ul>
<p>You can also add the Home partition (as D: and E: drives in Windows) to properly organise your system files. But I will skip that here.</p>
<p><img decoding="async" loading="lazy" alt="Installation Type 1" src="https://sahil-phondekar.github.io/my-blogs/assets/images/installation-type-1-581e74be71ac790d0909aca88e41e307.png" width="640" height="360" class="img_ev3q"></p>
<p>Once you have selected the free space partition click on the plus ( + ) icon on the window. This will open a Create Partition window.</p>
<p>We will first create the root partition.</p>
<p>Enter the size of the partition as 40000 MB, select the type as Logical and location as Beginning of this space.  Use as : Ext4 journaling file system</p>
<p>Select the mount point as (/) i.e root and click on OK. This will create the root partition.</p>
<p><img decoding="async" loading="lazy" alt="Create Partition" src="https://sahil-phondekar.github.io/my-blogs/assets/images/create-partition-92ceba54339f7d2d11a2eb2772f30137.png" width="640" height="360" class="img_ev3q"></p>
<p>Next we will add the swap partition.</p>
<p>Select the available free space partition and click on plus ( + ) icon. This will again open the Create Partition window.</p>
<p>Enter the size of the partition as 8000 MB, select the type as Logical and location as Beginning of this space.  Select Use as : swap area and click OK.</p>
<p><img decoding="async" loading="lazy" alt="Create Partition" src="https://sahil-phondekar.github.io/my-blogs/assets/images/create-partition-2-2ba7845902530e18141013ee1b973ffb.png" width="640" height="360" class="img_ev3q"></p>
<p>Hence we are done with creating the root and swap partition. Now you can click Install Now</p>
<p><img decoding="async" loading="lazy" alt="Something else" src="https://sahil-phondekar.github.io/my-blogs/assets/images/something-else-f9a6c53110101d90fe5f6f945434a835.png" width="640" height="360" class="img_ev3q"></p>
<p>A confirmation window will pop up. Click on Continue to proceed with the installation.</p>
<p><img decoding="async" loading="lazy" alt="Something else" src="https://sahil-phondekar.github.io/my-blogs/assets/images/something-else-2-4838456b85853a79556d3eead7d40fa3.png" width="640" height="360" class="img_ev3q"></p>
<p>Before starting the installation you need to enter some details..</p>
<p>Select your time zone and click Continue</p>
<p><img decoding="async" loading="lazy" alt="Time Zone" src="https://sahil-phondekar.github.io/my-blogs/assets/images/time-zone-cf09fc3804b93817a514863da36785f8.png" width="640" height="360" class="img_ev3q"></p>
<p>Enter your login details and click on Continue</p>
<p><img decoding="async" loading="lazy" alt="Login Details" src="https://sahil-phondekar.github.io/my-blogs/assets/images/login-details-a9f97a5ab7c51cbbe8f6385874cd4099.png" width="640" height="360" class="img_ev3q"></p>
<p>Now your installation will begin. This will take some time.</p>
<p><img decoding="async" loading="lazy" alt="Installation" src="https://sahil-phondekar.github.io/my-blogs/assets/images/installation-53e0ff436448b8ce85573497be4d27c7.png" width="640" height="360" class="img_ev3q"></p>
<p>Once the installation is complete you can restart the computer by clicking Restart Now</p>
<p><img decoding="async" loading="lazy" alt="Restart" src="https://sahil-phondekar.github.io/my-blogs/assets/images/restart-950d91a737a6b2f1cd9d45fa5f0d8ef4.png" width="640" height="360" class="img_ev3q"></p>
<p>After restarting your computer you will now see a grub screen from where you can choose between the two OS. Select Ubuntu to boot into Ubuntu OS and select Windows Boot Manager to boot into Windows 10.</p>
<p><img decoding="async" loading="lazy" alt="Grub Screen" src="https://sahil-phondekar.github.io/my-blogs/assets/images/grub-screen-2020418974d5f625418858bbab8243d2.png" width="392" height="150" class="img_ev3q"></p>
<p>This completes the installation of Ubuntu alongside Windows 10.😎</p>]]></content:encoded>
            <category>Linux</category>
            <category>Ubuntu</category>
            <category>Windows 10</category>
        </item>
        <item>
            <title><![CDATA[Dual Boot Ubuntu Alongside Windows 10 - Part 1]]></title>
            <link>https://sahil-phondekar.github.io/my-blogs/blog/dual-boot-ubuntu-p1</link>
            <guid>https://sahil-phondekar.github.io/my-blogs/blog/dual-boot-ubuntu-p1</guid>
            <pubDate>Sat, 08 Aug 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Dual Boot or VMware?]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dual-boot-or-vmware">Dual Boot or VMware?<a href="https://sahil-phondekar.github.io/my-blogs/blog/dual-boot-ubuntu-p1#dual-boot-or-vmware" class="hash-link" aria-label="Direct link to Dual Boot or VMware?" title="Direct link to Dual Boot or VMware?">​</a></h3>
<p>Depending on the work or requirements of a particular assigned task, one may require a specific operating system or a specific version of an operating system (eg. Linux or Windows 7 or Windows 10).</p>
<p>To install multiple copies of different OS on a machine there are two ways: Dual Boot or use a VMware software.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-use-dual-boot">Why use Dual Boot?<a href="https://sahil-phondekar.github.io/my-blogs/blog/dual-boot-ubuntu-p1#why-use-dual-boot" class="hash-link" aria-label="Direct link to Why use Dual Boot?" title="Direct link to Why use Dual Boot?">​</a></h3>
<p>In case of dual boot the system hardware is completely dedicated to the particular OS.</p>
<p>Simply consider your PC has a 4 GB of RAM and 1 TB of Hard disk space. In case of dual boot the the OS you are running will be able to use full available RAM improving high performance tasks experience.</p>
<p>In Virtual Machine Software you use one OS on top of another, thus dividing the available RAM among these two OS.</p>
<p>It is preferable to use dual boot, if your system lacks high speed hardwares and you are to be working on the selected OS for a longer duration.</p>
<p>In case you just need to use the OS for a small work or quick tasks, VMware is recommended.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dual-boot-ubuntu-alongside-windows-10">Dual Boot Ubuntu alongside Windows 10<a href="https://sahil-phondekar.github.io/my-blogs/blog/dual-boot-ubuntu-p1#dual-boot-ubuntu-alongside-windows-10" class="hash-link" aria-label="Direct link to Dual Boot Ubuntu alongside Windows 10" title="Direct link to Dual Boot Ubuntu alongside Windows 10">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="step-1--create-a-partition-for-ubuntu-os">Step 1 : Create a partition for Ubuntu OS<a href="https://sahil-phondekar.github.io/my-blogs/blog/dual-boot-ubuntu-p1#step-1--create-a-partition-for-ubuntu-os" class="hash-link" aria-label="Direct link to Step 1 : Create a partition for Ubuntu OS" title="Direct link to Step 1 : Create a partition for Ubuntu OS">​</a></h4>
<p>To install Ubuntu on your computer you need to set aside some free space on the hard disk. The recommended system requirements for Ubuntu 20.04 LTS are:</p>
<ul>
<li>2 GHz dual core processor or better</li>
<li>4 GB RAM</li>
<li>25 GB of free hard drive space</li>
</ul>
<p>In most windows PC the hard disk is majorly partitioned into</p>
<ul>
<li>OS (C:) drive -  Windows system and OS files are installed here</li>
<li>D: drive, E: drive ,etc - Mainly for personal storage purpose (Optional)</li>
</ul>
<p>In this step we have to create such one partition to install the Ubuntu OS and to store its system files</p>
<ul>
<li>Login to your windows system and open Disk Management<br>
<img decoding="async" loading="lazy" alt="Disk Management Window" src="https://sahil-phondekar.github.io/my-blogs/assets/images/disk-management-window-40cf94d2164466e60287796f6138519b.png" width="399" height="311" class="img_ev3q"></li>
<li>In above window there is a OS (C:) partition which is of 223.50 GB of disk space ( sizes will vary according to system ). Ubuntu requires minimum 25 GB of free disk space. Here I will use 50 GB of the available space for the OS installation.</li>
<li>Right Click on the OS (C:) drive partition and select Shrink Volume.<br>
<img decoding="async" loading="lazy" alt="Shrink Volume" src="https://sahil-phondekar.github.io/my-blogs/assets/images/shrink-vomume-69a6506840af1b2ce2308def0fa40099.png" width="399" height="311" class="img_ev3q"></li>
<li>After clicking Shrink Volume the following window will open<br>
<img decoding="async" loading="lazy" alt="Shrink C" src="https://sahil-phondekar.github.io/my-blogs/assets/images/shrink-c-ef0c4578fe2fbdb91a11c31abb175ddc.png" width="400" height="311" class="img_ev3q"></li>
<li>In the input for column Enter the amount of space to shrink in MB enter 50000 and then click on Shrink button.</li>
<li>Once done you will be able to see a Unallocated 50 GB partition which we will be using to install Ubuntu.<br>
<img decoding="async" loading="lazy" alt="Unallocated Partition" src="https://sahil-phondekar.github.io/my-blogs/assets/images/unallocated-partition-da88171fc34b9c7ed9f309aca081d95d.png" width="400" height="311" class="img_ev3q"></li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="step-2--creating-an-installer-media">Step 2 : Creating an Installer Media<a href="https://sahil-phondekar.github.io/my-blogs/blog/dual-boot-ubuntu-p1#step-2--creating-an-installer-media" class="hash-link" aria-label="Direct link to Step 2 : Creating an Installer Media" title="Direct link to Step 2 : Creating an Installer Media">​</a></h4>
<p>Before proceeding further make sure you have downloaded the following softwares and have the necessary hardware ( USB drive / Pendrive - minimum 8 GB )</p>
<ol>
<li>Ubuntu .iso Image File (<a href="https://ubuntu.com/download/desktop" target="_blank" rel="noopener noreferrer">Download</a>)</li>
<li>SD Memory Card Formatter Software (<a href="https://www.sdcard.org/downloads/formatter/eula_windows/index.html" target="_blank" rel="noopener noreferrer">Download</a>)</li>
<li>Balena Etcher Software (<a href="https://www.balena.io/etcher/" target="_blank" rel="noopener noreferrer">Download</a>)</li>
</ol>
<p>Once you have all the necessaries, you can connect the pendrive to the windows PC.</p>
<p><strong>A. Formatting the USB Drive</strong></p>
<p>Launch the SDFormatter application, once you have downloaded and installed the SD formatter from given download link. The following window will open.<br>
<img decoding="async" loading="lazy" alt="SD Formatter v4" src="https://sahil-phondekar.github.io/my-blogs/assets/images/sd-formatter-34fb13986f272f577d346f9da6f4cb07.png" width="399" height="294" class="img_ev3q"></p>
<p>Click on Option and select FORMAT TYPE as FULL (Erase) and then select OK<br>
<img decoding="async" loading="lazy" alt="Option Setting" src="https://sahil-phondekar.github.io/my-blogs/assets/images/option-setting-106e9c13dae7e60ddea8aad7187596a1.png" width="400" height="294" class="img_ev3q"></p>
<p>Now click on Format. Once done we can proceed to the next step.😎<br>
<img decoding="async" loading="lazy" alt="Full Format" src="https://sahil-phondekar.github.io/my-blogs/assets/images/full-format-3fe75bc740e21cf0d57b94e1261e65d3.png" width="399" height="294" class="img_ev3q"></p>
<p><strong>B. Creating the installer media</strong></p>
<p>Launch BalenaEtcher and you will see the following window opens<br>
<img decoding="async" loading="lazy" alt="BalenaEtcher Window" src="https://sahil-phondekar.github.io/my-blogs/assets/images/balenaetcher-window-cbe22ed63e95ce8c4b30765ed7ce74f0.png" width="400" height="237" class="img_ev3q"></p>
<p>Click on Select image and browse to the location where you have saved the Ubuntu .iso image file.<br>
<img decoding="async" loading="lazy" alt="Select the image file" src="https://sahil-phondekar.github.io/my-blogs/assets/images/select-image-5a430395de526a9ccbfd3c6751dfadc3.png" width="400" height="237" class="img_ev3q"></p>
<p>Select the .iso file and click Open.</p>
<p>You should now select the USB device (if its not already selected) on which you need to write the OS.<br>
<img decoding="async" loading="lazy" alt="Flash the OS" src="https://sahil-phondekar.github.io/my-blogs/assets/images/flash-image-28f25560ce4a39e25833369485be5263.png" width="400" height="237" class="img_ev3q"></p>
<p>Now click on Flash! and wait for the process to complete.<br>
<img decoding="async" loading="lazy" alt="Flash Complete" src="https://sahil-phondekar.github.io/my-blogs/assets/images/flash-complete-55f2272879df5c9ad44d3213c4b714e6.png" width="400" height="238" class="img_ev3q"></p>
<p>Your installer media is ready!</p>]]></content:encoded>
            <category>Linux</category>
            <category>Ubuntu</category>
            <category>Windows 10</category>
        </item>
        <item>
            <title><![CDATA[Ubuntu (Linux) - My OS for programming]]></title>
            <link>https://sahil-phondekar.github.io/my-blogs/blog/ubuntu</link>
            <guid>https://sahil-phondekar.github.io/my-blogs/blog/ubuntu</guid>
            <pubDate>Fri, 07 Aug 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[What is Ubuntu?]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-ubuntu">What is Ubuntu?<a href="https://sahil-phondekar.github.io/my-blogs/blog/ubuntu#what-is-ubuntu" class="hash-link" aria-label="Direct link to What is Ubuntu?" title="Direct link to What is Ubuntu?">​</a></h3>
<p><strong>Ubuntu</strong> is an open source linux based software operating system that runs from the desktop <strong>(Ubuntu Desktop)</strong>, to the cloud <strong>(Ubuntu Server)</strong>, to all your internet connected things.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-use-ubuntu">Why use Ubuntu?<a href="https://sahil-phondekar.github.io/my-blogs/blog/ubuntu#why-use-ubuntu" class="hash-link" aria-label="Direct link to Why use Ubuntu?" title="Direct link to Why use Ubuntu?">​</a></h3>
<p><strong>Ubuntu</strong> comes with everything you need to run your organisation, school, home or enterprise. All the essential applications, like an office suite, browsers, email and media apps come pre-installed and thousands more games and applications are available in the Ubuntu Software Centre.</p>
<p>Ubuntu has always been free to download, use and share.</p>
<p>It comes with a built-in firewall and virus protection software due to which it is one of the most secure operating systems around. And the long-term support releases give you five years of security patches and updates.</p>
<p>Ubuntu is by far the most popular of the well known Linux distributions. Thus it has a large community providing extensive knowledge and solutions to most of the problems.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-get-ubuntu">How to get Ubuntu?<a href="https://sahil-phondekar.github.io/my-blogs/blog/ubuntu#how-to-get-ubuntu" class="hash-link" aria-label="Direct link to How to get Ubuntu?" title="Direct link to How to get Ubuntu?">​</a></h3>
<p>As mentioned earlier, Ubuntu is always free to download and the latest LTS version at the time of writing of this blog is Ubuntu 20.04.</p>
<p>You can download the OS from the official site - <a href="https://ubuntu.com/download" target="_blank" rel="noopener noreferrer">https://ubuntu.com/download</a> and replace your current OS with it or run Ubuntu alongside it.</p>
<p>For desktop PCs and laptops download the Ubuntu Desktop image from <a href="https://ubuntu.com/download/desktop" target="_blank" rel="noopener noreferrer">https://ubuntu.com/download/desktop</a></p>
<p><img decoding="async" loading="lazy" alt="Download Ubuntu Desktop" src="https://sahil-phondekar.github.io/my-blogs/assets/images/download-ubuntu-desktop-2e804ef1267104dec7f55c271f391cb5.png" width="1352" height="666" class="img_ev3q"></p>
<p>Once you have downloaded the .iso image file for the OS, you can simply install the OS by replacing the old one or install it along side other OS such as Windows by using dual boot or Virtual Machine Softwares.</p>]]></content:encoded>
            <category>Linux</category>
            <category>Ubuntu</category>
        </item>
        <item>
            <title><![CDATA[Setting Up Raspberry Pi 3 - Part 2]]></title>
            <link>https://sahil-phondekar.github.io/my-blogs/blog/setting-raspberry-pi-software-p2</link>
            <guid>https://sahil-phondekar.github.io/my-blogs/blog/setting-raspberry-pi-software-p2</guid>
            <pubDate>Tue, 09 Jan 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[Practical setup of Raspberry Pi]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="practical-setup-of-raspberry-pi">Practical setup of Raspberry Pi<a href="https://sahil-phondekar.github.io/my-blogs/blog/setting-raspberry-pi-software-p2#practical-setup-of-raspberry-pi" class="hash-link" aria-label="Direct link to Practical setup of Raspberry Pi" title="Direct link to Practical setup of Raspberry Pi">​</a></h3>
<p>In the <a href="https://sahil-phondekar.github.io/my-blogs/blog/setting-raspberry-pi-software-p1">previous part</a> we were all done with writing the OS to tour SD Card. Now its time to attach this SD Card to our Raspberry Pi 3 board.</p>
<p>So connect the SD Card to the Board and follow these step to setup your board.</p>
<ol>
<li>Open the control panel<br>
<img decoding="async" loading="lazy" alt="Control Panel" src="https://sahil-phondekar.github.io/my-blogs/assets/images/control-panel-71c97b91ab3440ee56fdf14a48c611a3.png" width="640" height="359" class="img_ev3q"></li>
<li>Click on the <code>Network and Internet | Network and Sharing Centre | Change Adapter settings</code>.<br>
<!-- -->The following window will open.<br>
<img decoding="async" loading="lazy" alt="Network Connections" src="https://sahil-phondekar.github.io/my-blogs/assets/images/network-connections-06aaba32940ed387556219db8af8e8dd.png" width="584" height="300" class="img_ev3q"></li>
<li>Click on <code>Ethernet</code>. The following window will open.<br>
<img decoding="async" loading="lazy" alt="Ethernet Properties" src="https://sahil-phondekar.github.io/my-blogs/assets/images/ethernet-properties-30266ec803003431dc2702a67411f2d2.png" width="312" height="400" class="img_ev3q"></li>
<li>Double click on Internet Protocol Version 4(TCP/IPv4)<br>
<img decoding="async" loading="lazy" alt="IP v4" src="https://sahil-phondekar.github.io/my-blogs/assets/images/ipv4-891ef4cbfe5a35baa6a846bafd0adef6.png" width="358" height="400" class="img_ev3q"></li>
<li>Click on Use the following IP address and use the following IP address: <code>169.254.211.250</code><br>
<!-- -->Subnet mask will automatically set.<br>
<img decoding="async" loading="lazy" alt="IP v4" src="https://sahil-phondekar.github.io/my-blogs/assets/images/ipv4-2-60f6fa52814ccc8c091bcc2e08e82dd9.png" width="357" height="400" class="img_ev3q"></li>
<li>Now click OK and close every thing.</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="connecting-the-raspberry-pi-to-pc">Connecting the Raspberry pi to PC<a href="https://sahil-phondekar.github.io/my-blogs/blog/setting-raspberry-pi-software-p2#connecting-the-raspberry-pi-to-pc" class="hash-link" aria-label="Direct link to Connecting the Raspberry pi to PC" title="Direct link to Connecting the Raspberry pi to PC">​</a></h4>
<p>Now just follow these steps to connect the Raspberry Pi to your PC.</p>
<ol>
<li>Power up the Raspberry Pi using an micro USB cable and connect it to PC (or a 5 V supply).</li>
<li>Now connect the PC and the Raspberry pi using a LAN cable. If the connection is proper the Tx-Rx led will start to glow.</li>
<li>Now to set up the Raspbian OS on your PC you will require two other softwares – Xming and Putty.</li>
<li>You can get both the softwares from <a href="https://xming.en.download.it/" target="_blank" rel="noopener noreferrer">https://xming.en.download.it/</a> and <a href="https://www.putty.org/" target="_blank" rel="noopener noreferrer">https://www.putty.org/</a> respectively.</li>
<li>Firstly Install the Xming software as usual next-next-install. Putty doesn't needs installation. It will directly run on your PC.</li>
<li>Now double click on Xming to open it. You will find nothing opens. Don’t worry Xming is a background app and runs in background.</li>
<li>Now open Putty.<br>
<img decoding="async" loading="lazy" alt="Putty" src="https://sahil-phondekar.github.io/my-blogs/assets/images/putty-495d795c9de73241a602ad7c042a66ba.png" width="400" height="381" class="img_ev3q"></li>
<li>In the <code>Sessions</code> tab specify the Host Name(or IP address) to <code>169.254.211.247</code>. Let all other settings at default.<br>
<img decoding="async" loading="lazy" alt="Putty" src="https://sahil-phondekar.github.io/my-blogs/assets/images/putty-2-e29b0fd12c48b9be5096760401255520.png" width="400" height="385" class="img_ev3q"></li>
<li>In the category expand the <code>SSH</code> tab and select <code>X11</code> and check <code>Enable X11 forwarding</code>.<br>
<img decoding="async" loading="lazy" alt="Putty" src="https://sahil-phondekar.github.io/my-blogs/assets/images/putty-3-3bc98e610f3ccb398546d6bcacfc4699.png" width="400" height="380" class="img_ev3q"><br>
<img decoding="async" loading="lazy" alt="Putty" src="https://sahil-phondekar.github.io/my-blogs/assets/images/putty-4-795f08244f6209f14d1387ca46a838fa.png" width="400" height="387" class="img_ev3q"></li>
<li>Now click on <code>Open</code>. When you do so Raspbian OS will open. If this window opens means that yours OS is successfully installed.<br>
<img decoding="async" loading="lazy" alt="Putty" src="https://sahil-phondekar.github.io/my-blogs/assets/images/putty-5-77272f2ec07b06907f7fdab55a091c84.png" width="640" height="408" class="img_ev3q"></li>
<li>In Login as enter <code>pi</code> which is default user name and press enter.<br>
<img decoding="async" loading="lazy" alt="Putty" src="https://sahil-phondekar.github.io/my-blogs/assets/images/putty-6-1fa2eedee5e0728b74421a9d794e8e2e.png" width="640" height="410" class="img_ev3q"></li>
<li>In the password enter <code>raspberry</code> which is again by default. Note that the password you enter will not be visible. Now press enter.<br>
<img decoding="async" loading="lazy" alt="Putty" src="https://sahil-phondekar.github.io/my-blogs/assets/images/putty-7-7756ba5bf8460837da1f6b86e52ba287.png" width="640" height="409" class="img_ev3q"></li>
<li>Once the loading is done and you find the cursor, write the command <code>startlxde</code> and then press enter.<br>
<img decoding="async" loading="lazy" alt="Putty" src="https://sahil-phondekar.github.io/my-blogs/assets/images/putty-8-978e70ca36b861cab7d77902c2350489.png" width="640" height="411" class="img_ev3q"></li>
<li>Once you press enter the following window will open.<br>
<img decoding="async" loading="lazy" alt="Raspbian OS UI" src="https://sahil-phondekar.github.io/my-blogs/assets/images/raspbian-os-ui-fc85fb498b6be7e91cf3037f355cf40f.png" width="640" height="360" class="img_ev3q"></li>
</ol>
<p>It is as an another OS at the top of my Windows 10. This is achieved using Xming. You can explore this OS for now till the next post on this.</p>]]></content:encoded>
            <category>Raspberry Pi</category>
            <category>Windows 10</category>
        </item>
        <item>
            <title><![CDATA[Setting Up Raspberry Pi 3 - Part 1]]></title>
            <link>https://sahil-phondekar.github.io/my-blogs/blog/setting-raspberry-pi-software-p1</link>
            <guid>https://sahil-phondekar.github.io/my-blogs/blog/setting-raspberry-pi-software-p1</guid>
            <pubDate>Mon, 08 Jan 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[Installing the Operating System]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="installing-the-operating-system">Installing the Operating System<a href="https://sahil-phondekar.github.io/my-blogs/blog/setting-raspberry-pi-software-p1#installing-the-operating-system" class="hash-link" aria-label="Direct link to Installing the Operating System" title="Direct link to Installing the Operating System">​</a></h3>
<p>The first model of raspberry pi was launched in 2011. Since then it has became immensely popular as a low cost computer.</p>
<p>There are many models of the Raspberry Pi from Raspberry Pi zero to Raspberry Pi 3.</p>
<p>In this blog I will more concentrate on the latest raspberry pi model RASPBERRY PI 3, Model B which comes with 1 GB RAM.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="materials-required">Materials Required:<a href="https://sahil-phondekar.github.io/my-blogs/blog/setting-raspberry-pi-software-p1#materials-required" class="hash-link" aria-label="Direct link to Materials Required:" title="Direct link to Materials Required:">​</a></h4>
<ol>
<li>A Raspberry Pi 3, Model B.</li>
<li>A minimum 8 GB SD Card. I am using a 16 GB SD Card.</li>
<li>A micro USB cable for powering the Pi.</li>
<li>A LAN cable.</li>
<li>Softwares Required<!-- -->
<ul>
<li>SDFormatter</li>
<li>Win32 disc Manager software</li>
<li>Xming</li>
<li>Putty</li>
</ul>
</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="steps">Steps:<a href="https://sahil-phondekar.github.io/my-blogs/blog/setting-raspberry-pi-software-p1#steps" class="hash-link" aria-label="Direct link to Steps:" title="Direct link to Steps:">​</a></h4>
<p>We are going to install our OS on the SD card, so definitely we will require it to be fully empty. So the first step is to format the SD card.</p>
<p>For this purpose you can use the application SDFormatter. You can download it from <a href="https://www.sdcard.org/downloads/formatter/" target="_blank" rel="noopener noreferrer">https://www.sdcard.org/downloads/formatter/</a></p>
<p>Once done with this install it on your PC. Just  go with the flow, Next -Next and INSTALL.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="now-follow-these-steps-to-get-your-sd-card-ready">Now follow these steps to get your SD card ready.<a href="https://sahil-phondekar.github.io/my-blogs/blog/setting-raspberry-pi-software-p1#now-follow-these-steps-to-get-your-sd-card-ready" class="hash-link" aria-label="Direct link to Now follow these steps to get your SD card ready." title="Direct link to Now follow these steps to get your SD card ready.">​</a></h4>
<ol>
<li>Connect the SD card to your PC.</li>
<li>Now open the SDFormatter software. It will look as shown in the following screenshot.<br>
<img decoding="async" loading="lazy" alt="SD Formatter" src="https://sahil-phondekar.github.io/my-blogs/assets/images/sdformatter-9412eb5f751525cde333478e1755fedb.jpg" width="400" height="307" class="img_ev3q"></li>
<li>Make sure your SD Card drive name is selected. If not you can do this now.</li>
<li>Now click on option. A pop up window will open as seen in the next screenshot.<br>
<img decoding="async" loading="lazy" alt="SD Formatter" src="https://sahil-phondekar.github.io/my-blogs/assets/images/sdformatter-2-798f7d13e9360f2931153846800486d6.jpg" width="400" height="309" class="img_ev3q"></li>
<li>Select format type as FULL(erase) and format size adjustment as OFF.</li>
<li>Now click OK and select format. This will prepare our SD Card for OS installation</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="now-its-time-to-write-the-os-to-our-sd-card">Now its time to write the OS to our SD Card.<a href="https://sahil-phondekar.github.io/my-blogs/blog/setting-raspberry-pi-software-p1#now-its-time-to-write-the-os-to-our-sd-card" class="hash-link" aria-label="Direct link to Now its time to write the OS to our SD Card." title="Direct link to Now its time to write the OS to our SD Card.">​</a></h4>
<p>Now you will require the <strong>Disc Image File Raspbian-jessie</strong> which you can get from <a href="https://downloads.raspberrypi.org/raspbian/images/" target="_blank" rel="noopener noreferrer">https://downloads.raspberrypi.org/raspbian/images/</a></p>
<p>Once you have downloaded and extracted the .img file, place it in a proper folder for now so that it is easy to browse to it.<br>
<img decoding="async" loading="lazy" alt="File Explorer" src="https://sahil-phondekar.github.io/my-blogs/assets/images/file-explorer-11cd3c13343f3648d2669afc16416268.jpg" width="640" height="186" class="img_ev3q"></p>
<p>Now you are ready to install this image file onto your SD Card. For this you will require the <strong>win32 disc Manager software</strong>. You can download from <a href="https://win32diskimager.org/" target="_blank" rel="noopener noreferrer">https://win32diskimager.org/</a>.</p>
<p>Once installed open the software. It will look as in following screenshot<br>
<img decoding="async" loading="lazy" alt="Disk Imager" src="https://sahil-phondekar.github.io/my-blogs/assets/images/disk-imager-59e959a6ab7d05953a0160c86d422930.jpg" width="400" height="203" class="img_ev3q"></p>
<p>From the Browse options go to the location of the Raspbian image file. In my case it is F:\Raspberry Pi OS.<br>
<img decoding="async" loading="lazy" alt="Raspbian Image" src="https://sahil-phondekar.github.io/my-blogs/assets/images/raspbian-image-568e213a9e1a293bf670a257eaba1304.png" width="640" height="438" class="img_ev3q"></p>
<p>Once you select the .img file click open.<br>
<img decoding="async" loading="lazy" alt="Disk Imager 2" src="https://sahil-phondekar.github.io/my-blogs/assets/images/disk-imager-2-8301810f7d385d2834b381f04cc9f0b4.png" width="400" height="213" class="img_ev3q"></p>
<p>Now click on Write and  this will start the writing the OS on the SD Card. Once it is done click on OK.</p>
<p>Now browse to the SD Card from your PC's File Browser and open it.<br>
<img decoding="async" loading="lazy" alt="File Explorer" src="https://sahil-phondekar.github.io/my-blogs/assets/images/file-explorer-2-372e6e54e38d576c7a25cacad59cfb80.png" width="640" height="320" class="img_ev3q"></p>
<p>Now find the file CMDline.txt file. And open it in Notepad.<br>
<img decoding="async" loading="lazy" alt="Notepad" src="https://sahil-phondekar.github.io/my-blogs/assets/images/notepad-716010417538c36dd92b9317fdfa504e.png" width="640" height="233" class="img_ev3q"></p>
<p>In this file find the word <code>rootwait</code> and replace it by <code>rootwait ip=169.254.211.247</code>.<br>
<img decoding="async" loading="lazy" alt="Notepad 2" src="https://sahil-phondekar.github.io/my-blogs/assets/images/notepad-2-9e21adf4d462a40b816d7c41cbdcc807.png" width="640" height="231" class="img_ev3q"></p>
<p>Now connect the SD Card to Raspberry Pi.</p>
<p>In the next post we will see how to install the setup the Raspberry Pi with our PC.</p>]]></content:encoded>
            <category>Raspberry Pi</category>
            <category>Windows 10</category>
        </item>
        <item>
            <title><![CDATA[Setting Up Arduino Software for the First time]]></title>
            <link>https://sahil-phondekar.github.io/my-blogs/blog/setting-arduino-software</link>
            <guid>https://sahil-phondekar.github.io/my-blogs/blog/setting-arduino-software</guid>
            <pubDate>Sun, 07 Jan 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[Setup for Arduino IDE:]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="setup-for-arduino-ide">Setup for Arduino IDE:<a href="https://sahil-phondekar.github.io/my-blogs/blog/setting-arduino-software#setup-for-arduino-ide" class="hash-link" aria-label="Direct link to Setup for Arduino IDE:" title="Direct link to Setup for Arduino IDE:">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="installing-the-software">Installing the Software:<a href="https://sahil-phondekar.github.io/my-blogs/blog/setting-arduino-software#installing-the-software" class="hash-link" aria-label="Direct link to Installing the Software:" title="Direct link to Installing the Software:">​</a></h4>
<p>You can download the Arduino IDE from the official site of Arduino <a href="https://www.arduino.cc/en/Main/Software" target="_blank" rel="noopener noreferrer">https://www.arduino.cc/en/Main/Software</a>. Download the latest version. At the time of writing this post the latest version was version 1.8.5.</p>
<p>I have downloaded the Windows Zip file for non-admin install.<br>
<img decoding="async" loading="lazy" alt="Download Arduino" src="https://sahil-phondekar.github.io/my-blogs/assets/images/download-arduino-6def6fc3ccd24d65fdd3b5091623c24f.jpg" width="640" height="295" class="img_ev3q"></p>
<p>Once downloaded, extract the file and you will find the Arduino software in there, no need of any installing procedures.<br>
<img decoding="async" loading="lazy" alt="File Explorer" src="https://sahil-phondekar.github.io/my-blogs/assets/images/file-explorer-a0b88ac585a62ab42f81fb8bf6df3b03.jpg" width="640" height="457" class="img_ev3q"></p>
<p>If you are connecting your Arduino Board for the first time you will require to install the necessary drivers to make the board compatible .</p>
<p>The drivers are available in the drivers folder in the extracted folder.</p>
<p>Just open it and find the <strong>Arduino.inf</strong> file in it. Copy the path of the drivers folder.<br>
<img decoding="async" loading="lazy" alt="Drivers" src="https://sahil-phondekar.github.io/my-blogs/assets/images/drivers-3ddbe4ebc5890df73c013a2842e62632.jpg" width="640" height="460" class="img_ev3q"></p>
<p>Now open the Device Manager<br>
<img decoding="async" loading="lazy" alt="Device Manager" src="https://sahil-phondekar.github.io/my-blogs/assets/images/device-manager-20f9a07bece904c8e231ca23af037bc4.jpg" width="640" height="468" class="img_ev3q"></p>
<p>In the device manager, when you connect the Arduino you will find your device name in the Ports(COM &amp; LPT). For eg. Arduino UNO or Arduino MEGA etc. If you cant find your device under Ports(COM &amp; LPT) look under Other Devices.</p>
<p>Once you have found your device, Right click on the device and select Update Driver Software.<br>
<img decoding="async" loading="lazy" alt="Device Manager" src="https://sahil-phondekar.github.io/my-blogs/assets/images/device-manager-2-bf3e36cc2e4450de384297dee23d6582.jpg" width="640" height="470" class="img_ev3q"></p>
<p>The following window will open<br>
<img decoding="async" loading="lazy" alt="Update Driver" src="https://sahil-phondekar.github.io/my-blogs/assets/images/update-driver-9c3eef07856b016fa8bd7dc21605d8b3.jpg" width="610" height="456" class="img_ev3q"></p>
<p>Select Browse my computer for driver software and browse to the drivers folder or paste the address of the driver software and click Next.<br>
<img decoding="async" loading="lazy" alt="Update Driver 2" src="https://sahil-phondekar.github.io/my-blogs/assets/images/update-driver-2-ed171adf8be985b002db80f31458fa7f.jpg" width="614" height="456" class="img_ev3q"></p>
<p>After this the windows will install the necessary driver and you are ready to go. Connect your device and simply plug and play.</p>]]></content:encoded>
            <category>Arduino</category>
            <category>Windows 10</category>
        </item>
    </channel>
</rss>