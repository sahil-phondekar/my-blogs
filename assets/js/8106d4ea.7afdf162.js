"use strict";(self.webpackChunkmy_blogs=self.webpackChunkmy_blogs||[]).push([[4726],{3127:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"react-js/deep-dive/lifting-state","title":"Lifting State Up in React","description":"What is \\"Lifting State Up\\"?","source":"@site/docs/react-js/deep-dive/lifting-state.md","sourceDirName":"react-js/deep-dive","slug":"/react-js/deep-dive/lifting-state","permalink":"/my-blogs/docs/react-js/deep-dive/lifting-state","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Updating Object State Immutably in React","permalink":"/my-blogs/docs/react-js/deep-dive/updating-objects"},"next":{"title":"Next JS","permalink":"/my-blogs/docs/category/next-js"}}');var s=e(4848),i=e(8453);const r={sidebar_position:3},a="Lifting State Up in React",c={},d=[{value:"What is &quot;Lifting State Up&quot;?",id:"what-is-lifting-state-up",level:2},{value:"Why Lift State Up?",id:"why-lift-state-up",level:2},{value:"Example: Lifting State Up",id:"example-lifting-state-up",level:2},{value:"Without Lifting State (Not Shared)",id:"without-lifting-state-not-shared",level:3},{value:"With Lifting State Up (Shared State)",id:"with-lifting-state-up-shared-state",level:3},{value:"Key Changes:",id:"key-changes",level:3},{value:"Why Use This Approach?",id:"why-use-this-approach",level:2}];function h(n){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"lifting-state-up-in-react",children:"Lifting State Up in React"})}),"\n",(0,s.jsx)(t.h2,{id:"what-is-lifting-state-up",children:'What is "Lifting State Up"?'}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Lifting state up"})," means moving the state from a child component to a common parent component so that ",(0,s.jsx)(t.strong,{children:"multiple child components"})," can share and access that state."]}),"\n",(0,s.jsxs)(t.li,{children:["This is needed when ",(0,s.jsx)(t.strong,{children:"two or more components"})," need to communicate or share the same data."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"why-lift-state-up",children:"Why Lift State Up?"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["React components only have access to their ",(0,s.jsx)(t.strong,{children:"own state"}),". If you want sibling components to share data or update each other, you need to ",(0,s.jsx)(t.strong,{children:"lift the state"})," to their ",(0,s.jsx)(t.strong,{children:"common parent"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["The parent manages the state, and then passes it down to the children via ",(0,s.jsx)(t.strong,{children:"props"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"example-lifting-state-up",children:"Example: Lifting State Up"}),"\n",(0,s.jsx)(t.h3,{id:"without-lifting-state-not-shared",children:"Without Lifting State (Not Shared)"}),"\n",(0,s.jsxs)(t.p,{children:["Imagine we have two child components, ",(0,s.jsx)(t.code,{children:"ComponentA"})," and ",(0,s.jsx)(t.code,{children:"ComponentB"}),", and we want them to share some data (like a counter). Without lifting state, each child has its own independent state."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import React, { useState } from 'react';\r\n\r\nfunction ComponentA() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>Component A Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increase A</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ComponentB() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>Component B Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increase B</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <ComponentA />\r\n      <ComponentB />\r\n    </div>\r\n  );\r\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, the counts are separate for ",(0,s.jsx)(t.code,{children:"ComponentA"})," and ",(0,s.jsx)(t.code,{children:"ComponentB"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"with-lifting-state-up-shared-state",children:"With Lifting State Up (Shared State)"}),"\n",(0,s.jsxs)(t.p,{children:["Now, we lift the state up to the ",(0,s.jsx)(t.strong,{children:"common parent"})," (",(0,s.jsx)(t.code,{children:"App"}),"), so both components can access and update the same state."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import React, { useState } from 'react';\r\n\r\nfunction ComponentA({ count, setCount }) {\r\n  return (\r\n    <div>\r\n      <p>Component A Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increase A</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ComponentB({ count, setCount }) {\r\n  return (\r\n    <div>\r\n      <p>Component B Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increase B</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  const [count, setCount] = useState(0);  // State is now in the parent (App)\r\n\r\n  return (\r\n    <div>\r\n      <ComponentA count={count} setCount={setCount} />\r\n      <ComponentB count={count} setCount={setCount} />\r\n    </div>\r\n  );\r\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"key-changes",children:"Key Changes:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsxs)(t.strong,{children:["State in Parent (",(0,s.jsx)(t.code,{children:"App"}),")"]}),": The state (",(0,s.jsx)(t.code,{children:"count"}),") and the function to update it (",(0,s.jsx)(t.code,{children:"setCount"}),") are now managed in the ",(0,s.jsx)(t.code,{children:"App"})," component."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Pass State and Setter to Children"}),": The ",(0,s.jsx)(t.code,{children:"count"})," and ",(0,s.jsx)(t.code,{children:"setCount"})," are passed down as ",(0,s.jsx)(t.strong,{children:"props"})," to ",(0,s.jsx)(t.code,{children:"ComponentA"})," and ",(0,s.jsx)(t.code,{children:"ComponentB"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Both Components Use Shared State"}),": Now, both ",(0,s.jsx)(t.code,{children:"ComponentA"})," and ",(0,s.jsx)(t.code,{children:"ComponentB"})," can modify and display the same ",(0,s.jsx)(t.code,{children:"count"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"why-use-this-approach",children:"Why Use This Approach?"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Sharing Data Between Components"}),": This is useful when sibling components need to ",(0,s.jsx)(t.strong,{children:"sync"})," or share data."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Centralized State Management"}),": The state is managed in one place, making it easier to update and track."]}),"\n"]})]})}function l(n={}){const{wrapper:t}={...(0,i.R)(),...n.components};return t?(0,s.jsx)(t,{...n,children:(0,s.jsx)(h,{...n})}):h(n)}},8453:(n,t,e)=>{e.d(t,{R:()=>r,x:()=>a});var o=e(6540);const s={},i=o.createContext(s);function r(n){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function a(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),o.createElement(i.Provider,{value:t},n.children)}}}]);