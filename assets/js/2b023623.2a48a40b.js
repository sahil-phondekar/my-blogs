"use strict";(self.webpackChunkmy_blogs=self.webpackChunkmy_blogs||[]).push([[9647],{5453:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});var t=i(6800),r=i(4848),s=i(8453);const a={slug:"spring-security-intergration",title:"Spring Boot JWT Authentication with Spring Security \u2014 Complete Step-by-Step Guide",authors:["sahil"],tags:["springboot","jwt-authentication","spring-security","rest-api-security"]},l=void 0,o={authorsImageUrls:[void 0]},c=[{value:"Tech Stack",id:"tech-stack",level:2},{value:"1. Add Maven Dependencies",id:"1-add-maven-dependencies",level:2},{value:"2. JWT Utility Class",id:"2-jwt-utility-class",level:2},{value:"<code>JwtUtil.java</code>",id:"jwtutiljava",level:3},{value:"3. JWT Filter",id:"3-jwt-filter",level:2},{value:"<code>JwtAuthenticationFilter.java</code>",id:"jwtauthenticationfilterjava",level:3},{value:"4. Custom UserDetailsService",id:"4-custom-userdetailsservice",level:2},{value:"<code>UserDetailsServiceImpl.java</code>",id:"userdetailsserviceimpljava",level:3},{value:"5. Spring Security Configuration",id:"5-spring-security-configuration",level:2},{value:"<code>SecurityConfig.java</code>",id:"securityconfigjava",level:3},{value:"6. Login Endpoint",id:"6-login-endpoint",level:2},{value:"<code>AuthController.java</code>",id:"authcontrollerjava",level:3},{value:"DTOs",id:"dtos",level:3},{value:"7. Secure API Example",id:"7-secure-api-example",level:2},{value:"<code>UserController.java</code>",id:"usercontrollerjava",level:3},{value:"Test Your API",id:"test-your-api",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["In this tutorial, we'll walk through how to build a ",(0,r.jsx)(n.strong,{children:"secure JWT authentication system"})," using ",(0,r.jsx)(n.strong,{children:"Spring Boot"}),", ",(0,r.jsx)(n.strong,{children:"Spring Security"}),", and the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"jjwt"})})," library. We'll cover everything from login to securing routes using JWTs \u2014 all with full code examples and explanations."]}),"\n",(0,r.jsx)(n.h2,{id:"tech-stack",children:"Tech Stack"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Spring Boot ",(0,r.jsx)(n.code,{children:"3.4.4"})]}),"\n",(0,r.jsx)(n.li,{children:"Spring Security"}),"\n",(0,r.jsxs)(n.li,{children:["jjwt (",(0,r.jsx)(n.code,{children:"0.12.6"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Maven"}),"\n",(0,r.jsx)(n.li,{children:"Java 17+"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"1-add-maven-dependencies",children:"1. Add Maven Dependencies"}),"\n",(0,r.jsxs)(n.p,{children:["Add the following dependencies to your ",(0,r.jsx)(n.code,{children:"pom.xml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"\x3c!-- JWT dependencies --\x3e\n<dependency>\n    <groupId>io.jsonwebtoken</groupId>\n    <artifactId>jjwt-api</artifactId>\n    <version>0.12.6</version>\n</dependency>\n<dependency>\n    <groupId>io.jsonwebtoken</groupId>\n    <artifactId>jjwt-impl</artifactId>\n    <version>0.12.6</version>\n    <scope>runtime</scope>\n</dependency>\n<dependency>\n    <groupId>io.jsonwebtoken</groupId>\n    <artifactId>jjwt-jackson</artifactId>\n    <version>0.12.6</version>\n    <scope>runtime</scope>\n</dependency>\n\n\x3c!-- Spring Security --\x3e\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n    <version>3.4.4</version>\n</dependency>\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Explanation"}),": These dependencies bring in support for Spring Security and the ",(0,r.jsx)(n.code,{children:"jjwt"})," (Java JWT) library to help us create and validate tokens."]}),"\n",(0,r.jsx)(n.h2,{id:"2-jwt-utility-class",children:"2. JWT Utility Class"}),"\n",(0,r.jsx)(n.h3,{id:"jwtutiljava",children:(0,r.jsx)(n.code,{children:"JwtUtil.java"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Component\npublic class JwtUtil {\n\n    @Value("${jwt.secret}")\n    private String secretKey;\n\n    @Value("${jwt.expiration}")\n    private long jwtExpirationMs;\n\n    public String generateToken(String email) {\n        return Jwts.builder()\n                .subject(email)\n                .issuedAt(new Date())\n                .expiration(new Date(System.currentTimeMillis() + jwtExpirationMs))\n                .signWith(getSigningKey())\n                .compact();\n    }\n\n    public String extractEmail(String token) {\n        return Jwts.parser()\n                .verifyWith(getSigningKey())\n                .build()\n                .parseSignedClaims(token)\n                .getPayload()\n                .getSubject();\n    }\n\n    public boolean validateToken(String token) {\n        try {\n            Jwts.parser()\n                .verifyWith(getSigningKey())\n                .build()\n                .parseSignedClaims(token);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    private SecretKey getSigningKey() {\n        return Keys.hmacShaKeyFor(secretKey.getBytes());\n    }\n\n    public String extractToken(HttpServletRequest request) {\n        String bearer = request.getHeader("Authorization");\n        return (bearer != null && bearer.startsWith("Bearer ")) ? bearer.substring(7) : null;\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"generateToken()"}),": creates a JWT using the user's email."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"extractEmail()"}),": reads the email back from a token."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"validateToken()"}),": verifies the token\u2019s integrity."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getSigningKey()"}),": uses your configured secret to create a secure signing key."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udee0\ufe0f Add to ",(0,r.jsx)(n.code,{children:"application.properties"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"jwt.secret=your-256-bit-secret-value-here\njwt.expiration=3600000\n"})}),"\n",(0,r.jsx)(n.h2,{id:"3-jwt-filter",children:"3. JWT Filter"}),"\n",(0,r.jsx)(n.h3,{id:"jwtauthenticationfilterjava",children:(0,r.jsx)(n.code,{children:"JwtAuthenticationFilter.java"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Component\npublic class JwtAuthenticationFilter extends OncePerRequestFilter {\n\n    private final JwtUtil jwtUtil;\n    private final UserDetailsService userDetailsService;\n\n    public JwtAuthenticationFilter(JwtUtil jwtUtil, UserDetailsService userDetailsService) {\n        this.jwtUtil = jwtUtil;\n        this.userDetailsService = userDetailsService;\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n                                    HttpServletResponse response,\n                                    FilterChain filterChain) throws ServletException, IOException {\n\n        String token = jwtUtil.extractToken(request);\n\n        if (token != null && jwtUtil.validateToken(token)) {\n            String email = jwtUtil.extractEmail(token);\n            UserDetails userDetails = userDetailsService.loadUserByUsername(email);\n\n            UsernamePasswordAuthenticationToken authToken =\n                new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());\n\n            SecurityContextHolder.getContext().setAuthentication(authToken);\n        }\n\n        filterChain.doFilter(request, response);\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This filter intercepts every request."}),"\n",(0,r.jsxs)(n.li,{children:["It checks for a JWT in the ",(0,r.jsx)(n.code,{children:"Authorization"})," header."]}),"\n",(0,r.jsx)(n.li,{children:"If valid, it loads the user and sets the authentication in Spring Security's context."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"4-custom-userdetailsservice",children:"4. Custom UserDetailsService"}),"\n",(0,r.jsx)(n.h3,{id:"userdetailsserviceimpljava",children:(0,r.jsx)(n.code,{children:"UserDetailsServiceImpl.java"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class UserDetailsServiceImpl implements UserDetailsService {\n\n    private final UserRepository userRepository;\n\n    public UserDetailsServiceImpl(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    @Override\n    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {\n        User user = userRepository.findByEmail(email)\n            .orElseThrow(() -> new UsernameNotFoundException("User not found with email: " + email));\n\n        return org.springframework.security.core.userdetails.User.builder()\n                .username(user.getEmail())\n                .password(user.getPasswordHash())\n                .roles(user.getRole().name())\n                .build();\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Loads the user from the database using the email address."}),"\n",(0,r.jsxs)(n.li,{children:["Converts your custom ",(0,r.jsx)(n.code,{children:"User"})," entity to Spring Security\u2019s ",(0,r.jsx)(n.code,{children:"UserDetails"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"5-spring-security-configuration",children:"5. Spring Security Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"securityconfigjava",children:(0,r.jsx)(n.code,{children:"SecurityConfig.java"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Configuration\npublic class SecurityConfig {\n\n    private final JwtAuthenticationFilter jwtAuthenticationFilter;\n\n    public SecurityConfig(JwtAuthenticationFilter jwtAuthenticationFilter) {\n        this.jwtAuthenticationFilter = jwtAuthenticationFilter;\n    }\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http.csrf(csrf -> csrf.disable())\n            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n            .authorizeHttpRequests(auth -> auth\n                .requestMatchers("/api/auth/login", "/swagger-ui/**", "/v3/api-docs/**").permitAll()\n                .anyRequest().authenticated())\n            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(UserDetailsServiceImpl userDetailsService) {\n        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();\n        authProvider.setUserDetailsService(userDetailsService);\n        authProvider.setPasswordEncoder(passwordEncoder());\n        return new ProviderManager(List.of(authProvider));\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Disables CSRF (since we use tokens)."}),"\n",(0,r.jsx)(n.li,{children:"Stateless session (no server-side session tracking)."}),"\n",(0,r.jsxs)(n.li,{children:["Allows unauthenticated access only to ",(0,r.jsx)(n.code,{children:"/api/auth/login"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Adds our custom ",(0,r.jsx)(n.code,{children:"JwtAuthenticationFilter"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"6-login-endpoint",children:"6. Login Endpoint"}),"\n",(0,r.jsx)(n.h3,{id:"authcontrollerjava",children:(0,r.jsx)(n.code,{children:"AuthController.java"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/auth")\npublic class AuthController {\n\n    private final AuthenticationManager authenticationManager;\n    private final JwtUtil jwtUtil;\n\n    public AuthController(AuthenticationManager authenticationManager, JwtUtil jwtUtil) {\n        this.authenticationManager = authenticationManager;\n        this.jwtUtil = jwtUtil;\n    }\n\n    @PostMapping("/login")\n    public ResponseEntity<JwtResponse> login(@RequestBody LoginRequest request) {\n        Authentication authentication = authenticationManager.authenticate(\n                new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword()));\n\n        String token = jwtUtil.generateToken(request.getEmail());\n        return ResponseEntity.ok(new JwtResponse(token));\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dtos",children:"DTOs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class LoginRequest {\n    private String email;\n    private String password;\n    // getters and setters\n}\n\npublic class JwtResponse {\n    private String token;\n    public JwtResponse(String token) { this.token = token; }\n    // getter\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Authenticates user using Spring Security."}),"\n",(0,r.jsx)(n.li,{children:"Generates a JWT token on success."}),"\n",(0,r.jsx)(n.li,{children:"Sends the token in the response."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"7-secure-api-example",children:"7. Secure API Example"}),"\n",(0,r.jsx)(n.h3,{id:"usercontrollerjava",children:(0,r.jsx)(n.code,{children:"UserController.java"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/users")\npublic class UserController {\n\n    private final UserService userService;\n\n    public UserController(UserService userService) {\n        this.userService = userService;\n    }\n\n    @GetMapping("/{userId}")\n    public ResponseEntity<User> getUser(@PathVariable UUID userId,\n                                        @AuthenticationPrincipal UserDetails userDetails) {\n        if (userDetails == null) {\n            return ResponseEntity.status(403).build();\n        }\n\n        return ResponseEntity.ok(userService.getUserById(userId));\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"@AuthenticationPrincipal"})," to access the current authenticated user."]}),"\n",(0,r.jsx)(n.li,{children:"Only allows access if a valid JWT is provided."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"test-your-api",children:"Test Your API"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Send ",(0,r.jsx)(n.code,{children:"POST /api/auth/login"})," with valid credentials:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "email": "user@example.com",\n  "password": "secret123"\n}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Copy the returned token and include it as:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Authorization: Bearer <token>\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:["Call secured endpoints like ",(0,r.jsx)(n.code,{children:"GET /api/users/{id}"})," with the token in headers."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"With these steps, you've built a fully functional JWT authentication system in Spring Boot with:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Secure login"}),"\n",(0,r.jsx)(n.li,{children:"Stateless API"}),"\n",(0,r.jsx)(n.li,{children:"Token-based authorization"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},6800:e=>{e.exports=JSON.parse('{"permalink":"/my-blogs/blog/spring-security-intergration","source":"@site/blog/2025-04-03-spring-security-integration/index.md","title":"Spring Boot JWT Authentication with Spring Security \u2014 Complete Step-by-Step Guide","description":"In this tutorial, we\'ll walk through how to build a secure JWT authentication system using Spring Boot, Spring Security, and the jjwt library. We\'ll cover everything from login to securing routes using JWTs \u2014 all with full code examples and explanations.","date":"2025-04-03T00:00:00.000Z","tags":[{"inline":false,"label":"Spring Boot","permalink":"/my-blogs/blog/tags/springboot","description":"Spring Boot"},{"inline":false,"label":"JWT Authentication","permalink":"/my-blogs/blog/tags/jwt-authentication","description":"JSON Web Token (JWT) Authentication in Spring Boot"},{"inline":false,"label":"Spring Security","permalink":"/my-blogs/blog/tags/spring-security","description":"Secure your applications using Spring Security"},{"inline":false,"label":"REST API Security","permalink":"/my-blogs/blog/tags/rest-api-security","description":"Best practices for securing REST APIs"}],"readingTime":4.155,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"spring-security-intergration","title":"Spring Boot JWT Authentication with Spring Security \u2014 Complete Step-by-Step Guide","authors":["sahil"],"tags":["springboot","jwt-authentication","spring-security","rest-api-security"]},"unlisted":false,"prevItem":{"title":"Configuring JWT Authorization in Swagger UI with Spring Boot","permalink":"/my-blogs/blog/configuring-jwt-authorization-swagger-ui"},"nextItem":{"title":"Step-by-Step Guide to Implementing IdP-Initiated SSO SAML Integration","permalink":"/my-blogs/blog/sso-saml-intergration-steos"}}')},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);