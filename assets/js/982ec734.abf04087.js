"use strict";(self.webpackChunkmy_blogs=self.webpackChunkmy_blogs||[]).push([[2064],{923:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"publishing-npm-package-vite","metadata":{"permalink":"/my-blogs/blog/publishing-npm-package-vite","source":"@site/blog/2025-04-13-publishing-npm-package/index.md","title":"Creating a Customizable React Component Library with Vite and Pure CSS","description":"Building a reusable React component library can streamline UI development across multiple projects. In this blog, we\'ll create a customizable React component library using:","date":"2025-04-13T00:00:00.000Z","tags":[{"inline":false,"label":"NPM","permalink":"/my-blogs/blog/tags/npm","description":"The package manager for JavaScript, used to share and install open-source libraries and tools."},{"inline":false,"label":"React","permalink":"/my-blogs/blog/tags/react","description":"React"},{"inline":false,"label":"JavaScript","permalink":"/my-blogs/blog/tags/javascript","description":"The core programming language of the web, used to build dynamic and interactive experiences."},{"inline":false,"label":"Vite","permalink":"/my-blogs/blog/tags/vite","description":"Vite"}],"readingTime":2.63,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"publishing-npm-package-vite","title":"Creating a Customizable React Component Library with Vite and Pure CSS","authors":["sahil"],"tags":["npm","react","javascript","vite"]},"unlisted":false,"nextItem":{"title":"How to Use `npm link` to Test NPM Packages Locally Before Publishing","permalink":"/my-blogs/blog/testing-npm-package"}},"content":"Building a reusable React component library can streamline UI development across multiple projects. In this blog, we\'ll create a **customizable React component library** using:\\r\\n\\r\\n- **Vite** (for fast builds)\\r\\n- **Pure CSS** (for styling)\\r\\n- **CSS Modules** (for scoped styles)\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Step 1: Project Setup\\r\\n\\r\\n### 1. Initialize the Project\\r\\n```bash\\r\\nmkdir react-component-library  \\r\\ncd react-component-library  \\r\\nnpm init -y  \\r\\n```\\r\\n\\r\\n### 2. Install Dependencies\\r\\n```bash\\r\\nnpm install react react-dom  \\r\\nnpm install vite @vitejs/plugin-react --save-dev  \\r\\n```\\r\\n\\r\\n### 3. Configure Vite (`vite.config.js`)\\r\\n```javascript\\r\\nimport { defineConfig } from \'vite\';\\r\\nimport react from \'@vitejs/plugin-react\';\\r\\n\\r\\nexport default defineConfig({\\r\\n    plugins: [react({\\r\\n        include: \'**/*.{jsx,tsx}\',\\r\\n    })],\\r\\n    build: {\\r\\n        lib: {\\r\\n            entry: \'src/index.js\',\\r\\n            name: \'ReactComponentLibrary\',\\r\\n            fileName: (format) => `react-component-library.${format}.js`,\\r\\n            formats: [\'es\']\\r\\n        },\\r\\n        rollupOptions: {\\r\\n            external: [\'react\', \'react-dom\'],\\r\\n            output: {\\r\\n                globals: {\\r\\n                    react: \'React\',\\r\\n                    \'react-dom\': \'ReactDOM\'\\r\\n                }\\r\\n            }\\r\\n        },\\r\\n        cssCodeSplit: false\\r\\n    }\\r\\n});\\r\\n```\\r\\n\\r\\n## Step 2: Create a Reusable Button Component\\r\\n\\r\\n### 1. Folder Structure\\r\\n```\\r\\nsrc/\\r\\n\u251c\u2500\u2500 components/\\r\\n\u2502   \u251c\u2500\u2500 Button/\\r\\n\u2502   \u2502   \u251c\u2500\u2500 Button.jsx\\r\\n\u2502   \u2502   \u251c\u2500\u2500 Button.module.css\\r\\n\u2502   \u2502   \u2514\u2500\u2500 index.js\\r\\n\u2502   \u2514\u2500\u2500 index.js\\r\\n\u2514\u2500\u2500 index.js\\r\\n```\\r\\n\\r\\n### 2. Button Component (`Button.jsx`)\\r\\n```jsx\\r\\nimport React from \\"react\\";\\r\\nimport styles from \\"./Button.module.css\\";\\r\\n\\r\\nconst Button = ({\\r\\n                    children,\\r\\n                    variant = \\"primary\\",\\r\\n                    size = \\"medium\\",\\r\\n                    onClick,\\r\\n                    className = \\"\\",\\r\\n                    disabled = false,\\r\\n                }) => {\\r\\n    const buttonClasses = [\\r\\n        styles.btn,\\r\\n        styles[variant],\\r\\n        styles[size],\\r\\n        disabled ? styles.disabled : \\"\\",\\r\\n        className,\\r\\n    ]\\r\\n        .filter(Boolean)\\r\\n        .join(\\" \\");\\r\\n\\r\\n    return (\\r\\n        <button className={buttonClasses} onClick={onClick} disabled={disabled}>\\r\\n            {children}\\r\\n        </button>\\r\\n    );\\r\\n};\\r\\n\\r\\nexport default Button;\\r\\n```\\r\\n\\r\\n### 3. CSS Module (`Button.module.css`)\\r\\n```css\\r\\n.btn {\\r\\n    border: none;\\r\\n    border-radius: 4px;\\r\\n    cursor: pointer;\\r\\n    font-family: inherit;\\r\\n    font-weight: 500;\\r\\n    transition: all 0.2s ease;\\r\\n    display: inline-flex;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n}\\r\\n\\r\\n/* Variants */\\r\\n.primary {\\r\\n    background-color: var(--primary-color, #4a6bff);\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n.primary:hover {\\r\\n    background-color: var(--primary-hover, #3a5bef);\\r\\n}\\r\\n\\r\\n.secondary {\\r\\n    background-color: var(--secondary-color, #f0f2f5);\\r\\n    color: var(--text-color, #333);\\r\\n}\\r\\n\\r\\n.secondary:hover {\\r\\n    background-color: var(--secondary-hover, #e0e2e5);\\r\\n}\\r\\n\\r\\n/* Sizes */\\r\\n.small {\\r\\n    padding: 6px 12px;\\r\\n    font-size: 12px;\\r\\n}\\r\\n\\r\\n.medium {\\r\\n    padding: 8px 16px;\\r\\n    font-size: 14px;\\r\\n}\\r\\n\\r\\n.large {\\r\\n    padding: 12px 24px;\\r\\n    font-size: 16px;\\r\\n}\\r\\n\\r\\n/* Disabled state */\\r\\n.disabled {\\r\\n    opacity: 0.6;\\r\\n    cursor: not-allowed;\\r\\n}\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## Step 3: Bundle & Publish to npm\\r\\n\\r\\n### 1. Export Components (`src/index.js`)\\r\\n```javascript\\r\\nexport { default as Button } from \'./components/Button\';\\r\\n```\\r\\n\\r\\n### 2. Build the Library\\r\\n```bash\\r\\nnpm run build\\r\\n```\\r\\n\\r\\n### 3. Publish to npm\\r\\n```bash\\r\\nnpm login\\r\\nnpm publish --access public\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## Step 4: Using the Library in a React App**\\r\\n\\r\\n### 1. Install the Library**\\r\\n```bash\\r\\nnpm install @sahilphondekar/react-component-library\\r\\n```\\r\\n\\r\\n### 2. Import CSS in Your Root Component\\r\\n```jsx\\r\\nimport \\"@sahilphondekar/react-component-library/dist/style.css\\";\\r\\n```\\r\\n\\r\\n### 3. Use the Button Component\\r\\n```jsx\\r\\nimport { Button } from \'@sahilphondekar/react-component-library\';\\r\\n\\r\\nfunction App() {\\r\\n  return (\\r\\n    <Button variant=\\"primary\\" size=\\"large\\" onClick={() => alert(\'Clicked!\')}>\\r\\n      Click Me\\r\\n    </Button>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n## Customization with CSS Variables\\r\\nOverride default styles in your app\'s CSS:\\r\\n```css\\r\\n:root {\\r\\n  --primary-color: #ff6b6b;\\r\\n  --primary-hover: #ff5252;\\r\\n  --secondary-color: #f8f9fa;\\r\\n}\\r\\n```\\r\\n\\r\\n## GitHub & npm Links\\r\\n- **GitHub:** [github.com/sahil-phondekar/react-component-library](https://github.com/sahil-phondekar/react-component-library)\\r\\n- **npm:** [npmjs.com/package/@sahilphondekar/react-component-library](https://www.npmjs.com/package/@sahilphondekar/react-component-library)\\r\\n\\r\\n## Conclusion\\r\\nYou\u2019ve now built a **customizable React component library** with:  \\r\\n\u2714 **Vite** for fast builds  \\r\\n\u2714 **CSS Modules** for scoped styling  \\r\\n\u2714 **npm publish** for reusability\\r\\n\\r\\nExtend it by adding more components (Card, Input, Modal) and themes! \ud83d\ude80\\r\\n\\r\\n**Happy coding!** \ud83c\udf89"},{"id":"testing-npm-package","metadata":{"permalink":"/my-blogs/blog/testing-npm-package","source":"@site/blog/2025-04-13-testing-npm-package-locally/index.md","title":"How to Use `npm link` to Test NPM Packages Locally Before Publishing","description":"When building your own NPM package (like a React component library), it\'s essential to test it in a real project before publishing to the registry. This is where npm link comes in handy.","date":"2025-04-13T00:00:00.000Z","tags":[{"inline":false,"label":"NPM","permalink":"/my-blogs/blog/tags/npm","description":"The package manager for JavaScript, used to share and install open-source libraries and tools."},{"inline":false,"label":"React","permalink":"/my-blogs/blog/tags/react","description":"React"},{"inline":false,"label":"JavaScript","permalink":"/my-blogs/blog/tags/javascript","description":"The core programming language of the web, used to build dynamic and interactive experiences."},{"inline":false,"label":"Vite","permalink":"/my-blogs/blog/tags/vite","description":"Vite"}],"readingTime":1.345,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"testing-npm-package","title":"How to Use `npm link` to Test NPM Packages Locally Before Publishing","authors":["sahil"],"tags":["npm","react","javascript","vite"]},"unlisted":false,"prevItem":{"title":"Creating a Customizable React Component Library with Vite and Pure CSS","permalink":"/my-blogs/blog/publishing-npm-package-vite"},"nextItem":{"title":"Build and Publish a Custom React + Tailwind CSS Component Library (with Webpack & Babel)","permalink":"/my-blogs/blog/publishing-npm-package"}},"content":"When building your own NPM package (like a React component library), it\'s essential to test it *in a real project* before publishing to the registry. This is where `npm link` comes in handy.\\r\\n\\r\\nIn this post, we\u2019ll walk through how to use `npm link` to test your local package in another project.\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## What is `npm link`?\\r\\n\\r\\n`npm link` creates a **symbolic link** between your local NPM package and another project. It allows your test app to use your local package as if it were installed from the registry.\\r\\n\\r\\n## Step-by-Step Guide\\r\\n\\r\\n### 1. Go to Your Package Directory\\r\\n\\r\\n```bash\\r\\ncd ~/Projects/my-component-library\\r\\n```\\r\\n\\r\\nRun the following to make it globally available:\\r\\n\\r\\n```bash\\r\\nnpm link\\r\\n```\\r\\n\\r\\n> This registers your package globally on your machine.\\r\\n\\r\\n### 2. Go to Your Test Project\\r\\n\\r\\nNow, open your test project (where you want to use your library):\\r\\n\\r\\n```bash\\r\\ncd ~/Projects/my-app\\r\\n```\\r\\n\\r\\nLink the package:\\r\\n\\r\\n```bash\\r\\nnpm link my-component-library\\r\\n```\\r\\n\\r\\nThis creates a symbolic link from `node_modules/my-component-library` to your local package source folder.\\r\\n\\r\\n### 3. Use the Package in Your App\\r\\n\\r\\nNow you can use your package in the test app just like any other dependency:\\r\\n\\r\\n```js\\r\\nimport { Button } from \\"my-component-library\\";\\r\\n\\r\\nfunction App() {\\r\\n  return <Button>Test Button</Button>;\\r\\n}\\r\\n```\\r\\n\\r\\n## Unlinking Later\\r\\n\\r\\nWhen you\'re done testing, clean up the link:\\r\\n\\r\\n```bash\\r\\ncd ~/Projects/my-app\\r\\nnpm unlink my-component-library\\r\\n```\\r\\n\\r\\nThen globally remove the link:\\r\\n\\r\\n```bash\\r\\ncd ~/Projects/my-component-library\\r\\nnpm unlink\\r\\n```\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nUsing `npm link` is an efficient way to test your NPM packages locally. It mimics the install process while allowing rapid development and testing without publishing to the registry."},{"id":"publishing-npm-package","metadata":{"permalink":"/my-blogs/blog/publishing-npm-package","source":"@site/blog/2025-04-12-publishing-npm-package/index.md","title":"Build and Publish a Custom React + Tailwind CSS Component Library (with Webpack & Babel)","description":"If you\u2019ve ever wanted to build your own reusable React component library with Tailwind CSS, but didn\u2019t want the overhead of TypeScript or complex setups\u2014this post is for you!","date":"2025-04-12T00:00:00.000Z","tags":[{"inline":false,"label":"NPM","permalink":"/my-blogs/blog/tags/npm","description":"The package manager for JavaScript, used to share and install open-source libraries and tools."},{"inline":false,"label":"React","permalink":"/my-blogs/blog/tags/react","description":"React"},{"inline":false,"label":"JavaScript","permalink":"/my-blogs/blog/tags/javascript","description":"The core programming language of the web, used to build dynamic and interactive experiences."},{"inline":false,"label":"Babel","permalink":"/my-blogs/blog/tags/babel","description":"A JavaScript compiler that lets you use the latest features and syntax in older environments."},{"inline":false,"label":"Webpack","permalink":"/my-blogs/blog/tags/webpack","description":"A powerful module bundler for JavaScript applications, used to bundle and optimize frontend code."}],"readingTime":2.875,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"publishing-npm-package","title":"Build and Publish a Custom React + Tailwind CSS Component Library (with Webpack & Babel)","authors":["sahil"],"tags":["npm","react","javascript","babel","webpack"]},"unlisted":false,"prevItem":{"title":"How to Use `npm link` to Test NPM Packages Locally Before Publishing","permalink":"/my-blogs/blog/testing-npm-package"},"nextItem":{"title":"Configuring JWT Authorization in Swagger UI with Spring Boot","permalink":"/my-blogs/blog/configuring-jwt-authorization-swagger-ui"}},"content":"If you\u2019ve ever wanted to build your **own reusable React component library** with **Tailwind CSS**, but didn\u2019t want the overhead of TypeScript or complex setups\u2014this post is for you!\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\nIn this guide, we\u2019ll build a **simple, fully customizable component library** using:\\r\\n\\r\\n- **JavaScript**\\r\\n- **Tailwind CSS 3**\\r\\n- **Webpack + Babel**\\r\\n- **Ready to publish to npm**\\r\\n\\r\\nWe\'ll even create a sample `Typography` component to get started.\\r\\n\\r\\n---\\r\\n\\r\\n## Goal\\r\\n\\r\\nWe\u2019re going to build a package like:\\r\\n\\r\\n```\\r\\n@sahilphondekar/react-tailwind-library\\r\\n```\\r\\n\\r\\nReady to use in any React app with:\\r\\n\\r\\n```bash\\r\\nnpm install @sahilphondekar/react-tailwind-library\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## Final Folder Structure\\r\\n\\r\\nHere\u2019s a sneak peek of what we\u2019ll end up with:\\r\\n\\r\\n```\\r\\nreact-tailwind-library/\\r\\n\u251c\u2500\u2500 dist/\\r\\n\u251c\u2500\u2500 src/\\r\\n\u2502   \u251c\u2500\u2500 components/\\r\\n\u2502   \u2502   \u2514\u2500\u2500 Typography/\\r\\n\u2502   \u2502       \u251c\u2500\u2500 Typography.jsx\\r\\n\u2502   \u2502       \u2514\u2500\u2500 index.js\\r\\n\u2502   \u251c\u2500\u2500 index.js\\r\\n\u2502   \u2514\u2500\u2500 styles/\\r\\n\u2502       \u2514\u2500\u2500 tailwind.css\\r\\n\u251c\u2500\u2500 .babelrc\\r\\n\u251c\u2500\u2500 .gitignore\\r\\n\u251c\u2500\u2500 package.json\\r\\n\u251c\u2500\u2500 postcss.config.js\\r\\n\u251c\u2500\u2500 tailwind.config.js\\r\\n\u251c\u2500\u2500 webpack.config.js\\r\\n\u2514\u2500\u2500 README.md\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## \ud83d\udd27 Step 1: Initialize the Project\\r\\n\\r\\n```bash\\r\\nmkdir react-tailwind-library\\r\\ncd react-tailwind-library\\r\\nnpm init -y\\r\\n```\\r\\n\\r\\nEdit your `package.json`:\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"name\\": \\"@sahilphondekar/react-tailwind-library\\",\\r\\n  \\"main\\": \\"dist/index.js\\",\\r\\n  \\"peerDependencies\\": {\\r\\n    \\"react\\": \\">=16.8.0\\",\\r\\n    \\"react-dom\\": \\">=16.8.0\\"\\r\\n  },\\r\\n  \\"scripts\\": {\\r\\n    \\"build\\": \\"webpack\\"\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## Step 2: Install Dependencies\\r\\n\\r\\n### Runtime Dependencies\\r\\n\\r\\n```bash\\r\\nnpm install react react-dom\\r\\n```\\r\\n\\r\\n### Dev + Build Tools\\r\\n\\r\\n```bash\\r\\nnpm install -D webpack webpack-cli babel-loader \\\\\\r\\n@babel/core @babel/preset-env @babel/preset-react \\\\\\r\\ntailwindcss@3 postcss postcss-loader autoprefixer \\\\\\r\\ncss-loader style-loader\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## Step 3: Babel Setup\\r\\n\\r\\nCreate a `.babelrc` file:\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"presets\\": [\\"@babel/preset-env\\", \\"@babel/preset-react\\"]\\r\\n}\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## Step 4: Webpack Config\\r\\n\\r\\nCreate a `webpack.config.js`:\\r\\n\\r\\n```js\\r\\nconst path = require(\\"path\\");\\r\\n\\r\\nmodule.exports = {\\r\\n  mode: \\"production\\",\\r\\n  entry: \\"./src/index.js\\",\\r\\n  output: {\\r\\n    path: path.resolve(__dirname, \\"dist\\"),\\r\\n    filename: \\"index.js\\",\\r\\n    library: \\"@sahilphondekar/react-tailwind-library\\",\\r\\n    libraryTarget: \\"umd\\",\\r\\n    clean: true,\\r\\n  },\\r\\n  externals: {\\r\\n    react: \\"react\\",\\r\\n    \\"react-dom\\": \\"react-dom\\"\\r\\n  },\\r\\n  module: {\\r\\n    rules: [\\r\\n      {\\r\\n        test: /\\\\.jsx?$/,\\r\\n        exclude: /node_modules/,\\r\\n        use: \\"babel-loader\\"\\r\\n      },\\r\\n      {\\r\\n        test: /\\\\.css$/,\\r\\n        use: [\\"style-loader\\", \\"css-loader\\", \\"postcss-loader\\"]\\r\\n      }\\r\\n    ]\\r\\n  },\\r\\n  resolve: {\\r\\n    extensions: [\\".js\\", \\".jsx\\"]\\r\\n  }\\r\\n};\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## Step 5: Tailwind CSS Setup\\r\\n\\r\\nInitialize Tailwind:\\r\\n\\r\\n```bash\\r\\nnpx tailwindcss init\\r\\n```\\r\\n\\r\\n### `tailwind.config.js`\\r\\n\\r\\n```js\\r\\nmodule.exports = {\\r\\n  content: [\\"./src/**/*.{js,jsx}\\"],\\r\\n  theme: {\\r\\n    extend: {},\\r\\n  },\\r\\n  plugins: [],\\r\\n};\\r\\n```\\r\\n\\r\\n### `postcss.config.js`\\r\\n\\r\\n```js\\r\\nmodule.exports = {\\r\\n  plugins: {\\r\\n    tailwindcss: {},\\r\\n    autoprefixer: {},\\r\\n  },\\r\\n};\\r\\n```\\r\\n\\r\\n### `src/styles/tailwind.css`\\r\\n\\r\\n```css\\r\\n@tailwind base;\\r\\n@tailwind components;\\r\\n@tailwind utilities;\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## Step 6: Create the Typography Component\\r\\n\\r\\n### `src/components/Typography/Typography.jsx`\\r\\n\\r\\n```jsx\\r\\nimport React from \\"react\\";\\r\\nimport \\"../../styles/tailwind.css\\";\\r\\n\\r\\nconst Typography = ({ variant = \\"body\\", children, className = \\"\\" }) => {\\r\\n  const styles = {\\r\\n    h1: \\"text-4xl font-bold\\",\\r\\n    h2: \\"text-3xl font-semibold\\",\\r\\n    h3: \\"text-2xl font-semibold\\",\\r\\n    h4: \\"text-xl font-medium\\",\\r\\n    h5: \\"text-lg font-medium\\",\\r\\n    h6: \\"text-base font-medium\\",\\r\\n    body: \\"text-base\\",\\r\\n    caption: \\"text-sm text-gray-500\\",\\r\\n  };\\r\\n\\r\\n  const Tag = [\\"h1\\", \\"h2\\", \\"h3\\", \\"h4\\", \\"h5\\", \\"h6\\"].includes(variant)\\r\\n    ? variant\\r\\n    : \\"p\\";\\r\\n\\r\\n  return <Tag className={`${styles[variant]} ${className}`}>{children}</Tag>;\\r\\n};\\r\\n\\r\\nexport default Typography;\\r\\n```\\r\\n\\r\\n### `src/components/Typography/index.js`\\r\\n\\r\\n```js\\r\\nexport { default } from \\"./Typography\\";\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## Step 7: Entry Point\\r\\n\\r\\n### `src/index.js`\\r\\n\\r\\n```js\\r\\nimport Typography from \\"./components/Typography\\";\\r\\n\\r\\nexport { Typography };\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## Step 8: Build & Publish\\r\\n\\r\\n### Build the package\\r\\n\\r\\n```bash\\r\\nnpm run build\\r\\n```\\r\\n\\r\\n### Publish to npm\\r\\n\\r\\n```bash\\r\\nnpm publish --access public\\r\\n```\\r\\n\\r\\n> Make sure you\u2019re logged into npm with `npm login` and have a unique package name.\\r\\n\\r\\n---\\r\\n\\r\\n## Step 9: Test it in a React App\\r\\n\\r\\nInstall the package:\\r\\n\\r\\n```bash\\r\\nnpm install @sahilphondekar/react-tailwind-library\\r\\n```\\r\\n\\r\\nUse it:\\r\\n\\r\\n```jsx\\r\\nimport { Typography } from \\"@sahilphondekar/react-tailwind-library\\";\\r\\n\\r\\nexport default function App() {\\r\\n  return (\\r\\n    <div>\\r\\n      <Typography variant=\\"h1\\">Hello UI Kit!</Typography>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```"},{"id":"configuring-jwt-authorization-swagger-ui","metadata":{"permalink":"/my-blogs/blog/configuring-jwt-authorization-swagger-ui","source":"@site/blog/2025-04-04-spring-security-swagger-integration/index.md","title":"Configuring JWT Authorization in Swagger UI with Spring Boot","description":"In a secure REST API, it\'s important to authenticate requests \u2014 especially when using JWT tokens. When integrating Swagger UI using springdoc-openapi, we can also configure it to include a JWT Authorization header so developers can test secured endpoints easily.","date":"2025-04-04T00:00:00.000Z","tags":[{"inline":false,"label":"Spring Boot","permalink":"/my-blogs/blog/tags/springboot","description":"Spring Boot"},{"inline":false,"label":"Swagger","permalink":"/my-blogs/blog/tags/swagger","description":"API documentation with Swagger UI"},{"inline":false,"label":"JWT Authentication","permalink":"/my-blogs/blog/tags/jwt-authentication","description":"JSON Web Token (JWT) Authentication in Spring Boot"},{"inline":false,"label":"Spring Security","permalink":"/my-blogs/blog/tags/spring-security","description":"Secure your applications using Spring Security"}],"readingTime":2.39,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"configuring-jwt-authorization-swagger-ui","title":"Configuring JWT Authorization in Swagger UI with Spring Boot","authors":["sahil"],"tags":["springboot","swagger","jwt-authentication","spring-security"]},"unlisted":false,"prevItem":{"title":"Build and Publish a Custom React + Tailwind CSS Component Library (with Webpack & Babel)","permalink":"/my-blogs/blog/publishing-npm-package"},"nextItem":{"title":"Spring Boot JWT Authentication with Spring Security \u2014 Complete Step-by-Step Guide","permalink":"/my-blogs/blog/spring-security-intergration"}},"content":"In a secure REST API, it\'s important to authenticate requests \u2014 especially when using **JWT tokens**. When integrating Swagger UI using `springdoc-openapi`, we can also configure it to include a **JWT Authorization header** so developers can test secured endpoints easily.\\n\\nIn this tutorial, we\u2019ll walk through how to configure **JWT Bearer Authorization in Swagger UI** step by step.\\n\x3c!-- truncate --\x3e\\n\\n## Prerequisites\\n\\nYou should have a working Spring Boot application secured with **Spring Security** and **JWT authentication** already implemented.\\n\\n## Step 1: Add Swagger/OpenAPI Dependency\\n\\nAdd the `springdoc-openapi` dependency to your `pom.xml`:\\n\\n```xml\\n<dependency>\\n    <groupId>org.springdoc</groupId>\\n    <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\\n    <version>2.8.6</version>\\n</dependency>\\n```\\n\\nThis enables auto-generation of OpenAPI docs and the Swagger UI at `/swagger-ui.html`.\\n\\n## Step 2: Create Swagger Configuration Class\\n\\nThe configuration file tells Swagger to use the **JWT Bearer** scheme for authorization.\\n\\n### `SwaggerConfig.java`\\n\\n```java\\npackage com.example.pharmacy_management_server.config;\\n\\nimport io.swagger.v3.oas.annotations.enums.SecuritySchemeType;\\nimport io.swagger.v3.oas.annotations.security.SecurityScheme;\\nimport org.springdoc.core.models.GroupedOpenApi;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\n\\n// Define a security scheme for JWT Authorization in Swagger\\n@SecurityScheme(\\n    name = \\"Authorization\\",                // Name used in @SecurityRequirement\\n    type = SecuritySchemeType.HTTP,       // HTTP auth type\\n    bearerFormat = \\"JWT\\",                 // Indicate it\'s a JWT token\\n    scheme = \\"bearer\\"                     // Use the bearer authentication scheme\\n)\\n@Configuration\\npublic class SwaggerConfig {\\n\\n    // Group all APIs under \\"public\\" and expose all routes\\n    @Bean\\n    public GroupedOpenApi publicApi() {\\n        return GroupedOpenApi.builder()\\n                .group(\\"public\\")\\n                .pathsToMatch(\\"/**\\")\\n                .build();\\n    }\\n}\\n```\\n\\n## Step 3: Secure Specific Endpoints\\n\\nNow, for any endpoint you want to protect with JWT and require users to authorize via Swagger UI, annotate the controller method or class with `@SecurityRequirement`.\\n\\n### Example: UserController\\n\\n```java\\npackage com.example.pharmacy_management_server.controller;\\n\\nimport com.example.pharmacy_management_server.model.User;\\nimport com.example.pharmacy_management_server.service.UserService;\\nimport io.swagger.v3.oas.annotations.security.SecurityRequirement;\\nimport org.springframework.http.ResponseEntity;\\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\\nimport org.springframework.security.core.userdetails.UserDetails;\\nimport org.springframework.web.bind.annotation.*;\\n\\nimport java.util.UUID;\\n\\n@RestController\\n@RequestMapping(\\"/api/users\\")\\npublic class UserController {\\n\\n    private final UserService userService;\\n\\n    public UserController(UserService userService) {\\n        this.userService = userService;\\n    }\\n\\n    // Secure this endpoint with JWT token in Swagger UI\\n    @SecurityRequirement(name = \\"Authorization\\")\\n    @GetMapping(\\"/{userId}\\")\\n    public ResponseEntity<User> getUserById(\\n            @PathVariable UUID userId,\\n            @AuthenticationPrincipal UserDetails userDetails\\n    ) {\\n        if (userDetails == null) {\\n            return ResponseEntity.status(403).build();\\n        }\\n\\n        User user = userService.getUserById(userId);\\n        return ResponseEntity.ok(user);\\n    }\\n}\\n```\\n\\n**Explanation:**\\n\\n- `@SecurityRequirement(name = \\"Authorization\\")`:  \\n  This tells Swagger that this endpoint requires a JWT token using the `\\"Authorization\\"` scheme defined earlier.\\n\\n- When users try this endpoint from Swagger UI, they will see an **Authorize** button. Once they enter their token (e.g., `Bearer eyJhbGciOi...`), Swagger will include it in the `Authorization` header for all secured endpoints.\\n\\n## Step 4: Testing in Swagger UI\\n\\nOnce everything is set up:\\n\\n1. Go to: `http://localhost:8080/swagger-ui.html`  \\n2. Click the **Authorize** button at the top-right     \\n![Swagger](./swagger.png)   \\n3. Enter your JWT token:  \\n   ```\\n   Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\\n   ```\\n4. Try calling secured endpoints \u2014 the `Authorization` header will now be automatically included.\\n\\n## Conclusion\\n\\nAdding JWT authorization to Swagger UI helps you test your secure endpoints without using external tools like Postman. By defining the security scheme and annotating secured endpoints properly, you can integrate token-based authentication smoothly into the developer experience."},{"id":"spring-security-intergration","metadata":{"permalink":"/my-blogs/blog/spring-security-intergration","source":"@site/blog/2025-04-03-spring-security-integration/index.md","title":"Spring Boot JWT Authentication with Spring Security \u2014 Complete Step-by-Step Guide","description":"In this tutorial, we\'ll walk through how to build a secure JWT authentication system using Spring Boot, Spring Security, and the jjwt library. We\'ll cover everything from login to securing routes using JWTs \u2014 all with full code examples and explanations.","date":"2025-04-03T00:00:00.000Z","tags":[{"inline":false,"label":"Spring Boot","permalink":"/my-blogs/blog/tags/springboot","description":"Spring Boot"},{"inline":false,"label":"JWT Authentication","permalink":"/my-blogs/blog/tags/jwt-authentication","description":"JSON Web Token (JWT) Authentication in Spring Boot"},{"inline":false,"label":"Spring Security","permalink":"/my-blogs/blog/tags/spring-security","description":"Secure your applications using Spring Security"},{"inline":false,"label":"REST API Security","permalink":"/my-blogs/blog/tags/rest-api-security","description":"Best practices for securing REST APIs"}],"readingTime":4.155,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"spring-security-intergration","title":"Spring Boot JWT Authentication with Spring Security \u2014 Complete Step-by-Step Guide","authors":["sahil"],"tags":["springboot","jwt-authentication","spring-security","rest-api-security"]},"unlisted":false,"prevItem":{"title":"Configuring JWT Authorization in Swagger UI with Spring Boot","permalink":"/my-blogs/blog/configuring-jwt-authorization-swagger-ui"},"nextItem":{"title":"Step-by-Step Guide to Implementing IdP-Initiated SSO SAML Integration","permalink":"/my-blogs/blog/sso-saml-intergration-steos"}},"content":"In this tutorial, we\'ll walk through how to build a **secure JWT authentication system** using **Spring Boot**, **Spring Security**, and the **`jjwt`** library. We\'ll cover everything from login to securing routes using JWTs \u2014 all with full code examples and explanations.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Tech Stack\\n\\n- Spring Boot `3.4.4`\\n- Spring Security\\n- jjwt (`0.12.6`)\\n- Maven\\n- Java 17+\\n\\n## 1. Add Maven Dependencies\\n\\nAdd the following dependencies to your `pom.xml`:\\n\\n```xml\\n\x3c!-- JWT dependencies --\x3e\\n<dependency>\\n    <groupId>io.jsonwebtoken</groupId>\\n    <artifactId>jjwt-api</artifactId>\\n    <version>0.12.6</version>\\n</dependency>\\n<dependency>\\n    <groupId>io.jsonwebtoken</groupId>\\n    <artifactId>jjwt-impl</artifactId>\\n    <version>0.12.6</version>\\n    <scope>runtime</scope>\\n</dependency>\\n<dependency>\\n    <groupId>io.jsonwebtoken</groupId>\\n    <artifactId>jjwt-jackson</artifactId>\\n    <version>0.12.6</version>\\n    <scope>runtime</scope>\\n</dependency>\\n\\n\x3c!-- Spring Security --\x3e\\n<dependency>\\n    <groupId>org.springframework.boot</groupId>\\n    <artifactId>spring-boot-starter-security</artifactId>\\n    <version>3.4.4</version>\\n</dependency>\\n```\\n\\n**Explanation**: These dependencies bring in support for Spring Security and the `jjwt` (Java JWT) library to help us create and validate tokens.\\n\\n## 2. JWT Utility Class\\n\\n### `JwtUtil.java`\\n\\n```java\\n@Component\\npublic class JwtUtil {\\n\\n    @Value(\\"${jwt.secret}\\")\\n    private String secretKey;\\n\\n    @Value(\\"${jwt.expiration}\\")\\n    private long jwtExpirationMs;\\n\\n    public String generateToken(String email) {\\n        return Jwts.builder()\\n                .subject(email)\\n                .issuedAt(new Date())\\n                .expiration(new Date(System.currentTimeMillis() + jwtExpirationMs))\\n                .signWith(getSigningKey())\\n                .compact();\\n    }\\n\\n    public String extractEmail(String token) {\\n        return Jwts.parser()\\n                .verifyWith(getSigningKey())\\n                .build()\\n                .parseSignedClaims(token)\\n                .getPayload()\\n                .getSubject();\\n    }\\n\\n    public boolean validateToken(String token) {\\n        try {\\n            Jwts.parser()\\n                .verifyWith(getSigningKey())\\n                .build()\\n                .parseSignedClaims(token);\\n            return true;\\n        } catch (Exception e) {\\n            return false;\\n        }\\n    }\\n\\n    private SecretKey getSigningKey() {\\n        return Keys.hmacShaKeyFor(secretKey.getBytes());\\n    }\\n\\n    public String extractToken(HttpServletRequest request) {\\n        String bearer = request.getHeader(\\"Authorization\\");\\n        return (bearer != null && bearer.startsWith(\\"Bearer \\")) ? bearer.substring(7) : null;\\n    }\\n}\\n```\\n\\n**Explanation**:\\n- `generateToken()`: creates a JWT using the user\'s email.\\n- `extractEmail()`: reads the email back from a token.\\n- `validateToken()`: verifies the token\u2019s integrity.\\n- `getSigningKey()`: uses your configured secret to create a secure signing key.\\n\\n\ud83d\udee0\ufe0f Add to `application.properties`:\\n```properties\\njwt.secret=your-256-bit-secret-value-here\\njwt.expiration=3600000\\n```\\n\\n## 3. JWT Filter\\n\\n### `JwtAuthenticationFilter.java`\\n\\n```java\\n@Component\\npublic class JwtAuthenticationFilter extends OncePerRequestFilter {\\n\\n    private final JwtUtil jwtUtil;\\n    private final UserDetailsService userDetailsService;\\n\\n    public JwtAuthenticationFilter(JwtUtil jwtUtil, UserDetailsService userDetailsService) {\\n        this.jwtUtil = jwtUtil;\\n        this.userDetailsService = userDetailsService;\\n    }\\n\\n    @Override\\n    protected void doFilterInternal(HttpServletRequest request,\\n                                    HttpServletResponse response,\\n                                    FilterChain filterChain) throws ServletException, IOException {\\n\\n        String token = jwtUtil.extractToken(request);\\n\\n        if (token != null && jwtUtil.validateToken(token)) {\\n            String email = jwtUtil.extractEmail(token);\\n            UserDetails userDetails = userDetailsService.loadUserByUsername(email);\\n\\n            UsernamePasswordAuthenticationToken authToken =\\n                new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());\\n\\n            SecurityContextHolder.getContext().setAuthentication(authToken);\\n        }\\n\\n        filterChain.doFilter(request, response);\\n    }\\n}\\n```\\n\\n**Explanation**:\\n- This filter intercepts every request.\\n- It checks for a JWT in the `Authorization` header.\\n- If valid, it loads the user and sets the authentication in Spring Security\'s context.\\n\\n## 4. Custom UserDetailsService\\n\\n### `UserDetailsServiceImpl.java`\\n\\n```java\\n@Service\\npublic class UserDetailsServiceImpl implements UserDetailsService {\\n\\n    private final UserRepository userRepository;\\n\\n    public UserDetailsServiceImpl(UserRepository userRepository) {\\n        this.userRepository = userRepository;\\n    }\\n\\n    @Override\\n    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {\\n        User user = userRepository.findByEmail(email)\\n            .orElseThrow(() -> new UsernameNotFoundException(\\"User not found with email: \\" + email));\\n\\n        return org.springframework.security.core.userdetails.User.builder()\\n                .username(user.getEmail())\\n                .password(user.getPasswordHash())\\n                .roles(user.getRole().name())\\n                .build();\\n    }\\n}\\n```\\n\\n**Explanation**:\\n- Loads the user from the database using the email address.\\n- Converts your custom `User` entity to Spring Security\u2019s `UserDetails`.\\n\\n## 5. Spring Security Configuration\\n\\n### `SecurityConfig.java`\\n\\n```java\\n@Configuration\\npublic class SecurityConfig {\\n\\n    private final JwtAuthenticationFilter jwtAuthenticationFilter;\\n\\n    public SecurityConfig(JwtAuthenticationFilter jwtAuthenticationFilter) {\\n        this.jwtAuthenticationFilter = jwtAuthenticationFilter;\\n    }\\n\\n    @Bean\\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\\n        http.csrf(csrf -> csrf.disable())\\n            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\\n            .authorizeHttpRequests(auth -> auth\\n                .requestMatchers(\\"/api/auth/login\\", \\"/swagger-ui/**\\", \\"/v3/api-docs/**\\").permitAll()\\n                .anyRequest().authenticated())\\n            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);\\n\\n        return http.build();\\n    }\\n\\n    @Bean\\n    public AuthenticationManager authenticationManager(UserDetailsServiceImpl userDetailsService) {\\n        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();\\n        authProvider.setUserDetailsService(userDetailsService);\\n        authProvider.setPasswordEncoder(passwordEncoder());\\n        return new ProviderManager(List.of(authProvider));\\n    }\\n\\n    @Bean\\n    public PasswordEncoder passwordEncoder() {\\n        return new BCryptPasswordEncoder();\\n    }\\n}\\n```\\n\\n**Explanation**:\\n- Disables CSRF (since we use tokens).\\n- Stateless session (no server-side session tracking).\\n- Allows unauthenticated access only to `/api/auth/login`.\\n- Adds our custom `JwtAuthenticationFilter`.\\n\\n## 6. Login Endpoint\\n\\n### `AuthController.java`\\n\\n```java\\n@RestController\\n@RequestMapping(\\"/api/auth\\")\\npublic class AuthController {\\n\\n    private final AuthenticationManager authenticationManager;\\n    private final JwtUtil jwtUtil;\\n\\n    public AuthController(AuthenticationManager authenticationManager, JwtUtil jwtUtil) {\\n        this.authenticationManager = authenticationManager;\\n        this.jwtUtil = jwtUtil;\\n    }\\n\\n    @PostMapping(\\"/login\\")\\n    public ResponseEntity<JwtResponse> login(@RequestBody LoginRequest request) {\\n        Authentication authentication = authenticationManager.authenticate(\\n                new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword()));\\n\\n        String token = jwtUtil.generateToken(request.getEmail());\\n        return ResponseEntity.ok(new JwtResponse(token));\\n    }\\n}\\n```\\n\\n### DTOs\\n\\n```java\\npublic class LoginRequest {\\n    private String email;\\n    private String password;\\n    // getters and setters\\n}\\n\\npublic class JwtResponse {\\n    private String token;\\n    public JwtResponse(String token) { this.token = token; }\\n    // getter\\n}\\n```\\n\\n**Explanation**:\\n- Authenticates user using Spring Security.\\n- Generates a JWT token on success.\\n- Sends the token in the response.\\n\\n## 7. Secure API Example\\n\\n### `UserController.java`\\n\\n```java\\n@RestController\\n@RequestMapping(\\"/api/users\\")\\npublic class UserController {\\n\\n    private final UserService userService;\\n\\n    public UserController(UserService userService) {\\n        this.userService = userService;\\n    }\\n\\n    @GetMapping(\\"/{userId}\\")\\n    public ResponseEntity<User> getUser(@PathVariable UUID userId,\\n                                        @AuthenticationPrincipal UserDetails userDetails) {\\n        if (userDetails == null) {\\n            return ResponseEntity.status(403).build();\\n        }\\n\\n        return ResponseEntity.ok(userService.getUserById(userId));\\n    }\\n}\\n```\\n\\n**Explanation**:\\n- Uses `@AuthenticationPrincipal` to access the current authenticated user.\\n- Only allows access if a valid JWT is provided.\\n\\n## Test Your API\\n\\n1. Send `POST /api/auth/login` with valid credentials:\\n```json\\n{\\n  \\"email\\": \\"user@example.com\\",\\n  \\"password\\": \\"secret123\\"\\n}\\n```\\n\\n2. Copy the returned token and include it as:\\n```\\nAuthorization: Bearer <token>\\n```\\n\\n3. Call secured endpoints like `GET /api/users/{id}` with the token in headers.\\n\\n## Conclusion\\n\\nWith these steps, you\'ve built a fully functional JWT authentication system in Spring Boot with:\\n- Secure login  \\n- Stateless API  \\n- Token-based authorization"},{"id":"sso-saml-intergration-steos","metadata":{"permalink":"/my-blogs/blog/sso-saml-intergration-steos","source":"@site/blog/2023-05-01-sso-saml/index.md","title":"Step-by-Step Guide to Implementing IdP-Initiated SSO SAML Integration","description":"Single Sign-On (SSO) is a powerful authentication method that enables users to log in once and gain access to multiple applications without needing to re-enter credentials. SAML (Security Assertion Markup Language) is one of the most widely used protocols for implementing SSO.","date":"2023-05-01T00:00:00.000Z","tags":[{"inline":false,"label":"SSO","permalink":"/my-blogs/blog/tags/sso","description":"Single Sign-On (SSO)"},{"inline":false,"label":"SAML","permalink":"/my-blogs/blog/tags/saml","description":"Security Assertion Markup Language (SAML)"}],"readingTime":4.27,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"sso-saml-intergration-steos","title":"Step-by-Step Guide to Implementing IdP-Initiated SSO SAML Integration","authors":["sahil"],"tags":["sso","saml"]},"unlisted":false,"prevItem":{"title":"Spring Boot JWT Authentication with Spring Security \u2014 Complete Step-by-Step Guide","permalink":"/my-blogs/blog/spring-security-intergration"},"nextItem":{"title":"Tools I Use for Generating & Testing Valid SAML Responses","permalink":"/my-blogs/blog/sso-saml-tools"}},"content":"Single Sign-On (SSO) is a powerful authentication method that enables users to log in once and gain access to multiple applications without needing to re-enter credentials. **SAML (Security Assertion Markup Language)** is one of the most widely used protocols for implementing SSO. \\n\\n\x3c!-- truncate --\x3e\\n\\nIn this blog, we will walk through the detailed steps to implement **IdP-initiated SSO SAML integration**. This type of SSO flow is initiated by the Identity Provider (IdP) and does not require an initial authentication request from the Service Provider (SP). Instead, the IdP generates a **SAML Response** and directly redirects the user to the SP.\\n\\n\\n## Step 1: Create a Private and Public RSA Key\\n### Why Do You Need RSA Keys?\\nSAML responses must be **digitally signed** to ensure their authenticity and integrity. To do this, you need a **private key** for signing the SAML assertion and a **public key** for verification by the Service Provider.\\n\\n### How to Generate RSA Keys Using OpenSSL\\n1. **Generate a Private Key:**\\n   ```bash\\n   openssl genrsa -out private-key.pem 3072\\n   ```\\n2. **Generate the Corresponding Public Key:**\\n   ```bash\\n   openssl rsa -in private-key.pem -pubout -out public-key.pem\\n   ```\\n3. **Generate an X.509 Certificate (Optional, but recommended):**\\n   ```bash\\n   openssl req -new -x509 -key private_key.pem -out certificate.pem -days 365\\n   ```\\n   This certificate is used to verify the signature of the SAML response.\\n\\nNow you have:\\n- **Private Key (private_key.pem)** \u2013 Used to sign the SAML response.\\n- **Public Key (public_key.pem)** \u2013 Shared with the SP for verification.\\n- **Certificate (certificate.pem)** \u2013 Used by the SP to validate signatures.\\n\\n\\n## Step 2: Get the Required SAML Metadata\\nBefore generating the SAML response, you need the necessary metadata from both the IdP and SP. The key details include:\\n\\n### Identity Provider (IdP) Information\\n- **IdP Entity ID**: The unique identifier for the IdP.\\n- **Single Sign-On (SSO) URL**: The URL where the IdP sends the SAML response.\\n\\n### Service Provider (SP) Information\\n- **SP Entity ID**: The unique identifier for the SP.\\n- **SP Assertion Consumer Service (ACS) URL**: The URL where the SAML response should be sent.\\n- **Target URL**: The URL where users will be redirected after authentication.\\n- **Destination of the Response**: The expected destination in the SAML response.\\n\\nExample of metadata retrieval:\\n- If using **MockSAML**, the SP metadata can be found at:  \\n[https://mocksaml.com/api/saml/metadata](https://mocksaml.com/api/saml/metadata)\\n\\nThis metadata provides the necessary details to construct the SAML response.\\n\\n## Step 3: Share the Public Key with the SP\\nBefore the SP can validate SAML responses from the IdP, it needs access to the **public key or certificate** that was used to sign the responses.\\n\\n### How to Share the Public Key\\n1. **Provide the public key (public_key.pem) to the SP** manually or through a metadata file.\\n2. **Use an X.509 certificate (certificate.pem)** to make validation easier.\\n3. **If the SP supports metadata exchange**, provide an XML metadata file that includes the public key:\\n   \\n   ```xml\\n   <md:EntityDescriptor xmlns:md=\\"urn:oasis:names:tc:SAML:2.0:metadata\\" entityID=\\"https://idp.example.com\\">\\n       <md:IDPSSODescriptor protocolSupportEnumeration=\\"urn:oasis:names:tc:SAML:2.0:protocol\\">\\n           <md:KeyDescriptor use=\\"signing\\">\\n               <ds:KeyInfo xmlns:ds=\\"http://www.w3.org/2000/09/xmldsig#\\">\\n                   <ds:X509Data>\\n                       <ds:X509Certificate>MIIC4jCCAc...</ds:X509Certificate>\\n                   </ds:X509Data>\\n               </ds:KeyInfo>\\n           </md:KeyDescriptor>\\n       </md:IDPSSODescriptor>\\n   </md:EntityDescriptor>\\n   ```\\nThe SP will use this key to validate signatures on the SAML responses.\\n\\n## Step 4: Generate the SAML Response\\nOnce you have the metadata, it\'s time to generate the **SAML Response**.\\n\\n### Structure of a SAML Response\\nA valid **SAML Response** consists of:\\n1. **Issuer** \u2013 The IdP Entity ID.\\n2. **Assertion** \u2013 Contains authentication details, subject information, and attributes.\\n3. **Signature** \u2013 Ensures the response integrity.\\n\\n### **Example SAML Response (Before Signing)**\\n```xml\\n<samlp:Response xmlns:samlp=\\"urn:oasis:names:tc:SAML:2.0:protocol\\" \\n    Destination=\\"https://sp.example.com/sso\\" \\n    ID=\\"_12345\\" \\n    InResponseTo=\\"\\" \\n    IssueInstant=\\"2025-04-01T12:34:56Z\\" \\n    Version=\\"2.0\\">\\n    \\n    <saml:Issuer xmlns:saml=\\"urn:oasis:names:tc:SAML:2.0:assertion\\">\\n        https://idp.example.com\\n    </saml:Issuer>\\n\\n    <saml:Assertion xmlns:saml=\\"urn:oasis:names:tc:SAML:2.0:assertion\\" ID=\\"_67890\\">\\n        <saml:Subject>\\n            <saml:NameID Format=\\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\\">\\n                user@example.com\\n            </saml:NameID>\\n        </saml:Subject>\\n    </saml:Assertion>\\n\\n</samlp:Response>\\n```\\n\\n## Step 5: Sign the SAML Response\\nTo ensure the SAML response is trusted, it must be signed using the **private key**.\\n\\n### Signing the Response in Node.js\\n```javascript\\nimport { SignedXml } from \\"xml-crypto\\";\\n\\nconst sig = new SignedXml();\\nsig.signingKey = privateKey;\\nsig.addReference(\\"//*[local-name(.)=\'Assertion\']\\");\\nsig.computeSignature(samlResponse);\\n\\nconst signedSAML = sig.getSignedXml();\\n```\\n\\nNow your **SAML Response is signed** and ready to be sent.\\n\\n\\n## Step 6: Send SAML Response Using HTTP POST Binding\\nOnce the SAML response is generated and signed, it needs to be sent to the **SP Assertion Consumer Service (ACS) URL** via an **HTTP POST request**.\\n\\n### Example HTML Form for Posting SAML Response\\n```html\\n<form method=\\"POST\\" action=\\"https://sp.example.com/sso\\">\\n    <input type=\\"hidden\\" name=\\"SAMLResponse\\" value=\\"BASE64_ENCODED_SAML\\">\\n    <input type=\\"submit\\" value=\\"Login\\">\\n</form>\\n<script>\\n    document.forms[0].submit();\\n<\/script>\\n```\\nThis form automatically **redirects the user** to the SP with the SAML response.\\n\\n\\n## Conclusion\\nBy following these steps, you can successfully implement **IdP-initiated SSO using SAML**. Here\u2019s a recap:\\n1. **Generate RSA Keys** \u2013 Create private and public keys for signing SAML responses.\\n2. **Retrieve Metadata** \u2013 Get Entity IDs, ACS URL, and other details from IdP and SP.\\n3. **Share the Public Key with the SP** \u2013 Ensure the SP can verify your signed SAML responses.\\n4. **Generate SAML Response** \u2013 Construct the XML structure with authentication details.\\n5. **Sign the Response** \u2013 Use OpenSSL or xml-crypto to sign the response.\\n6. **Send via HTTP POST** \u2013 Encode and transmit the response to the SP ACS URL.\\n\\nBy using tools like **OpenSSL, SAML Tracer, and SAMLTool.com**, you can debug and validate your SAML integration efficiently."},{"id":"sso-saml-tools","metadata":{"permalink":"/my-blogs/blog/sso-saml-tools","source":"@site/blog/2023-04-30-sso-saml/index.md","title":"Tools I Use for Generating & Testing Valid SAML Responses","description":"In today\'s world of web applications, security and seamless user authentication are paramount. Single Sign-On (SSO) solutions are becoming the standard method for managing user access to multiple applications. One of the most widely adopted protocols for SSO is SAML (Security Assertion Markup Language). SAML allows for the secure exchange of authentication and authorization data between Identity Providers (IdPs) and Service Providers (SPs).","date":"2023-04-30T00:00:00.000Z","tags":[{"inline":false,"label":"SSO","permalink":"/my-blogs/blog/tags/sso","description":"Single Sign-On (SSO)"},{"inline":false,"label":"SAML","permalink":"/my-blogs/blog/tags/saml","description":"Security Assertion Markup Language (SAML)"}],"readingTime":4.55,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"sso-saml-tools","title":"Tools I Use for Generating & Testing Valid SAML Responses","authors":["sahil"],"tags":["sso","saml"]},"unlisted":false,"prevItem":{"title":"Step-by-Step Guide to Implementing IdP-Initiated SSO SAML Integration","permalink":"/my-blogs/blog/sso-saml-intergration-steos"},"nextItem":{"title":"Understanding SSO Techniques -  IdP-Initiated vs. SP-Initiated Login","permalink":"/my-blogs/blog/sso-saml-techniques"}},"content":"In today\'s world of web applications, security and seamless user authentication are paramount. Single Sign-On (SSO) solutions are becoming the standard method for managing user access to multiple applications. One of the most widely adopted protocols for SSO is **SAML** (Security Assertion Markup Language). SAML allows for the secure exchange of authentication and authorization data between Identity Providers (IdPs) and Service Providers (SPs).\\n\\n\x3c!-- truncate --\x3e\\n\\nDeveloping SSO applications and working with SAML responses requires specific tools to ensure that all aspects, from key generation to testing valid responses, are correctly implemented. In this post, I will share the essential tools I use to develop, generate, and test valid SAML responses, as well as improve the overall development process.\\n\\n## 1. OpenSSL for Windows\\n\\n### What is OpenSSL?\\n\\n**OpenSSL** is a comprehensive toolkit that implements SSL and TLS protocols. It also provides a robust suite of cryptographic functions, including the ability to generate public and private keys for encryption and digital signing. These keys are crucial for the signing and verification of SAML assertions.\\n\\n### Why Do I Use OpenSSL?\\nFor developing SSO applications, you need to generate keys (private and public) to sign and verify SAML assertions. OpenSSL allows you to generate these keys securely and manage their lifecycle.\\n\\n### How OpenSSL Helps:\\n- **Private key generation**: You can use OpenSSL to generate a private key that will sign your SAML assertions.\\n- **Public key generation**: From the private key, you can derive the corresponding public key, which will be shared with your Service Provider (SP) for verification purposes.\\n  \\n### How to Get It:\\nTo install OpenSSL on Windows, you can use the Win32/Win64 OpenSSL Installer from the official website. This installer comes with precompiled binaries, making it easy to get up and running without worrying about manual compilation.\\n\\nYou can download it from here: [Win32 OpenSSL](https://slproweb.com/products/Win32OpenSSL.html)\\n\\n---\\n\\n## 2. Generating RSA Keys with OpenSSL\\n\\n### What are RSA Keys?\\n**RSA** (Rivest-Shamir-Adleman) is an asymmetric encryption algorithm widely used for securing sensitive data, particularly in digital signatures. In the context of SSO, RSA keys are used to sign and verify SAML assertions.\\n\\n### Why Use RSA Keys for SSO?\\nSAML relies on digital signatures to ensure the authenticity of authentication data. The **private key** is used to sign the SAML assertions, while the **public key** is used by the Service Provider to verify the authenticity of the assertions.\\n\\n### Generating RSA Keys:\\nHere is where Scott Brady\'s guide comes in. His blog provides an easy-to-follow guide on how to generate RSA keys using OpenSSL.\\n\\n- **Step 1**: Generate the RSA private key.\\n    ```\\n    openssl genrsa -out private-key.pem 3072\\n    ```\\n- **Step 2**: Derive the corresponding public key from the private key.\\n    ```\\n    openssl rsa -in private-key.pem -pubout -out public-key.pem\\n    ```\\nHaving both the public and private keys is essential for generating and verifying SAML assertions.\\n\\nYou can check out the guide here: [Creating RSA Keys with OpenSSL](https://www.scottbrady.io/openssl/creating-rsa-keys-using-openssl)\\n\\n---\\n\\n## 3. SAML Tracer Chrome Extension\\n\\n### What is SAML Tracer?\\nThe **SAML Tracer** is a Chrome extension that allows you to intercept and view SAML messages exchanged between your browser and the identity or service provider.   \\n\\n![samltracer](./saml-tracer.png)\\n\\n### Why is SAML Tracer Useful?\\nSAML messages are typically passed in the background between the browser and the SSO infrastructure. As a developer, it\u2019s important to inspect these messages to ensure that everything is functioning correctly. The SAML Tracer enables you to:\\n- Capture SAML requests and responses.\\n- View the SAML assertions that are sent to and received from the IdP.\\n- Debug issues with the authentication flow by inspecting the raw SAML messages.\\n\\nWith real-time analysis, you can verify that your SSO setup is working as intended, making this tool indispensable for SAML debugging.\\n\\nYou can download it from the Chrome Web Store: [SAML Tracer](https://chromewebstore.google.com/detail/mpdajninpobndbfcldcmbpnnbhibjmch?utm_source=item-share-cb)\\n\\n---\\n\\n## 4. SAMLTool.com\\n\\n### What is SAMLTool.com?\\n[SAMLTool.com](https://www.samltool.com/) is an online suite of tools for working with SAML messages. It provides a variety of utilities to help developers manage, test, and troubleshoot SAML assertions and responses.\\n\\n### Key Features:\\n- **Decode and Encode SAML**: You can decode base64-encoded SAML assertions and encode them back for testing.\\n- **Sign and Validate SAML**: It provides tools to digitally sign and validate SAML assertions using your keys.\\n- **Generate Metadata**: SAMLTool can help generate and validate SAML metadata for both IdPs and SPs.\\n- **Encryption and Decryption**: It also allows for the encryption and decryption of SAML messages, ensuring that sensitive data remains secure during transit.\\n\\nThis tool is highly useful for:\\n- Testing the structure of your SAML assertions.\\n- Validating if the assertions are correctly signed and encrypted.\\n- Quickly debugging issues in SSO integrations.\\n\\nYou can visit SAMLTool here: [SAMLTool.com](https://www.samltool.com/)\\n\\n---\\n\\n## Conclusion\\n\\nBuilding secure and efficient Single Sign-On (SSO) systems using SAML requires the use of specialized tools. Whether you are generating RSA keys for signing assertions, inspecting SAML requests and responses, or validating your SAML responses, these tools will ensure that your SSO application works smoothly.\\n\\n- **OpenSSL** for generating and managing keys.\\n- **Scott Brady\'s Guide** for creating RSA keys using OpenSSL.\\n- **SAML Tracer** Chrome extension for intercepting and inspecting SAML messages.\\n- **SAMLTool.com** for testing and validating SAML responses.\\n\\nIncorporating these tools into your development process can significantly streamline the creation, testing, and validation of SSO applications. By ensuring the integrity and validity of your SAML responses, you can guarantee a secure and efficient user authentication experience. Happy coding!"},{"id":"sso-saml-techniques","metadata":{"permalink":"/my-blogs/blog/sso-saml-techniques","source":"@site/blog/2023-04-29-sso-saml/index.md","title":"Understanding SSO Techniques -  IdP-Initiated vs. SP-Initiated Login","description":"Single Sign-On (SSO) is a user authentication process that allows individuals to log in once and access multiple applications without needing to re-enter credentials. SAML (Security Assertion Markup Language) is one of the most widely used protocols for implementing SSO. When deploying SSO using SAML, there are two primary methods: IdP-Initiated Login and SP-Initiated Login.","date":"2023-04-29T00:00:00.000Z","tags":[{"inline":false,"label":"SSO","permalink":"/my-blogs/blog/tags/sso","description":"Single Sign-On (SSO)"},{"inline":false,"label":"SAML","permalink":"/my-blogs/blog/tags/saml","description":"Security Assertion Markup Language (SAML)"}],"readingTime":2.2,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"sso-saml-techniques","title":"Understanding SSO Techniques -  IdP-Initiated vs. SP-Initiated Login","authors":["sahil"],"tags":["sso","saml"]},"unlisted":false,"prevItem":{"title":"Tools I Use for Generating & Testing Valid SAML Responses","permalink":"/my-blogs/blog/sso-saml-tools"},"nextItem":{"title":"Understanding SSO and SAML - A Beginner\'s Guide","permalink":"/my-blogs/blog/sso-saml-basics"}},"content":"Single Sign-On (SSO) is a user authentication process that allows individuals to log in once and access multiple applications without needing to re-enter credentials. SAML (Security Assertion Markup Language) is one of the most widely used protocols for implementing SSO. When deploying SSO using SAML, there are two primary methods: **IdP-Initiated Login** and **SP-Initiated Login**.\\n\x3c!-- truncate --\x3e\\n\\n## What is IdP-Initiated Login?\\n\\nIn an IdP-Initiated login flow, the authentication process begins at the **Identity Provider (IdP)**. The steps involved are:\\n1. The user accesses the IdP\u2019s login page and enters their credentials.\\n2. The IdP verifies the credentials and generates a **SAML Response**.\\n3. The IdP sends the SAML Response directly to the **Service Provider (SP)**.\\n4. The SP processes the SAML Response, validates the signature, and logs the user in.\\n\\n**Advantages of IdP-Initiated Login:**\\n- The user can access multiple applications from a centralized portal.\\n- No need for the SP to generate an authentication request.\\n- Ideal for scenarios where the IdP controls user authentication.\\n\\n**Challenges:**\\n- SPs must trust the SAML Response without an authentication request.\\n- Security concerns if not properly implemented, as the SP does not initiate the session.\\n\\n![idp](./idp-initated.png)\\n\\n\\n## What is SP-Initiated Login?\\n\\nIn an SP-Initiated login flow, the authentication process starts at the **Service Provider (SP)**. The steps involved are:\\n1. The user tries to access a protected resource on the SP.\\n2. The SP generates a **SAML Authentication Request** and redirects the user to the IdP.\\n3. The IdP authenticates the user and generates a **SAML Response**.\\n4. The IdP redirects the user back to the SP with the SAML Response.\\n5. The SP validates the response and grants access.\\n\\n**Advantages of SP-Initiated Login:**\\n- The SP has control over when authentication should happen.\\n- Helps prevent unauthorized access since authentication requests are always initiated by the SP.\\n\\n**Challenges:**\\n- Requires additional setup and configurations on both IdP and SP.\\n- More steps compared to IdP-Initiated login, potentially causing delays.\\n\\n![sp](./idp-initated.png)\\n\\n## Which SSO Technique Should You Choose?\\n\\nChoosing between IdP-Initiated and SP-Initiated login depends on your use case:\\n- **If you need centralized authentication and access to multiple applications from a portal, use IdP-Initiated Login.**\\n- **If security and access control are crucial, and authentication should always start at the SP, use SP-Initiated Login.**\\n\\n## Final Thoughts\\n\\nBoth IdP-Initiated and SP-Initiated logins have their own advantages and limitations. Organizations should evaluate their security requirements and user experience needs when deciding which approach to implement. With proper implementation, SAML SSO enhances security, reduces login fatigue, and improves user productivity.\\n\\n## Reference\\nThis blog post is based on information from [miniOrange](https://www.miniorange.com/blog/idp-initiated-sp-initiated-login/)"},{"id":"sso-saml-basics","metadata":{"permalink":"/my-blogs/blog/sso-saml-basics","source":"@site/blog/2023-04-28-sso-saml/index.md","title":"Understanding SSO and SAML - A Beginner\'s Guide","description":"In today\u2019s digital world, managing multiple usernames and passwords for different applications can be frustrating. That\u2019s where Single Sign-On (SSO) and Security Assertion Markup Language (SAML) come in. These technologies streamline authentication, making it easier and more secure for users to access various applications with a single login.","date":"2023-04-28T00:00:00.000Z","tags":[{"inline":false,"label":"SSO","permalink":"/my-blogs/blog/tags/sso","description":"Single Sign-On (SSO)"},{"inline":false,"label":"SAML","permalink":"/my-blogs/blog/tags/saml","description":"Security Assertion Markup Language (SAML)"}],"readingTime":1.585,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"sso-saml-basics","title":"Understanding SSO and SAML - A Beginner\'s Guide","authors":["sahil"],"tags":["sso","saml"]},"unlisted":false,"prevItem":{"title":"Understanding SSO Techniques -  IdP-Initiated vs. SP-Initiated Login","permalink":"/my-blogs/blog/sso-saml-techniques"},"nextItem":{"title":"Stripe Payment Element in React & Spring Boot","permalink":"/my-blogs/blog/stripe-react"}},"content":"In today\u2019s digital world, managing multiple usernames and passwords for different applications can be frustrating. That\u2019s where Single Sign-On (SSO) and Security Assertion Markup Language (SAML) come in. These technologies streamline authentication, making it easier and more secure for users to access various applications with a single login.\\n\\n\x3c!-- truncate --\x3e\\n## What is SSO?\\nSingle Sign-On (SSO) is an authentication method that allows users to log in once and gain access to multiple applications without needing to re-enter their credentials. This improves user experience and enhances security by reducing password fatigue and minimizing the risk of weak passwords.\\n\\n## What is SAML?\\nSAML (Security Assertion Markup Language) is an open standard that enables SSO by facilitating secure communication between an Identity Provider (IdP) and a Service Provider (SP). It allows the IdP to authenticate users and pass their credentials securely to the SP without requiring the user to log in again.\\n\\n## How SAML SSO Works\\n1. **User Accesses Application:** The user tries to access a service (SP) without logging in.\\n2. **Redirect to IdP:** The SP redirects the user to the Identity Provider (IdP) for authentication.\\n3. **User Authentication:** The IdP verifies the user\u2019s identity (via username/password, MFA, etc.).\\n4. **SAML Response:** Upon successful authentication, the IdP generates a SAML assertion (XML-based security token) and sends it back to the SP.\\n5. **SP Grants Access:** The SP verifies the SAML response and logs the user in automatically.\\n\\n### Benefits of SAML SSO\\n- **Improved Security:** Eliminates the need for multiple passwords, reducing phishing risks.\\n- **Better User Experience:** Users log in once and access multiple applications seamlessly.\\n- **Centralized Authentication:** Organizations can manage access from a single authentication system.\\n\\n### Conclusion\\nSAML-based SSO simplifies authentication and enhances security by allowing users to access multiple services with a single login. Whether for enterprises or individual applications, implementing SAML SSO improves both user convenience and IT efficiency."},{"id":"stripe-react","metadata":{"permalink":"/my-blogs/blog/stripe-react","source":"@site/blog/2022-02-04-stripe-react/index.md","title":"Stripe Payment Element in React & Spring Boot","description":"Accepting online payments efficiently is essential for any modern business. Stripe offers a Payment Element, a prebuilt UI component that simplifies checkout by supporting multiple payment methods in a single integration. In this blog, we\u2019ll walk through integrating Stripe\u2019s Payment Element with a React frontend and a Spring Boot backend, ensuring a smooth and secure payment experience.","date":"2022-02-04T00:00:00.000Z","tags":[{"inline":false,"label":"Stripe","permalink":"/my-blogs/blog/tags/stripe","description":"Stripe"},{"inline":false,"label":"React","permalink":"/my-blogs/blog/tags/react","description":"React"},{"inline":false,"label":"Java","permalink":"/my-blogs/blog/tags/java","description":"Java"},{"inline":false,"label":"Spring Boot","permalink":"/my-blogs/blog/tags/springboot","description":"Spring Boot"}],"readingTime":3.85,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"stripe-react","title":"Stripe Payment Element in React & Spring Boot","authors":["sahil"],"tags":["stripe","react","java","springboot"]},"unlisted":false,"prevItem":{"title":"Understanding SSO and SAML - A Beginner\'s Guide","permalink":"/my-blogs/blog/sso-saml-basics"},"nextItem":{"title":"Dual Boot Ubuntu Alongside Windows 10 - Part 2","permalink":"/my-blogs/blog/dual-boot-ubuntu-p2"}},"content":"Accepting online payments efficiently is essential for any modern business. Stripe offers a **Payment Element**, a prebuilt UI component that simplifies checkout by supporting multiple payment methods in a single integration. In this blog, we\u2019ll walk through integrating Stripe\u2019s Payment Element with a **React frontend** and a **Spring Boot backend**, ensuring a smooth and secure payment experience.  \\n\\n---  \\n\x3c!-- truncate --\x3e\\n\\n## Why Use Stripe\'s Payment Element?\\n\\nThe **Payment Element** is a powerful tool that provides:  \\n\\n**Multiple payment method support** \u2013 Accepts credit cards, Apple Pay, Google Pay, and local payment methods.  \\n**Prebuilt UI** \u2013 Designed to be user-friendly and easy to integrate.  \\n**Automatic updates** \u2013 Ensures compliance with the latest security and payment regulations.  \\n**Dynamic behavior** \u2013 Adjusts based on the user\'s location and preferred payment options.  \\n\\nWhether you are building an **e-commerce store, subscription service, or digital marketplace**, Stripe\u2019s Payment Element simplifies the entire payment process.  \\n\\n---  \\n\\n## Prerequisites for Integration  \\n\\nBefore integrating Stripe, ensure you have:  \\n\\n- A **Stripe account** \u2013 You can sign up at [Stripe](https://stripe.com/).  \\n- A **React frontend** \u2013 To display the payment form and handle user interactions.  \\n- A **Spring Boot backend** \u2013 To communicate securely with Stripe\u2019s API.  \\n- A **Stripe API key** \u2013 Found in your Stripe dashboard, which enables backend communication with Stripe.  \\n\\n---  \\n\\n## Step 1: Setting Up Stripe in Your React Application\\n\\nTo begin, install the required Stripe packages in your React app. The frontend will use Stripe\u2019s **Elements provider**, which wraps your checkout form and provides the necessary Stripe context.  \\n\\nThe **Payment Element** dynamically loads different payment methods based on the user\u2019s location and previously used payment options, making the checkout experience seamless.  \\n\\n---  \\n\\n## Step 2: Setting Up the Backend with Spring Boot  \\n\\nYour **Spring Boot backend** is responsible for securely handling payment requests. It will:  \\n\\n1. **Generate a PaymentIntent** \u2013 This step involves communicating with Stripe\u2019s API to create a payment session. The backend will return a `clientSecret`, which the frontend will use to initialize the Payment Element.  \\n2. **Store transaction details** \u2013 Keeping a record of payments ensures that you can track transactions, issue refunds, and manage disputes.  \\n3. **Handle webhooks (optional but recommended)** \u2013 Webhooks allow your application to listen for events such as **successful payments, failed transactions, or refunds**. This improves reliability by ensuring that payments are processed correctly even if the user closes their browser before seeing the confirmation page.  \\n\\n---  \\n\\n## Step 3: Integrating the Payment Element in React\\n\\nOnce the backend is ready, the frontend will:  \\n\\n1. **Request a client secret** from the backend when a user initiates a payment.  \\n2. **Display the Payment Element** in a secure, responsive payment form.  \\n3. **Handle form submission and confirmation** \u2013 Once the user submits their payment, Stripe processes the transaction and redirects them to a success or failure page.  \\n\\nStripe handles most of the heavy lifting, including validating payment details, processing the transaction, and securely handling sensitive data.  \\n\\n---  \\n\\n## Step 4: Confirming the Payment\\n\\nOnce a payment is submitted, Stripe takes over. Depending on the payment method, the user may need to complete additional authentication steps, such as **3D Secure** for card payments.  \\n\\nAfter the payment is processed, Stripe will:  \\n\\n**Redirect the user** to a success page if the payment is completed.  \\n**Display an error message** if there are issues with the payment (e.g., insufficient funds, incorrect card details).  \\n**Trigger a webhook event** (if enabled) to notify your backend about the payment status.  \\n\\nWebhooks are essential for ensuring that even if a user closes their browser or loses internet connection, your application can still confirm whether the payment was successful.  \\n\\n---  \\n\\n## Step 5: Testing with Stripe\u2019s Test Mode\\n\\nBefore going live, use **Stripe\u2019s test mode** to simulate transactions. Stripe provides test card numbers that allow you to check different payment scenarios, such as successful payments, declined transactions, and authentication challenges.  \\n\\nThis ensures that your integration is working correctly before you process real payments.  \\n\\n---  \\n\\n## Final Thoughts  \\n\\nIntegrating **Stripe\u2019s Payment Element** with a **React frontend** and **Spring Boot backend** simplifies the entire payment process, making it **secure, reliable, and user-friendly**. Whether you\u2019re building a one-time payment system or handling recurring subscriptions, Stripe provides a **scalable** and **efficient** solution.  \\n\\n### What\u2019s Next?  \\n\\n**Customization** \u2013 Modify the Payment Element UI to match your brand.  \\n**Additional Payment Methods** \u2013 Enable support for **Apple Pay, Google Pay, and local payment options**.  \\n**Recurring Payments & Subscriptions** \u2013 Implement Stripe Billing for automatic renewals.  \\n**Webhooks & Notifications** \u2013 Set up webhooks to track payment statuses and automate order processing.  \\n\\nTo learn more, check out **[Stripe\u2019s official documentation](https://stripe.com/docs/payments/payment-element)** and start building a seamless checkout experience today!"},{"id":"dual-boot-ubuntu-p2","metadata":{"permalink":"/my-blogs/blog/dual-boot-ubuntu-p2","source":"@site/blog/2020-08-09-dual-boot-ubuntu-p2/index.md","title":"Dual Boot Ubuntu Alongside Windows 10 - Part 2","description":"We have completed the following steps in the previous blog Dual Boot Ubuntu Alongside Windows 10 - Part 1","date":"2020-08-09T00:00:00.000Z","tags":[{"inline":false,"label":"Linux","permalink":"/my-blogs/blog/tags/linux","description":"Linux Operating System"},{"inline":false,"label":"Ubuntu","permalink":"/my-blogs/blog/tags/ubuntu","description":"Ubuntu Operating System"},{"inline":false,"label":"Windows 10","permalink":"/my-blogs/blog/tags/windows10","description":"Windows 10 Operating System"}],"readingTime":3.945,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"dual-boot-ubuntu-p2","title":"Dual Boot Ubuntu Alongside Windows 10 - Part 2","authors":["sahil"],"tags":["linux","ubuntu","windows10"]},"unlisted":false,"prevItem":{"title":"Stripe Payment Element in React & Spring Boot","permalink":"/my-blogs/blog/stripe-react"},"nextItem":{"title":"Dual Boot Ubuntu Alongside Windows 10 - Part 1","permalink":"/my-blogs/blog/dual-boot-ubuntu-p1"}},"content":"We have completed the following steps in the previous blog [Dual Boot Ubuntu Alongside Windows 10 - Part 1](/blog/dual-boot-ubuntu-p1)\\n\\n***Step 1 : Create a partition for Ubuntu OS***    \\n***Step 2 : Creating an Installer Media***\\n\\nNow we will proceed with the installation of Ubuntu in the next step...\\n\\n\x3c!-- truncate --\x3e\\n\\n#### Step 3 : Installing Ubuntu with Dual boot on Windows 10\\n\\nIn the last steps we have created an installer media using the USB drive. We will use the installer media now to install Ubuntu.\\n\\nConnect the USB drive / pen-drive to the PC and power ON the PC (Note: If you are already logged in to Windows simply connect the pen-drive to PC and restart your PC)\\n\\nWhile the PC is starting press F12 continuously to open the boot menu (The keys to access boot menu varies according to brand, F12 is boot menu key for Dell and Lenovo, F10 for HP) \\n\\n![Boot Menu](./boot-menu.png)\\n\\nOnce on the boot menu screen you can select your USB device from the list of available boot devices.\\n\\nAfter selecting your USB device press Enter to boot into Ubuntu. If a grub screen as shown in following figure appears select Try Ubuntu without installing\\n\\n![Try Ubuntu](./try-ubuntu.png)\\n\\nIt will take some time to boot into the OS after which the following screen will appear. You can click on Try Ubuntu to get the feel of the OS before actually installing it or you can directly proceed to install the OS by clicking Install Ubuntu.\\n\\n![Install Ubuntu](./install-ubuntu.png)\\n\\nAfter clicking on Install Ubuntu the following screen will open. Select your keyboard layout and click on Continue.\\n\\n![Keyboard Layout](./keyboard-layout.png)\\n\\nIn the next screen you will need to select the apps to install while installing Ubuntu.\\n\\nFor Normal Installation it will install all softwares for web browsers, utilities, office softwares, games and media players. \\n\\nSelect Minimal Installation if you do not need more software or are short in space. ( Note: You can install these softwares later if  required )\\n\\nHere we will proceed with Normal Installation\\n\\nUn-check Other Options i.e Download updates while installing Ubuntu and Install third-party software and click on Continue\\n\\n![Install](./install.png)\\n\\nNext you need to select the Installation type\\n\\nSelect Something else from the available options and click Continue. This gives us the freedom to make our own partitions and allocate space as per our needs.\\n\\n![Installation Type](./installation-type.png)\\n\\nThe next window we need to create partitions for our installation.\\n\\nFrom the available partitions select the free space partition. Its nearly 50 GB of free space. \\n\\nWe will be creating two partitions from the available 50 GB space: \\n\\n- The root (/) partition (same as C: Drive in windows)\\n- The swap partition (Its like an extra RAM, its a partition that works as a RAM when the original RAM memory is fully utilised. The recommended swap memory size ~ 2 * RAM size)\\n\\nYou can also add the Home partition (as D: and E: drives in Windows) to properly organise your system files. But I will skip that here.\\n\\n![Installation Type 1](./installation-type-1.png)\\n\\nOnce you have selected the free space partition click on the plus ( + ) icon on the window. This will open a Create Partition window.\\n\\nWe will first create the root partition.\\n\\nEnter the size of the partition as 40000 MB, select the type as Logical and location as Beginning of this space.  Use as : Ext4 journaling file system\\n\\nSelect the mount point as (/) i.e root and click on OK. This will create the root partition.\\n\\n![Create Partition](./create-partition.png)\\n\\nNext we will add the swap partition. \\n\\nSelect the available free space partition and click on plus ( + ) icon. This will again open the Create Partition window.  \\n\\nEnter the size of the partition as 8000 MB, select the type as Logical and location as Beginning of this space.  Select Use as : swap area and click OK. \\n\\n![Create Partition](./create-partition-2.png)\\n\\nHence we are done with creating the root and swap partition. Now you can click Install Now\\n\\n![Something else](./something-else.png)\\n\\nA confirmation window will pop up. Click on Continue to proceed with the installation. \\n\\n![Something else](./something-else-2.png)\\n\\nBefore starting the installation you need to enter some details..\\n\\nSelect your time zone and click Continue\\n\\n![Time Zone](./time-zone.png)\\n\\nEnter your login details and click on Continue\\n\\n![Login Details](./login-details.png)\\n\\nNow your installation will begin. This will take some time.\\n\\n![Installation](./installation.png)\\n\\nOnce the installation is complete you can restart the computer by clicking Restart Now\\n\\n![Restart](./restart.png)\\n\\nAfter restarting your computer you will now see a grub screen from where you can choose between the two OS. Select Ubuntu to boot into Ubuntu OS and select Windows Boot Manager to boot into Windows 10.\\n\\n![Grub Screen](./grub-screen.png)\\n\\nThis completes the installation of Ubuntu alongside Windows 10.\ud83d\ude0e"},{"id":"dual-boot-ubuntu-p1","metadata":{"permalink":"/my-blogs/blog/dual-boot-ubuntu-p1","source":"@site/blog/2020-08-08-dual-boot-ubuntu-p1/index.md","title":"Dual Boot Ubuntu Alongside Windows 10 - Part 1","description":"Dual Boot or VMware?","date":"2020-08-08T00:00:00.000Z","tags":[{"inline":false,"label":"Linux","permalink":"/my-blogs/blog/tags/linux","description":"Linux Operating System"},{"inline":false,"label":"Ubuntu","permalink":"/my-blogs/blog/tags/ubuntu","description":"Ubuntu Operating System"},{"inline":false,"label":"Windows 10","permalink":"/my-blogs/blog/tags/windows10","description":"Windows 10 Operating System"}],"readingTime":3.325,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"dual-boot-ubuntu-p1","title":"Dual Boot Ubuntu Alongside Windows 10 - Part 1","authors":["sahil"],"tags":["linux","ubuntu","windows10"]},"unlisted":false,"prevItem":{"title":"Dual Boot Ubuntu Alongside Windows 10 - Part 2","permalink":"/my-blogs/blog/dual-boot-ubuntu-p2"},"nextItem":{"title":"Ubuntu (Linux) - My OS for programming","permalink":"/my-blogs/blog/ubuntu"}},"content":"### Dual Boot or VMware?\\n\\nDepending on the work or requirements of a particular assigned task, one may require a specific operating system or a specific version of an operating system (eg. Linux or Windows 7 or Windows 10).\\n\x3c!-- truncate --\x3e\\n\\nTo install multiple copies of different OS on a machine there are two ways: Dual Boot or use a VMware software.\\n\\n### Why use Dual Boot?\\n\\nIn case of dual boot the system hardware is completely dedicated to the particular OS. \\n\\nSimply consider your PC has a 4 GB of RAM and 1 TB of Hard disk space. In case of dual boot the the OS you are running will be able to use full available RAM improving high performance tasks experience.\\n\\nIn Virtual Machine Software you use one OS on top of another, thus dividing the available RAM among these two OS. \\n\\nIt is preferable to use dual boot, if your system lacks high speed hardwares and you are to be working on the selected OS for a longer duration.\\n\\nIn case you just need to use the OS for a small work or quick tasks, VMware is recommended.\\n\\n### Dual Boot Ubuntu alongside Windows 10\\n\\n#### Step 1 : Create a partition for Ubuntu OS\\n\\nTo install Ubuntu on your computer you need to set aside some free space on the hard disk. The recommended system requirements for Ubuntu 20.04 LTS are: \\n\\n- 2 GHz dual core processor or better\\n- 4 GB RAM\\n- 25 GB of free hard drive space\\n\\nIn most windows PC the hard disk is majorly partitioned into \\n\\n- OS (C:) drive -  Windows system and OS files are installed here\\n- D: drive, E: drive ,etc - Mainly for personal storage purpose (Optional)\\n\\nIn this step we have to create such one partition to install the Ubuntu OS and to store its system files\\n\\n- Login to your windows system and open Disk Management     \\n![Disk Management Window](./disk-management-window.png)\\n- In above window there is a OS (C:) partition which is of 223.50 GB of disk space ( sizes will vary according to system ). Ubuntu requires minimum 25 GB of free disk space. Here I will use 50 GB of the available space for the OS installation.\\n- Right Click on the OS (C:) drive partition and select Shrink Volume.      \\n![Shrink Volume](./shrink-vomume.png)\\n- After clicking Shrink Volume the following window will open      \\n![Shrink C](./shrink-c.png)\\n- In the input for column Enter the amount of space to shrink in MB enter 50000 and then click on Shrink button. \\n- Once done you will be able to see a Unallocated 50 GB partition which we will be using to install Ubuntu.      \\n![Unallocated Partition](./unallocated-partition.png)\\n\\n#### Step 2 : Creating an Installer Media\\n\\nBefore proceeding further make sure you have downloaded the following softwares and have the necessary hardware ( USB drive / Pendrive - minimum 8 GB )\\n\\n1. Ubuntu .iso Image File ([Download](https://ubuntu.com/download/desktop))\\n2. SD Memory Card Formatter Software ([Download](https://www.sdcard.org/downloads/formatter/eula_windows/index.html))\\n3. Balena Etcher Software ([Download](https://www.balena.io/etcher/))\\n\\nOnce you have all the necessaries, you can connect the pendrive to the windows PC.\\n\\n**A. Formatting the USB Drive**\\n\\nLaunch the SDFormatter application, once you have downloaded and installed the SD formatter from given download link. The following window will open.      \\n![SD Formatter v4](./sd-formatter.png)\\n\\nClick on Option and select FORMAT TYPE as FULL (Erase) and then select OK   \\n![Option Setting](./option-setting.png)\\n\\nNow click on Format. Once done we can proceed to the next step.\ud83d\ude0e    \\n![Full Format](./full-format.png)\\n\\n**B. Creating the installer media**\\n\\nLaunch BalenaEtcher and you will see the following window opens    \\n![BalenaEtcher Window](./balenaetcher-window.png)\\n\\nClick on Select image and browse to the location where you have saved the Ubuntu .iso image file.   \\n![Select the image file](./select-image.png)\\n\\nSelect the .iso file and click Open.\\n\\nYou should now select the USB device (if its not already selected) on which you need to write the OS.   \\n![Flash the OS](./flash-image.png)\\n\\nNow click on Flash! and wait for the process to complete.   \\n![Flash Complete](./flash-complete.png)\\n\\nYour installer media is ready!"},{"id":"ubuntu","metadata":{"permalink":"/my-blogs/blog/ubuntu","source":"@site/blog/2020-08-07-ubuntu-linux/index.md","title":"Ubuntu (Linux) - My OS for programming","description":"What is Ubuntu?","date":"2020-08-07T00:00:00.000Z","tags":[{"inline":false,"label":"Linux","permalink":"/my-blogs/blog/tags/linux","description":"Linux Operating System"},{"inline":false,"label":"Ubuntu","permalink":"/my-blogs/blog/tags/ubuntu","description":"Ubuntu Operating System"}],"readingTime":1.325,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"ubuntu","title":"Ubuntu (Linux) - My OS for programming","authors":["sahil"],"tags":["linux","ubuntu"]},"unlisted":false,"prevItem":{"title":"Dual Boot Ubuntu Alongside Windows 10 - Part 1","permalink":"/my-blogs/blog/dual-boot-ubuntu-p1"},"nextItem":{"title":"Setting Up Raspberry Pi 3 - Part 2","permalink":"/my-blogs/blog/setting-raspberry-pi-software-p2"}},"content":"### What is Ubuntu?\\n\\n**Ubuntu** is an open source linux based software operating system that runs from the desktop **(Ubuntu Desktop)**, to the cloud **(Ubuntu Server)**, to all your internet connected things.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Why use Ubuntu?\\n\\n**Ubuntu** comes with everything you need to run your organisation, school, home or enterprise. All the essential applications, like an office suite, browsers, email and media apps come pre-installed and thousands more games and applications are available in the Ubuntu Software Centre.\\n\\nUbuntu has always been free to download, use and share.\\n\\nIt comes with a built-in firewall and virus protection software due to which it is one of the most secure operating systems around. And the long-term support releases give you five years of security patches and updates.\\n\\nUbuntu is by far the most popular of the well known Linux distributions. Thus it has a large community providing extensive knowledge and solutions to most of the problems.\\n\\n### How to get Ubuntu?\\n\\nAs mentioned earlier, Ubuntu is always free to download and the latest LTS version at the time of writing of this blog is Ubuntu 20.04.\\n\\nYou can download the OS from the official site - https://ubuntu.com/download and replace your current OS with it or run Ubuntu alongside it.\\n\\nFor desktop PCs and laptops download the Ubuntu Desktop image from https://ubuntu.com/download/desktop\\n\\n![Download Ubuntu Desktop](./download-ubuntu-desktop.png)\\n\\nOnce you have downloaded the .iso image file for the OS, you can simply install the OS by replacing the old one or install it along side other OS such as Windows by using dual boot or Virtual Machine Softwares."},{"id":"setting-raspberry-pi-software-p2","metadata":{"permalink":"/my-blogs/blog/setting-raspberry-pi-software-p2","source":"@site/blog/2018-01-09-setting-raspberry-pi-p2/index.md","title":"Setting Up Raspberry Pi 3 - Part 2","description":"Practical setup of Raspberry Pi","date":"2018-01-09T00:00:00.000Z","tags":[{"inline":false,"label":"Raspberry Pi","permalink":"/my-blogs/blog/tags/raspberrypi","description":"Raspberry Pi"},{"inline":false,"label":"Windows 10","permalink":"/my-blogs/blog/tags/windows10","description":"Windows 10 Operating System"}],"readingTime":2.26,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"setting-raspberry-pi-software-p2","title":"Setting Up Raspberry Pi 3 - Part 2","authors":["sahil"],"tags":["raspberrypi","windows10"]},"unlisted":false,"prevItem":{"title":"Ubuntu (Linux) - My OS for programming","permalink":"/my-blogs/blog/ubuntu"},"nextItem":{"title":"Setting Up Raspberry Pi 3 - Part 1","permalink":"/my-blogs/blog/setting-raspberry-pi-software-p1"}},"content":"### Practical setup of Raspberry Pi\\n\\nIn the [previous part](/blog/setting-raspberry-pi-software-p1) we were all done with writing the OS to tour SD Card. Now its time to attach this SD Card to our Raspberry Pi 3 board.\\n\\n\x3c!-- truncate --\x3e\\n\\nSo connect the SD Card to the Board and follow these step to setup your board.\\n\\n1. Open the control panel   \\n![Control Panel](./control-panel.png)   \\n2. Click on the `Network and Internet | Network and Sharing Centre | Change Adapter settings`.   \\nThe following window will open.   \\n![Network Connections](./network-connections.png)   \\n3. Click on `Ethernet`. The following window will open.   \\n![Ethernet Properties](./ethernet-properties.png)   \\n4. Double click on Internet Protocol Version 4(TCP/IPv4)   \\n![IP v4](./ipv4.png)   \\n5. Click on Use the following IP address and use the following IP address: `169.254.211.250`   \\nSubnet mask will automatically set.   \\n![IP v4](./ipv4-2.png)   \\n6. Now click OK and close every thing.\\n\\n#### Connecting the Raspberry pi to PC\\n\\nNow just follow these steps to connect the Raspberry Pi to your PC.\\n\\n1. Power up the Raspberry Pi using an micro USB cable and connect it to PC (or a 5 V supply).   \\n2. Now connect the PC and the Raspberry pi using a LAN cable. If the connection is proper the Tx-Rx led will start to glow.   \\n3. Now to set up the Raspbian OS on your PC you will require two other softwares \u2013 Xming and Putty.   \\n4. You can get both the softwares from https://xming.en.download.it/ and https://www.putty.org/ respectively.\\n5. Firstly Install the Xming software as usual next-next-install. Putty doesn\'t needs installation. It will directly run on your PC.\\n6. Now double click on Xming to open it. You will find nothing opens. Don\u2019t worry Xming is a background app and runs in background.\\n7. Now open Putty.   \\n![Putty](./putty.png)   \\n8. In the `Sessions` tab specify the Host Name(or IP address) to `169.254.211.247`. Let all other settings at default.   \\n![Putty](./putty-2.png)   \\n9. In the category expand the `SSH` tab and select `X11` and check `Enable X11 forwarding`.   \\n![Putty](./putty-3.png)  \\n![Putty](./putty-4.png)     \\n10. Now click on `Open`. When you do so Raspbian OS will open. If this window opens means that yours OS is successfully installed.   \\n![Putty](./putty-5.png)   \\n11. In Login as enter `pi` which is default user name and press enter.    \\n![Putty](./putty-6.png)   \\n12. In the password enter `raspberry` which is again by default. Note that the password you enter will not be visible. Now press enter.   \\n![Putty](./putty-7.png)    \\n13. Once the loading is done and you find the cursor, write the command `startlxde` and then press enter.   \\n![Putty](./putty-8.png)    \\n14. Once you press enter the following window will open.   \\n![Raspbian OS UI](./raspbian-os-ui.png)   \\n\\n\\nIt is as an another OS at the top of my Windows 10. This is achieved using Xming. You can explore this OS for now till the next post on this."},{"id":"setting-raspberry-pi-software-p1","metadata":{"permalink":"/my-blogs/blog/setting-raspberry-pi-software-p1","source":"@site/blog/2018-01-08-setting-raspberry-pi-p1/index.md","title":"Setting Up Raspberry Pi 3 - Part 1","description":"Installing the Operating System","date":"2018-01-08T00:00:00.000Z","tags":[{"inline":false,"label":"Raspberry Pi","permalink":"/my-blogs/blog/tags/raspberrypi","description":"Raspberry Pi"},{"inline":false,"label":"Windows 10","permalink":"/my-blogs/blog/tags/windows10","description":"Windows 10 Operating System"}],"readingTime":2.555,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"setting-raspberry-pi-software-p1","title":"Setting Up Raspberry Pi 3 - Part 1","authors":["sahil"],"tags":["raspberrypi","windows10"]},"unlisted":false,"prevItem":{"title":"Setting Up Raspberry Pi 3 - Part 2","permalink":"/my-blogs/blog/setting-raspberry-pi-software-p2"},"nextItem":{"title":"Setting Up Arduino Software for the First time","permalink":"/my-blogs/blog/setting-arduino-software"}},"content":"### Installing the Operating System\\n\\nThe first model of raspberry pi was launched in 2011. Since then it has became immensely popular as a low cost computer.\\n\\nThere are many models of the Raspberry Pi from Raspberry Pi zero to Raspberry Pi 3. \\n\\nIn this blog I will more concentrate on the latest raspberry pi model RASPBERRY PI 3, Model B which comes with 1 GB RAM.\\n\\n\x3c!-- truncate --\x3e\\n\\n#### Materials Required:\\n\\n1. A Raspberry Pi 3, Model B.\\n2. A minimum 8 GB SD Card. I am using a 16 GB SD Card.\\n3. A micro USB cable for powering the Pi.\\n4. A LAN cable.\\n5. Softwares Required\\n    -   SDFormatter\\n    -   Win32 disc Manager software\\n    -   Xming\\n    -   Putty\\n\\n#### Steps:\\n\\nWe are going to install our OS on the SD card, so definitely we will require it to be fully empty. So the first step is to format the SD card.\\n\\nFor this purpose you can use the application SDFormatter. You can download it from https://www.sdcard.org/downloads/formatter/\\n\\nOnce done with this install it on your PC. Just  go with the flow, Next -Next and INSTALL.\\n\\n#### Now follow these steps to get your SD card ready.\\n\\n1. Connect the SD card to your PC.   \\n2. Now open the SDFormatter software. It will look as shown in the following screenshot.   \\n![SD Formatter](./sdformatter.jpg)   \\n3. Make sure your SD Card drive name is selected. If not you can do this now.   \\n4. Now click on option. A pop up window will open as seen in the next screenshot.   \\n![SD Formatter](./sdformatter-2.jpg)   \\n5. Select format type as FULL(erase) and format size adjustment as OFF.   \\n6. Now click OK and select format. This will prepare our SD Card for OS installation \\n\\n#### Now its time to write the OS to our SD Card.\\n\\nNow you will require the **Disc Image File Raspbian-jessie** which you can get from https://downloads.raspberrypi.org/raspbian/images/\\n\\nOnce you have downloaded and extracted the .img file, place it in a proper folder for now so that it is easy to browse to it.   \\n![File Explorer](./file-explorer.jpg)\\n\\nNow you are ready to install this image file onto your SD Card. For this you will require the **win32 disc Manager software**. You can download from https://win32diskimager.org/.\\n\\nOnce installed open the software. It will look as in following screenshot    \\n![Disk Imager](./disk-imager.jpg)\\n\\nFrom the Browse options go to the location of the Raspbian image file. In my case it is F:\\\\Raspberry Pi OS.   \\n![Raspbian Image](./raspbian-image.png)\\n\\nOnce you select the .img file click open.   \\n![Disk Imager 2](./disk-imager-2.png)\\n\\nNow click on Write and  this will start the writing the OS on the SD Card. Once it is done click on OK.\\n\\nNow browse to the SD Card from your PC\'s File Browser and open it.   \\n![File Explorer](./file-explorer-2.png)\\n\\nNow find the file CMDline.txt file. And open it in Notepad.      \\n![Notepad](./notepad.png)\\n\\nIn this file find the word `rootwait` and replace it by `rootwait ip=169.254.211.247`.    \\n![Notepad 2](./notepad-2.png)\\n\\nNow connect the SD Card to Raspberry Pi. \\n\\nIn the next post we will see how to install the setup the Raspberry Pi with our PC."},{"id":"setting-arduino-software","metadata":{"permalink":"/my-blogs/blog/setting-arduino-software","source":"@site/blog/2018-01-07-setting-arduino-software/index.md","title":"Setting Up Arduino Software for the First time","description":"Setup for Arduino IDE:","date":"2018-01-07T00:00:00.000Z","tags":[{"inline":false,"label":"Arduino","permalink":"/my-blogs/blog/tags/arduino","description":"Arduino IDE"},{"inline":false,"label":"Windows 10","permalink":"/my-blogs/blog/tags/windows10","description":"Windows 10 Operating System"}],"readingTime":1.275,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"setting-arduino-software","title":"Setting Up Arduino Software for the First time","authors":["sahil"],"tags":["arduino","windows10"]},"unlisted":false,"prevItem":{"title":"Setting Up Raspberry Pi 3 - Part 1","permalink":"/my-blogs/blog/setting-raspberry-pi-software-p1"}},"content":"### Setup for Arduino IDE:\\n\\n#### Installing the Software:\\n\\nYou can download the Arduino IDE from the official site of Arduino https://www.arduino.cc/en/Main/Software. Download the latest version. At the time of writing this post the latest version was version 1.8.5.\\n\\n\x3c!-- truncate --\x3e\\n\\nI have downloaded the Windows Zip file for non-admin install.   \\n![Download Arduino](./download-arduino.jpg)\\n\\nOnce downloaded, extract the file and you will find the Arduino software in there, no need of any installing procedures.   \\n![File Explorer](./file-explorer.jpg)\\n\\nIf you are connecting your Arduino Board for the first time you will require to install the necessary drivers to make the board compatible .\\n\\nThe drivers are available in the drivers folder in the extracted folder.\\n\\nJust open it and find the **Arduino.inf** file in it. Copy the path of the drivers folder.   \\n![Drivers](./drivers.jpg)\\n\\nNow open the Device Manager   \\n![Device Manager](./device-manager.jpg)\\n\\nIn the device manager, when you connect the Arduino you will find your device name in the Ports(COM & LPT). For eg. Arduino UNO or Arduino MEGA etc. If you cant find your device under Ports(COM & LPT) look under Other Devices.\\n\\nOnce you have found your device, Right click on the device and select Update Driver Software.   \\n![Device Manager](./device-manager-2.jpg)\\n\\nThe following window will open   \\n![Update Driver](./update-driver.jpg)\\n\\nSelect Browse my computer for driver software and browse to the drivers folder or paste the address of the driver software and click Next.   \\n![Update Driver 2](./update-driver-2.jpg)\\n\\nAfter this the windows will install the necessary driver and you are ready to go. Connect your device and simply plug and play."}]}}')}}]);