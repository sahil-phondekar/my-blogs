"use strict";(self.webpackChunkmy_blogs=self.webpackChunkmy_blogs||[]).push([[8696],{6191:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/swagger-93a10f74265b5f81e0961fa831776806.png"},6441:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var r=i(7649),t=i(4848),s=i(8453);const o={slug:"configuring-jwt-authorization-swagger-ui",title:"Configuring JWT Authorization in Swagger UI with Spring Boot",authors:["sahil"],tags:["springboot","swagger","jwt-authentication","spring-security"]},a=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Add Swagger/OpenAPI Dependency",id:"step-1-add-swaggeropenapi-dependency",level:2},{value:"Step 2: Create Swagger Configuration Class",id:"step-2-create-swagger-configuration-class",level:2},{value:"<code>SwaggerConfig.java</code>",id:"swaggerconfigjava",level:3},{value:"Step 3: Secure Specific Endpoints",id:"step-3-secure-specific-endpoints",level:2},{value:"Example: UserController",id:"example-usercontroller",level:3},{value:"Step 4: Testing in Swagger UI",id:"step-4-testing-in-swagger-ui",level:2},{value:"Conclusion",id:"conclusion",level:2}];function g(e){const n={br:"br",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["In a secure REST API, it's important to authenticate requests \u2014 especially when using ",(0,t.jsx)(n.strong,{children:"JWT tokens"}),". When integrating Swagger UI using ",(0,t.jsx)(n.code,{children:"springdoc-openapi"}),", we can also configure it to include a ",(0,t.jsx)(n.strong,{children:"JWT Authorization header"})," so developers can test secured endpoints easily."]}),"\n",(0,t.jsxs)(n.p,{children:["In this tutorial, we\u2019ll walk through how to configure ",(0,t.jsx)(n.strong,{children:"JWT Bearer Authorization in Swagger UI"})," step by step."]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.p,{children:["You should have a working Spring Boot application secured with ",(0,t.jsx)(n.strong,{children:"Spring Security"})," and ",(0,t.jsx)(n.strong,{children:"JWT authentication"})," already implemented."]}),"\n",(0,t.jsx)(n.h2,{id:"step-1-add-swaggeropenapi-dependency",children:"Step 1: Add Swagger/OpenAPI Dependency"}),"\n",(0,t.jsxs)(n.p,{children:["Add the ",(0,t.jsx)(n.code,{children:"springdoc-openapi"})," dependency to your ",(0,t.jsx)(n.code,{children:"pom.xml"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.springdoc</groupId>\n    <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\n    <version>2.8.6</version>\n</dependency>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This enables auto-generation of OpenAPI docs and the Swagger UI at ",(0,t.jsx)(n.code,{children:"/swagger-ui.html"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"step-2-create-swagger-configuration-class",children:"Step 2: Create Swagger Configuration Class"}),"\n",(0,t.jsxs)(n.p,{children:["The configuration file tells Swagger to use the ",(0,t.jsx)(n.strong,{children:"JWT Bearer"})," scheme for authorization."]}),"\n",(0,t.jsx)(n.h3,{id:"swaggerconfigjava",children:(0,t.jsx)(n.code,{children:"SwaggerConfig.java"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package com.example.pharmacy_management_server.config;\n\nimport io.swagger.v3.oas.annotations.enums.SecuritySchemeType;\nimport io.swagger.v3.oas.annotations.security.SecurityScheme;\nimport org.springdoc.core.models.GroupedOpenApi;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n// Define a security scheme for JWT Authorization in Swagger\n@SecurityScheme(\n    name = "Authorization",                // Name used in @SecurityRequirement\n    type = SecuritySchemeType.HTTP,       // HTTP auth type\n    bearerFormat = "JWT",                 // Indicate it\'s a JWT token\n    scheme = "bearer"                     // Use the bearer authentication scheme\n)\n@Configuration\npublic class SwaggerConfig {\n\n    // Group all APIs under "public" and expose all routes\n    @Bean\n    public GroupedOpenApi publicApi() {\n        return GroupedOpenApi.builder()\n                .group("public")\n                .pathsToMatch("/**")\n                .build();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"step-3-secure-specific-endpoints",children:"Step 3: Secure Specific Endpoints"}),"\n",(0,t.jsxs)(n.p,{children:["Now, for any endpoint you want to protect with JWT and require users to authorize via Swagger UI, annotate the controller method or class with ",(0,t.jsx)(n.code,{children:"@SecurityRequirement"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"example-usercontroller",children:"Example: UserController"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package com.example.pharmacy_management_server.controller;\n\nimport com.example.pharmacy_management_server.model.User;\nimport com.example.pharmacy_management_server.service.UserService;\nimport io.swagger.v3.oas.annotations.security.SecurityRequirement;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.UUID;\n\n@RestController\n@RequestMapping("/api/users")\npublic class UserController {\n\n    private final UserService userService;\n\n    public UserController(UserService userService) {\n        this.userService = userService;\n    }\n\n    // Secure this endpoint with JWT token in Swagger UI\n    @SecurityRequirement(name = "Authorization")\n    @GetMapping("/{userId}")\n    public ResponseEntity<User> getUserById(\n            @PathVariable UUID userId,\n            @AuthenticationPrincipal UserDetails userDetails\n    ) {\n        if (userDetails == null) {\n            return ResponseEntity.status(403).build();\n        }\n\n        User user = userService.getUserById(userId);\n        return ResponseEntity.ok(user);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:'@SecurityRequirement(name = "Authorization")'}),":",(0,t.jsx)(n.br,{}),"\n","This tells Swagger that this endpoint requires a JWT token using the ",(0,t.jsx)(n.code,{children:'"Authorization"'})," scheme defined earlier."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["When users try this endpoint from Swagger UI, they will see an ",(0,t.jsx)(n.strong,{children:"Authorize"})," button. Once they enter their token (e.g., ",(0,t.jsx)(n.code,{children:"Bearer eyJhbGciOi..."}),"), Swagger will include it in the ",(0,t.jsx)(n.code,{children:"Authorization"})," header for all secured endpoints."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"step-4-testing-in-swagger-ui",children:"Step 4: Testing in Swagger UI"}),"\n",(0,t.jsx)(n.p,{children:"Once everything is set up:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Go to: ",(0,t.jsx)(n.code,{children:"http://localhost:8080/swagger-ui.html"})]}),"\n",(0,t.jsxs)(n.li,{children:["Click the ",(0,t.jsx)(n.strong,{children:"Authorize"})," button at the top-right",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.img,{alt:"Swagger",src:i(6191).A+"",width:"1353",height:"611"})]}),"\n",(0,t.jsxs)(n.li,{children:["Enter your JWT token:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Try calling secured endpoints \u2014 the ",(0,t.jsx)(n.code,{children:"Authorization"})," header will now be automatically included."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"Adding JWT authorization to Swagger UI helps you test your secure endpoints without using external tools like Postman. By defining the security scheme and annotating secured endpoints properly, you can integrate token-based authentication smoothly into the developer experience."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},7649:e=>{e.exports=JSON.parse('{"permalink":"/my-blogs/blog/configuring-jwt-authorization-swagger-ui","source":"@site/blog/2025-04-04-spring-security-swagger-integration/index.md","title":"Configuring JWT Authorization in Swagger UI with Spring Boot","description":"In a secure REST API, it\'s important to authenticate requests \u2014 especially when using JWT tokens. When integrating Swagger UI using springdoc-openapi, we can also configure it to include a JWT Authorization header so developers can test secured endpoints easily.","date":"2025-04-04T00:00:00.000Z","tags":[{"inline":false,"label":"Spring Boot","permalink":"/my-blogs/blog/tags/springboot","description":"Spring Boot"},{"inline":false,"label":"Swagger","permalink":"/my-blogs/blog/tags/swagger","description":"API documentation with Swagger UI"},{"inline":false,"label":"JWT Authentication","permalink":"/my-blogs/blog/tags/jwt-authentication","description":"JSON Web Token (JWT) Authentication in Spring Boot"},{"inline":false,"label":"Spring Security","permalink":"/my-blogs/blog/tags/spring-security","description":"Secure your applications using Spring Security"}],"readingTime":2.39,"hasTruncateMarker":true,"authors":[{"name":"Sahil Phondekar","title":"Sr. Software Engineer @Everestek","url":"https://github.com/sahil-phondekar","page":{"permalink":"/my-blogs/blog/authors/sahil"},"socials":{"linkedin":"https://www.linkedin.com/in/sahil-phondekar/","x":"https://x.com/sahilphondekar","github":"https://github.com/sahil-phondekar"},"imageURL":"https://github.com/sahil-phondekar.png","key":"sahil"}],"frontMatter":{"slug":"configuring-jwt-authorization-swagger-ui","title":"Configuring JWT Authorization in Swagger UI with Spring Boot","authors":["sahil"],"tags":["springboot","swagger","jwt-authentication","spring-security"]},"unlisted":false,"prevItem":{"title":"Build and Publish a Custom React + Tailwind CSS Component Library (with Webpack & Babel)","permalink":"/my-blogs/blog/publishing-npm-package"},"nextItem":{"title":"Spring Boot JWT Authentication with Spring Security \u2014 Complete Step-by-Step Guide","permalink":"/my-blogs/blog/spring-security-intergration"}}')},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var r=i(6540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);